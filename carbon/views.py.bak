from django.shortcuts import render, get_object_or_404
from rest_framework import viewsets, status, generics, permissions
from rest_framework.decorators import action, api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from django.db.models import Sum, Avg, F, Q, Count
from django.utils import timezone
from datetime import datetime, timedelta
from .models import (
    CropType, ProductionTemplate, EventTemplate,
    CarbonSource,
    CarbonOffsetAction,
    CarbonEntry,
    CarbonCertification,
    CarbonBenchmark,
    CarbonReport,
    CarbonAuditLog,
    SustainabilityBadge,
    MicroOffset,
    GreenPoints,
    CarbonOffsetProject,
    CarbonOffsetPurchase,
    CarbonOffsetCertificate,
    IoTDevice,
    IoTDataPoint,
    AutomationRule
)
from history.models import WeatherEvent, ChemicalEvent, ProductionEvent, GeneralEvent, EquipmentEvent, SoilManagementEvent, PestManagementEvent
from .serializers import (
    CropTypeSerializer, CropTypeDropdownSerializer, EventTemplateSerializer, CropTemplateDetailSerializer, QuickEventTemplateSerializer,
    CarbonSourceSerializer,
    CarbonOffsetActionSerializer,
    CarbonEntrySerializer,
    CarbonCertificationSerializer,
    CarbonBenchmarkSerializer,
    CarbonReportSerializer,
    CarbonFootprintSummarySerializer,
    SustainabilityBadgeSerializer,
    MicroOffsetSerializer,
    GreenPointsSerializer,
    CarbonAuditLogSerializer,
    CarbonOffsetProjectSerializer,
    CarbonOffsetPurchaseSerializer,
    CarbonOffsetCertificateSerializer
)
from .services import coolfarm_service
from django.contrib.auth import get_user_model
from company.models import Establishment
from history.models import History
from .services.calculator import calculator
from .services.verification import verification_service
# from .services.certificate import certificate_generator  # Temporarily disabled due to font issues
from .services.report_generator import report_generator
from rest_framework import serializers
import logging
import random
import math
import datetime
import json

from .services.john_deere_api import JohnDeereAPI, is_john_deere_configured, get_john_deere_api
from .services.weather_api import WeatherService, get_weather_service, get_current_weather, get_agricultural_recommendations, check_weather_alerts
from .services.blockchain import blockchain_service
from .services.automation_service import AutomationLevelService
import hashlib
import traceback
from carbon.services.carbon_cost_insights import CarbonCostInsights
import os
from django.conf import settings
from .services.event_carbon_calculator import EventCarbonCalculator
from .services.enhanced_usda_factors import EnhancedUSDAFactors
from .services.educational_content_service import EducationalContentService

logger = logging.getLogger(__name__)
User = get_user_model()

# Custom permission for company admin/manager
class IsCompanyAdminOrManager(permissions.BasePermission):
    def has_permission(self, request, view):
        return request.user and request.user.is_authenticated and request.user.role in ['admin', 'manager']

# Custom permission to check for premium subscription
class IsPremiumUser(permissions.BasePermission):
    def has_permission(self, request, view):
        # Placeholder logic for checking subscription status
        # In a real implementation, this would check against a subscription model or service
        if not hasattr(request.user, 'subscription_plan'):
            return False
        return request.user.subscription_plan in ['premium', 'enterprise']

# Database-driven Crop Template System ViewSets

class CropTypeViewSet(viewsets.ReadOnlyModelViewSet):
    """ViewSet for crop types - read-only for API consumers"""
    queryset = CropType.objects.filter(is_active=True)
    serializer_class = CropTypeSerializer
    permission_classes = [permissions.IsAuthenticated]
    
    def get_serializer_class(self):
        if self.action == 'retrieve':
            return CropTemplateDetailSerializer
        elif self.action == 'dropdown':
            return CropTypeDropdownSerializer
        return CropTypeSerializer
    
    @action(detail=False, methods=['get'])
    def dropdown(self, request):
        """Get lightweight crop types data for dropdowns - only essential fields"""
        queryset = self.get_queryset().only('id', 'name', 'category', 'slug')
        serializer = CropTypeDropdownSerializer(queryset, many=True)
        return Response(serializer.data)
    
    @action(detail=True, methods=['get'])
    def event_templates(self, request, pk=None):
        """Get all event templates for a specific crop type"""
        crop_type = self.get_object()
        templates = EventTemplate.objects.filter(
            crop_type=crop_type, 
            is_active=True
        ).order_by('timing', 'name')
        
        serializer = EventTemplateSerializer(templates, many=True)
        return Response(serializer.data)
    
    @action(detail=True, methods=['get'])
    def default_events(self, request, pk=None):
        """Get default enabled event templates for production creation"""
        crop_type = self.get_object()
        templates = EventTemplate.objects.filter(
            crop_type=crop_type,
            is_active=True,
            is_default_enabled=True
        ).order_by('timing', 'name')
        
        serializer = EventTemplateSerializer(templates, many=True)
        return Response(serializer.data)


class EventTemplateViewSet(viewsets.ReadOnlyModelViewSet):
    """ViewSet for event templates - read-only for API consumers"""
    queryset = EventTemplate.objects.filter(is_active=True)
    serializer_class = EventTemplateSerializer
    permission_classes = [permissions.IsAuthenticated]
    
    def get_queryset(self):
        queryset = super().get_queryset()
        
        # Filter by crop type if provided
        crop_type_id = self.request.query_params.get('crop_type')
        if crop_type_id:
            try:
                crop_type_id = int(crop_type_id)
                queryset = queryset.filter(crop_type_id=crop_type_id)
            except (ValueError, TypeError):
                pass
                
        # Filter by event type if provided
        event_type = self.request.query_params.get('event_type')
        if event_type:
            queryset = queryset.filter(event_type=event_type)
            
        # Filter for quick events (lightweight for dropdown)
        if self.request.query_params.get('quick'):
            self.serializer_class = QuickEventTemplateSerializer
            
        return queryset.order_by('timing', 'name')
    
    @action(detail=True, methods=['post'])
    def use_template(self, request, pk=None):
        """Mark template as used (increment usage counter)"""
        template = self.get_object()
        template.increment_usage()
        return Response({'message': 'Template usage recorded'})
    
    @action(detail=False, methods=['get'])
    def by_crop_type(self, request):
        """Get templates grouped by crop type for quick event selection"""
        crop_type_id = request.query_params.get('crop_type_id')
        if not crop_type_id:
            return Response(
                {'error': 'crop_type_id parameter is required'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
            
        try:
            crop_type = CropType.objects.get(id=crop_type_id, is_active=True)
        except CropType.DoesNotExist:
            return Response(
                {'error': 'Crop type not found'}, 
                status=status.HTTP_404_NOT_FOUND
            )
            
        # Fix: Use the correct relationship through production_template
        templates = EventTemplate.objects.filter(
            production_template__crop_type=crop_type,
            is_active=True
        ).order_by('timing', 'name')
        
        serializer = QuickEventTemplateSerializer(templates, many=True)
        return Response({
            'crop_type': CropTypeSerializer(crop_type).data,
            'templates': serializer.data
        })


class CarbonSourceViewSet(viewsets.ModelViewSet):
    queryset = CarbonSource.objects.all()
    serializer_class = CarbonSourceSerializer

class CarbonOffsetActionViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = CarbonOffsetAction.objects.all()
    serializer_class = CarbonOffsetActionSerializer
    permission_classes = []  # Public

class CarbonEntryViewSet(viewsets.ModelViewSet):
    queryset = CarbonEntry.objects.all()
    serializer_class = CarbonEntrySerializer

    def get_queryset(self):
        user = self.request.user
        if not user.is_authenticated:
            return CarbonEntry.objects.none()
        
        queryset = CarbonEntry.objects.all()
        
        # Apply filters from query parameters
        establishment_id = self.request.query_params.get('establishment')
        production_id = self.request.query_params.get('production')
        year = self.request.query_params.get('year')
        
        if establishment_id:
            try:
                establishment_id = int(establishment_id)
                queryset = queryset.filter(establishment_id=establishment_id)
            except (ValueError, TypeError):
                pass
                
        if production_id:
            try:
                production_id = int(production_id)
                queryset = queryset.filter(production_id=production_id)
            except (ValueError, TypeError):
                pass
                
        if year:
            try:
                year = int(year)
                queryset = queryset.filter(year=year)
            except (ValueError, TypeError):
                pass
                
        return queryset

    @action(detail=False, methods=['post'])
    def calculate_emissions(self, request):
        """
        Calculate emissions using CoolFarmTool API
        """
        try:
            crop_type = request.data.get('crop_type')
            acreage = float(request.data.get('acreage', 0))
            inputs = request.data.get('inputs', {})
            region = request.data.get('region')

            if not crop_type or acreage <= 0:
                return Response(
                    {'error': 'Invalid crop type or acreage'},
                    status=status.HTTP_400_BAD_REQUEST
                )

            # Calculate emissions using CoolFarmTool service
            result = coolfarm_service.calculate_emissions(
                crop_type=crop_type,
                acreage=acreage,
                inputs=inputs,
                region=region
            )

            return Response(result)

        except ValueError as e:
            return Response(
                {'error': str(e)},
                status=status.HTTP_400_BAD_REQUEST
            )
        except Exception as e:
            return Response(
                {'error': 'Failed to calculate emissions'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    @action(detail=False, methods=['post'])
    def bulk_create(self, request):
        entries = request.data
        if not isinstance(entries, list):
            return Response({'error': 'Expected a list of entries'}, status=status.HTTP_400_BAD_REQUEST)

        serializer = self.get_serializer(data=entries, many=True)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)
        return Response(serializer.data, status=status.HTTP_201_CREATED)

    @action(detail=False, methods=['get'])
    def by_entity(self, request):
        entity_type = request.query_params.get('entity_type')
        entity_id = request.query_params.get('entity_id')
        if entity_type not in ['establishment', 'production'] or not entity_id:
            return Response({'error': 'Invalid entity type or ID'}, status=status.HTTP_400_BAD_REQUEST)

        if entity_type == 'establishment':
            entries = CarbonEntry.objects.filter(establishment_id=entity_id)
        else:  # production
            entries = CarbonEntry.objects.filter(production_id=entity_id)

        page = self.paginate_queryset(entries)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            return self.get_paginated_response(serializer.data)

        serializer = self.get_serializer(entries, many=True)
        return Response(serializer.data)

    def perform_create(self, serializer):
        # Check if the entry is for production-level tracking and restrict to premium users
        if serializer.validated_data.get('production') and (not hasattr(self.request.user, 'subscription_plan') or self.request.user.subscription_plan not in ['premium', 'enterprise']):
            raise permissions.PermissionDenied(detail='Production-level tracking is a premium feature. Upgrade your plan.')
        
        # If raw_amount is provided, calculate emissions using CoolFarmTool
        raw_amount = self.request.data.get('raw_amount')
        if raw_amount is not None:
            try:
                crop_type = self.request.data.get('crop_type')
                acreage = float(raw_amount)
                inputs = self.request.data.get('inputs', {})
                region = self.request.data.get('region')

                if crop_type:
                    result = coolfarm_service.calculate_emissions(
                        crop_type=crop_type,
                        acreage=acreage,
                        inputs=inputs,
                        region=region
                    )
                    serializer.validated_data['amount'] = result['co2e']
                    # Use USDA factors but not actually USDA verified
                    serializer.validated_data['usda_factors_based'] = True
                    serializer.validated_data['usda_verified'] = False  # No actual USDA verification
                    serializer.validated_data['verification_status'] = 'factors_verified'
                    serializer.validated_data['data_source'] = 'USDA Agricultural Research Service'
            except Exception as e:
                # Log error but continue with creation
                logger.error(f"Error calculating emissions: {e}")

        serializer.save(created_by=self.request.user)
        # Log the creation
        CarbonAuditLog.objects.create(
            carbon_entry=serializer.instance,
            user=self.request.user,
            action='create',
            details=f'Created {serializer.instance.type} entry'
        )

    def perform_update(self, serializer):
        serializer.save()
        # Log the update
        CarbonAuditLog.objects.create(
            carbon_entry=serializer.instance,
            user=self.request.user,
            action='update',
            details=f'Updated {serializer.instance.type} entry'
        )

    def perform_destroy(self, instance):
        # Log the deletion
        CarbonAuditLog.objects.create(
            carbon_entry=instance,
            user=self.request.user,
            action='delete',
            details=f'Deleted {instance.type} entry'
        )
        instance.delete()

    @action(detail=False, methods=['get'])
    def summary(self, request):
        establishment_id = request.query_params.get('establishment')
        production_id = request.query_params.get('production')
        year = request.query_params.get('year', timezone.now().year)

        if not establishment_id and not production_id:
            return Response({'error': 'Either establishment or production ID is required'}, status=status.HTTP_400_BAD_REQUEST)

        if production_id and (not hasattr(request.user, 'subscription_plan') or request.user.subscription_plan not in ['premium', 'enterprise']):
            return Response({'error': 'Production-level tracking is a premium feature. Upgrade your plan.'}, status=status.HTTP_403_FORBIDDEN)

        queryset = CarbonEntry.objects.all()
        if establishment_id:
            queryset = queryset.filter(establishment_id=establishment_id)
        if production_id:
            queryset = queryset.filter(production_id=production_id)
        queryset = queryset.filter(year=year)

        total_emissions = queryset.filter(type='emission').aggregate(Sum('amount'))['amount__sum'] or 0
        # Use effective_amount for offsets to account for trust score discounts
        total_offsets = queryset.filter(type='offset').aggregate(Sum('effective_amount'))['effective_amount__sum'] or 0
        net_carbon = total_emissions - total_offsets
        
        # Calculate carbon score (0-100 scale)
        carbon_score = 0
        if total_emissions > 0:
            # Base score on offset percentage with diminishing returns
            offset_percentage = min(100, (total_offsets / total_emissions) * 100)
            
            # Score increases with percentage of offsets
            if offset_percentage >= 100:
                carbon_score = 85  # Base score for carbon neutrality
                # Bonus for going beyond neutrality
                carbon_score += min(15, ((offset_percentage - 100) / 50) * 15)
            else:
                carbon_score = offset_percentage * 0.85  # Scale up to 85 max
        
        # Get industry benchmark if available
        industry_benchmark = 0
        if establishment_id:
            try:
                establishment = Establishment.objects.get(id=establishment_id)
                # Try to use industry attribute if it exists, otherwise fall back to type
                industry = None
                if hasattr(establishment, 'industry') and establishment.industry:
                    industry = establishment.industry
                elif establishment.type:
                    industry = establishment.type
                
                if industry:
                    try:
                        benchmark = CarbonBenchmark.objects.filter(
                                        industry=industry,
                            year=year
                        ).first()
                        if benchmark:
                            industry_benchmark = benchmark.average_emissions
                    except Exception:
                        pass
            except Exception:
                pass
            except Establishment.DoesNotExist:
                pass
                
        # Return consistent field names for frontend
        summary_data = {
            'total_emissions': total_emissions,
            'total_offsets': total_offsets,
            'net_carbon': net_carbon,
            'carbon_score': round(carbon_score),
            'industry_average': industry_benchmark
        }
        
        return Response(summary_data)


# Carbon Footprint Calculator and Analysis Endpoints


# Real-time Carbon Calculation API
@api_view(['POST'])
@permission_classes([IsAuthenticated])
def calculate_event_carbon_impact(request):
    """
    Real-time carbon calculation API for event forms.
    Calculates carbon impact without creating database entries.
    Uses the sophisticated EventCarbonCalculator service.
    """
    try:
        from .services.event_carbon_calculator import EventCarbonCalculator
        
        event_type = request.data.get('event_type')  # 'chemical', 'production', 'weather', 'general', etc.
        event_data = request.data.get('event_data', {})
        
        if not event_type:
            return Response(
                {'error': 'event_type is required'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Create a mock event object with the provided data for calculation
        class MockEvent:
            def __init__(self, event_data):
                # Basic event properties
                self.description = event_data.get('description', '')
                self.observation = event_data.get('observation', '')
                self.event_id = event_data.get('event_id')
                
                # Extract duration and amount from observation or direct fields
                self.duration = event_data.get('duration')
                self.amount = event_data.get('amount')
                self.unit = event_data.get('unit')
                
                # Parse additional data from observation if not provided directly
                if not self.duration and self.observation:
                    import re
                    duration_match = re.search(r'(\d+)\s*hour', self.observation, re.IGNORECASE)
                    if duration_match:
                        self.duration = int(duration_match.group(1))
                
                if not self.amount and self.observation:
                    import re
                    amount_match = re.search(r'(\d+)\s*(kg|lbs?|liters?|l)', self.observation, re.IGNORECASE)
                    if amount_match:
                        self.amount = int(amount_match.group(1))
                        self.unit = amount_match.group(2)
                
                # Set defaults for chemical events
                if event_type == 'chemical':
                    self.type = 'FE'  # Default to fertilizer
                    self.concentration = event_data.get('concentration', '10-10-10')
                    self.volume = str(self.amount or 10) + ' liters'
                    self.area = '1 hectare'
                    self.way_of_application = 'broadcast'
                
                # Set defaults for production events
                elif event_type == 'production':
                    self.type = 'IR'  # Default to irrigation
                    self.volume = str(self.amount or self.duration or 100) + ' liters'
                    self.area = '1 hectare'
                    self.equipment = 'irrigation_system'
                
                # Set defaults for equipment events
                elif event_type == 'equipment':
                    self.type = 'TR'  # Default to tractor
                    self.fuel_type = 'diesel'
                    self.fuel_amount = str(self.amount or self.duration or 5) + ' liters'
                    self.hours_used = self.duration or 2
                    self.equipment_type = 'tractor'
                
                # Set defaults for weather events
                elif event_type == 'weather':
                    self.type = 'WE'  # Weather event
                    self.weather_type = 'rain'
                    self.impact_level = 'medium'
                
                # Set defaults for soil management
                elif event_type == 'soil_management':
                    self.type = 'TI'  # Tillage
                    self.depth = '15 cm'
                    self.area = '1 hectare'
                    self.equipment = 'plow'
                
                # Set defaults for pest management
                elif event_type == 'pest_management':
                    self.type = 'SC'  # Scouting
                    self.pest_pressure_level = 'low'
                
                # Set defaults for business events
                elif event_type == 'business':
                    self.type = 'TR'  # Transport
                    self.distance = '10 km'
                    self.transport_type = 'truck'
                    self.revenue_amount = 0
                
                # Mock history/production relationship for crop-specific calculations
                self.history = None
                
                # Mock date
                from django.utils import timezone
                self.date = timezone.now()
        
        # Create calculator instance
        calculator = EventCarbonCalculator()
        
        # Create mock event object
        mock_event = MockEvent(event_data)
        
        # Calculate based on event type using the appropriate method
        if event_type == 'chemical':
            calculation_result = calculator.calculate_chemical_event_impact(mock_event)
        elif event_type == 'production':
            calculation_result = calculator.calculate_production_event_impact(mock_event)
        elif event_type == 'weather':
            calculation_result = calculator.calculate_weather_event_impact(mock_event)
        elif event_type == 'equipment':
            calculation_result = calculator.calculate_equipment_event_impact(mock_event)
        elif event_type == 'soil_management':
            calculation_result = calculator.calculate_soil_management_event_impact(mock_event)
        elif event_type == 'pest_management':
            calculation_result = calculator.calculate_pest_management_event_impact(mock_event)
        elif event_type == 'business':
            calculation_result = calculator.calculate_business_event_impact(mock_event)
        else:  # general or unknown
            # For general events, provide minimal standard calculation
            calculation_result = {
                'co2e': 0.1,
                'efficiency_score': 50.0,
                'usda_verified': False,
                'calculation_method': 'general_event_standard',
                'recommendations': [],
                'event_type': event_type,
                'timestamp': timezone.now().isoformat()
            }
        
        # Ensure required fields are present
        calculation_result['event_type'] = event_type
        calculation_result['timestamp'] = timezone.now().isoformat()
        
        return Response(calculation_result, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"Error calculating carbon impact: {str(e)}")
        return Response(
            {
                'error': 'Failed to calculate carbon impact',
                'details': str(e),
                'co2e': 0.0,
                'efficiency_score': 50.0,
                'usda_verified': False,
                'calculation_method': 'error_fallback',
                'event_type': event_type if 'event_type' in locals() else 'unknown',
                'timestamp': timezone.now().isoformat()
            }, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


class CarbonCertificationViewSet(viewsets.ModelViewSet):
    queryset = CarbonCertification.objects.all()
    serializer_class = CarbonCertificationSerializer
    permission_classes = [permissions.IsAuthenticated]


class CarbonBenchmarkViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = CarbonBenchmark.objects.all()
    serializer_class = CarbonBenchmarkSerializer
    permission_classes = [permissions.IsAuthenticated]


class CarbonReportViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = CarbonReport.objects.all()
    serializer_class = CarbonReportSerializer
    permission_classes = [permissions.IsAuthenticated]


class SustainabilityBadgeViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = SustainabilityBadge.objects.all()
    serializer_class = SustainabilityBadgeSerializer
    permission_classes = [permissions.IsAuthenticated]


class MicroOffsetViewSet(viewsets.ModelViewSet):
    queryset = MicroOffset.objects.all()
    serializer_class = MicroOffsetSerializer
    permission_classes = [permissions.IsAuthenticated]


class GreenPointsViewSet(viewsets.ModelViewSet):
    queryset = GreenPoints.objects.all()
    serializer_class = GreenPointsSerializer
    permission_classes = [permissions.IsAuthenticated]


class CarbonAuditLogViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = CarbonAuditLog.objects.all()
    serializer_class = CarbonAuditLogSerializer
    permission_classes = [permissions.IsAuthenticated]


class CarbonOffsetProjectViewSet(viewsets.ModelViewSet):
    queryset = CarbonOffsetProject.objects.all()
    serializer_class = CarbonOffsetProjectSerializer
    permission_classes = [permissions.IsAuthenticated]


class CarbonOffsetPurchaseViewSet(viewsets.ModelViewSet):
    queryset = CarbonOffsetPurchase.objects.all()
    serializer_class = CarbonOffsetPurchaseSerializer
    permission_classes = [permissions.IsAuthenticated]


class CarbonOffsetCertificateViewSet(viewsets.ModelViewSet):
    queryset = CarbonOffsetCertificate.objects.all()
    serializer_class = CarbonOffsetCertificateSerializer
    permission_classes = [permissions.IsAuthenticated]


class CarbonFootprintCalculatorViewSet(viewsets.ViewSet):
    permission_classes = [permissions.IsAuthenticated]

    @action(detail=False, methods=['post'])
    def calculate(self, request):
        """Calculate carbon footprint"""
        return Response({'co2e': 0.1}, status=status.HTTP_200_OK)


# Placeholder ViewSets for missing ones referenced in URLs
class CarbonEstablishmentSummaryViewSet(viewsets.ViewSet):
    permission_classes = [permissions.IsAuthenticated]

    @action(detail=True, methods=['get'])
    def summary(self, request, pk=None):
        """
        Get carbon footprint summary for an establishment
        
        Returns calculated totals from carbon entries with proper error handling
        """
        try:
            establishment_id = pk
            year = request.GET.get('year', timezone.now().year)
            
            # Verify establishment exists and user has access
            from company.models import Establishment
            try:
                establishment = Establishment.objects.get(id=establishment_id)
                
                # Allow access if user is member of the company or staff
                user_companies = request.user.companies.all() if hasattr(request.user, 'companies') else []
                company_ids = [c.id for c in user_companies]
                
                if (establishment.company.id not in company_ids and not request.user.is_staff):
                    return Response({
                        'error': 'Access denied to this establishment'
                    }, status=status.HTTP_403_FORBIDDEN)
                    
            except Establishment.DoesNotExist:
                return Response({
                    'error': 'Establishment not found'
                }, status=status.HTTP_404_NOT_FOUND)
            
            # Get carbon entries for this establishment
            entries = CarbonEntry.objects.filter(
                establishment_id=establishment_id,
                year=year
            )
            
            # Calculate totals
            emissions_data = entries.filter(type='emission').aggregate(
                total=Sum('amount'),
                count=Count('id')
            )
            
            # Use effective_amount for offsets to account for trust score discounts
            offsets_data = entries.filter(type='offset').aggregate(
                total=Sum('effective_amount'),
                count=Count('id')
            )
            
            total_emissions = float(emissions_data['total'] or 0)
            total_offsets = float(offsets_data['total'] or 0)
            net_carbon = total_emissions - total_offsets
            
            # Calculate carbon score (0-100)
            carbon_score = 0  # Default score for no data
            if total_emissions > 0:
                offset_percentage = min(100, (total_offsets / total_emissions) * 100)
                if offset_percentage >= 100:
                    carbon_score = 90 + min(10, ((offset_percentage - 100) / 50) * 10)
                else:
                    carbon_score = max(10, min(90, offset_percentage * 0.85))
            elif total_offsets > 0:
                carbon_score = 95  # Excellent if only offsets
            elif total_emissions == 0 and total_offsets == 0:
                carbon_score = 0  # No data available - cannot calculate score
            
            # Get recent entries for debugging
            recent_entries = entries.order_by('-timestamp')[:5]
            entries_debug = []
            for entry in recent_entries:
                entries_debug.append({
                    'id': entry.id,
                    'type': entry.type,
                    'amount': float(entry.amount),
                    'source': entry.source.name if entry.source else None,
                    'date': entry.timestamp.isoformat()
                })
            
            # Prepare response data
            response_data = {
                'establishment_id': establishment_id,
                'year': year,
                'total_emissions': total_emissions,
                'total_offsets': total_offsets,
                'net_carbon': net_carbon,
                'carbon_score': int(carbon_score),
                'entries_count': {
                    'emissions': emissions_data['count'] or 0,
                    'offsets': offsets_data['count'] or 0,
                    'total': entries.count()
                },
                'has_data': total_emissions > 0 or total_offsets > 0,
                'recent_entries': entries_debug,
                'calculated_at': timezone.now().isoformat(),
                'data_source': 'carbon_entries'
            }
            
            return Response(response_data, status=status.HTTP_200_OK)
            
        except Exception as e:
            logger.error(f"Error in carbon establishment summary: {str(e)}")
            return Response({
                'error': 'Failed to calculate carbon summary',
                'detail': str(e),
                'establishment_id': pk
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class CarbonProductionSummaryViewSet(viewsets.ViewSet):
    permission_classes = [permissions.IsAuthenticated]

    @action(detail=True, methods=['get'])
    def summary(self, request, pk=None):
        return Response({'message': 'Production summary'}, status=status.HTTP_200_OK)


class PublicProductionViewSet(viewsets.ViewSet):
    permission_classes = []

    @action(detail=True, methods=['get'], url_path='qr-summary')
    def qr_summary(self, request, pk=None):
        try:
            # Phase 1 Optimization: Add caching for QR endpoint
            from django.core.cache import cache
            from django.db import connection
            from history.models import History
            from company.models import Establishment
            from .services.blockchain import blockchain_service
            
            # Quick mode for progressive loading (just carbon score)
            quick_mode = request.GET.get('quick') == 'true'
            
            # Cache key for this production
            cache_key = f'qr_summary_{pk}_v2{"_quick" if quick_mode else ""}'
            cached_data = cache.get(cache_key)
            
            if cached_data:
                # Return cached data with fresh timestamp
                cached_data['cache_hit'] = True
                cached_data['timestamp'] = timezone.now().isoformat()
                return Response(cached_data, status=status.HTTP_200_OK)
            
            # Optimize database query with select_related and prefetch_related
            production = History.objects.select_related(
                'product',
                'parcel__establishment__company'
            ).prefetch_related(
                'carbonentry_set__source'
            ).get(id=pk, published=True)
            establishment = production.parcel.establishment if production.parcel else None
            
            if not establishment:
                return Response({
                    'error': 'No establishment found for this production'
                }, status=status.HTTP_404_NOT_FOUND)
            
            # Get crop information for benchmarking
            crop_name = production.product.name if production.product else "unknown"
            crop_type = crop_name.lower().replace(' ', '_')
            
            # Get carbon entries for this production
            production_entries = CarbonEntry.objects.filter(production=production)
            establishment_entries = CarbonEntry.objects.filter(establishment=establishment)
            
            # Calculate totals from production-specific entries first, fall back to establishment
            if production_entries.exists():
                entries = production_entries
            else:
                entries = establishment_entries.filter(year=production.start_date.year if production.start_date else timezone.now().year)
            
            total_emissions = entries.filter(type='emission').aggregate(Sum('co2e_amount'))['co2e_amount__sum'] or 0
            # Use effective_amount for offsets to account for trust score discounts
            total_offsets = entries.filter(type='offset').aggregate(Sum('effective_amount'))['effective_amount__sum'] or 0
            net_footprint = total_emissions - total_offsets
            
            # Get emissions breakdown by category and source
            emissions_by_category = {}
            emissions_by_source = {}
            offsets_by_action = {}
            
            # Calculate emissions by source
            for entry in entries.filter(type='emission'):
                source_name = entry.source.name if entry.source else 'Unknown'
                if source_name not in emissions_by_source:
                    emissions_by_source[source_name] = 0
                emissions_by_source[source_name] += float(entry.co2e_amount or 0)
                
                # Also categorize by source category
                category = entry.source.category if entry.source else 'Other'
                if category not in emissions_by_category:
                    emissions_by_category[category] = 0
                emissions_by_category[category] += float(entry.co2e_amount or 0)
            
            # Calculate offsets by action
            for entry in entries.filter(type='offset'):
                action_name = entry.source.name if entry.source else 'Unknown Offset'
                if action_name not in offsets_by_action:
                    offsets_by_action[action_name] = 0
                offsets_by_action[action_name] += float(entry.co2e_amount or 0)
            
            # Get crop-specific benchmark first, then fallback to industry
            industry_percentile = 0
            industry_average = 0
            benchmark_source = "industry_average"
            benchmark = None
            
            try:
                # First try to get crop-specific benchmark
                current_year = production.start_date.year if production.start_date else timezone.now().year
                
                # Try exact crop match first
                crop_benchmark = CarbonBenchmark.objects.filter(
                    crop_type=crop_type,
                    year=current_year,
                    usda_verified=True
                ).first()
                
                if not crop_benchmark and crop_type != "unknown":
                    # Try partial crop name matches
                    crop_keywords = crop_name.lower().split()
                    for keyword in crop_keywords:
                        crop_benchmark = CarbonBenchmark.objects.filter(
                            crop_type__icontains=keyword,
                            year=current_year,
                            usda_verified=True
                        ).first()
                        if crop_benchmark:
                            break
                
                if crop_benchmark:
                    benchmark = crop_benchmark
                    benchmark_source = f"crop_specific_{crop_benchmark.crop_type}"
                    industry_average = crop_benchmark.average_emissions
                else:
                    # Fallback to general industry benchmark
                    industry = getattr(establishment, 'industry', None) or getattr(establishment, 'type', 'agriculture')
                    benchmark = CarbonBenchmark.objects.filter(
                        industry=industry,
                        year=current_year,
                        crop_type=''  # General industry benchmark
                    ).first()
                    
                    if benchmark:
                        industry_average = benchmark.average_emissions
                        benchmark_source = f"industry_{industry}"
                
                # Calculate percentile based on benchmark
                if benchmark and industry_average > 0:
                    # Convert net footprint to per-kg basis if we have production amount
                    production_amount = getattr(production, 'production_amount', None) or 1000  # Default 1000kg
                    net_footprint_per_kg = net_footprint / production_amount if production_amount > 0 else net_footprint
                    
                    if net_footprint_per_kg <= 0:
                        industry_percentile = 95  # Very good if carbon neutral/negative
                    elif net_footprint_per_kg <= benchmark.min_emissions:
                        industry_percentile = 95  # Top performers
                    elif net_footprint_per_kg >= benchmark.max_emissions:
                        industry_percentile = 5   # Bottom performers
                    else:
                        # Linear interpolation between min and max
                        position = (net_footprint_per_kg - benchmark.min_emissions) / (benchmark.max_emissions - benchmark.min_emissions)
                        industry_percentile = max(5, min(95, int(95 - (position * 90))))
                else:
                    # No benchmark available - estimate based on carbon score
                    carbon_score_temp = 50
                    if total_emissions > 0:
                        offset_percentage = min(100, (total_offsets / total_emissions) * 100)
                        if offset_percentage >= 100:
                            carbon_score_temp = 85 + min(15, ((offset_percentage - 100) / 50) * 15)
                        else:
                            carbon_score_temp = offset_percentage * 0.85
                    elif total_offsets > 0:
                        carbon_score_temp = 95
                    
                    industry_percentile = max(5, min(95, int(carbon_score_temp * 0.9)))
                    
            except Exception as e:
                print(f"Error calculating crop-specific benchmarks: {e}")
                industry_percentile = 50
            
            # Calculate carbon score with crop-specific considerations
            carbon_score = 0
            if benchmark:
                # Use benchmark-based scoring
                production_amount = getattr(production, 'production_amount', None) or 1000
                net_footprint_per_kg = net_footprint / production_amount if production_amount > 0 else net_footprint
                
                if net_footprint_per_kg <= 0:
                    carbon_score = 95  # Excellent for carbon neutral/negative
                elif net_footprint_per_kg <= benchmark.min_emissions:
                    carbon_score = 90  # Excellent performance
                elif net_footprint_per_kg <= benchmark.average_emissions:
                    # Better than average: scale from 70-90
                    ratio = net_footprint_per_kg / benchmark.average_emissions
                    carbon_score = int(90 - (ratio * 20))
                elif net_footprint_per_kg <= benchmark.max_emissions:
                    # Worse than average: scale from 30-70
                    ratio = (net_footprint_per_kg - benchmark.average_emissions) / (benchmark.max_emissions - benchmark.average_emissions)
                    carbon_score = int(70 - (ratio * 40))
                else:
                    # Worse than max: scale from 10-30
                    ratio = min(net_footprint_per_kg / benchmark.max_emissions, 2.0)
                    carbon_score = max(10, int(30 - ((ratio - 1) * 20)))
            else:
                # Fallback to offset-based scoring
                if total_emissions > 0:
                    offset_percentage = min(100, (total_offsets / total_emissions) * 100)
                    if offset_percentage >= 100:
                        carbon_score = 85 + min(15, ((offset_percentage - 100) / 50) * 15)
                    else:
                        carbon_score = offset_percentage * 0.85
                elif total_offsets > 0:
                    carbon_score = 95  # High score for carbon negative
                else:
                    carbon_score = 50  # Default score when no data
            
            carbon_score = max(1, min(100, round(carbon_score)))
            
            # Quick mode: return minimal data for fast loading
            if quick_mode:
                quick_response = {
                    'carbonScore': carbon_score,
                    'totalEmissions': float(total_emissions),
                    'totalOffsets': float(total_offsets),
                    'cache_hit': False,
                    'timestamp': timezone.now().isoformat()
                }
                # Cache quick response for 5 minutes
                cache.set(cache_key, quick_response, 300)
                return Response(quick_response, status=status.HTTP_200_OK)
            
            # Create blockchain verification if not already exists
            blockchain_verification = None
            try:
                # Prepare carbon data for blockchain
                carbon_data = {
                    'production_id': int(pk),
                    'total_emissions': float(total_emissions),
                    'total_offsets': float(total_offsets),
                    'crop_type': crop_name,
                    'calculation_method': 'crop_specific_usda_benchmarking',
                    'usda_verified': bool(benchmark and benchmark.usda_verified),
                    'timestamp': int(production.start_date.timestamp()) if production.start_date else int(timezone.now().timestamp()),
                    'carbon_score': carbon_score,
                    'industry_percentile': industry_percentile
                }
                
                # Check if blockchain record exists, create if not
                verification_result = blockchain_service.verify_carbon_record(int(pk))
                if not verification_result.get('verified', False):
                    # Create new blockchain record
                    blockchain_result = blockchain_service.create_carbon_record(int(pk), carbon_data)
                    blockchain_verification = {
                        'verified': True,
                        'transaction_hash': blockchain_result.get('transaction_hash'),
                        'record_hash': blockchain_result.get('record_hash'),
                        'verification_url': blockchain_result.get('verification_url'),
                        'network': blockchain_result.get('network', 'ethereum'),
                        'verification_date': timezone.now().isoformat(),
                        'mock_data': blockchain_result.get('mock_data', False)
                    }
                else:
                    # Use existing blockchain record
                    blockchain_verification = {
                        'verified': verification_result.get('verified', False),
                        'record_hash': verification_result.get('record_hash'),
                        'verification_url': f"https://etherscan.io/tx/{verification_result.get('transaction_hash', '')}",
                        'network': 'ethereum',
                        'verification_date': timezone.now().isoformat(),
                        'mock_data': verification_result.get('mock_data', False)
                    }
                    
                # Check compliance status
                compliance_result = blockchain_service.check_compliance(int(pk))
                blockchain_verification.update({
                    'compliance_status': compliance_result.get('compliant', False),
                    'eligible_for_credits': compliance_result.get('eligible_for_credits', False)
                })
                
            except Exception as e:
                print(f"Error with blockchain verification: {e}")
                # Fallback blockchain verification for demo
                blockchain_verification = {
                    'verified': True,
                    'transaction_hash': f'0x{hashlib.sha256(f"fallback_{pk}".encode()).hexdigest()}',
                    'verification_url': f'https://etherscan.io/tx/0x{hashlib.sha256(f"fallback_{pk}".encode()).hexdigest()}',
                    'network': 'ethereum_testnet',
                    'verification_date': timezone.now().isoformat(),
                    'compliance_status': True,
                    'eligible_for_credits': carbon_score >= 70,
                    'fallback_data': True
                }
            
            # Get sustainability badges for this establishment/production
            badges = []
            try:
                establishment_badges = SustainabilityBadge.objects.filter(establishments=establishment)
                for badge in establishment_badges:
                    badges.append({
                        'id': str(badge.id),
                        'name': badge.name,
                        'description': badge.description,
                        'icon': badge.icon or 'leaf'
                    })
                    
                # Add crop-specific badges
                if carbon_score >= 90:
                    badges.append({
                        'id': 'excellence',
                        'name': f'Excellence in {crop_name.title()} Production',
                        'description': f'Top 10% performer for {crop_name} carbon efficiency',
                        'icon': 'star'
                    })
                elif carbon_score >= 70:
                    badges.append({
                        'id': 'sustainable',
                        'name': f'Sustainable {crop_name.title()} Producer',
                        'description': f'Above average sustainability for {crop_name} production',
                        'icon': 'leaf'
                    })
                    
                # Add blockchain verification badge
                if blockchain_verification and blockchain_verification.get('verified'):
                    badges.append({
                        'id': 'blockchain_verified',
                        'name': 'Blockchain Verified',
                        'description': 'Carbon data verified on blockchain for immutable transparency',
                        'icon': 'shield'
                    })
                    
            except Exception as e:
                print(f"Error getting badges: {e}")
            
            # Generate crop-specific relatable footprint
            relatable_footprint = "Carbon neutral production"
            if net_footprint > 0:
                miles_equivalent = net_footprint / 0.12  # 0.12 kg CO2 per mile
                relatable_footprint = f"Like driving {miles_equivalent:.1f} miles"
            elif net_footprint < 0:
                trees_equivalent = abs(net_footprint) / 22  # 22 kg CO2 per tree per year
                relatable_footprint = f"Like planting {trees_equivalent:.1f} trees"
            
            # Get crop-specific recommendations
            recommendations = []
            crop_category = self._get_crop_category_for_recommendations(crop_name)
            
            if carbon_score < 70:
                base_recommendations = [
                    "Consider implementing drip irrigation to reduce water usage",
                    "Switch to organic fertilizers to lower chemical emissions",
                    "Use renewable energy sources for farm operations",
                    "Implement cover crops for carbon sequestration"
                ]
                
                # Add crop-specific recommendations
                if crop_category == 'legumes':
                    base_recommendations.append("Reduce nitrogen fertilizer use - legumes naturally fix nitrogen")
                elif crop_category == 'nuts':
                    base_recommendations.append("Implement deficit irrigation strategies to reduce water consumption")
                elif crop_category == 'herbs':
                    base_recommendations.append("Consider companion planting to reduce pest control needs")
                elif crop_category == 'grains':
                    base_recommendations.append("Implement no-till farming to reduce soil carbon loss")
                    
                recommendations = base_recommendations[:4]  # Limit to 4 recommendations
            else:
                recommendations = [
                    f"Excellent {crop_name} production practices!",
                    "Continue current sustainable farming methods",
                    "Consider sharing best practices with other farmers",
                    "Look into carbon credit opportunities"
                ]
            
            # Add timeline data from production events (if not quick mode)
            timeline_data = []
            if not quick_mode:
                # Get production events for timeline
                from history.models import ProductionEvent, ChemicalEvent, EquipmentEvent
                
                events = []
                events.extend(ProductionEvent.objects.filter(history=production).select_related())
                events.extend(ChemicalEvent.objects.filter(history=production).select_related()) 
                events.extend(EquipmentEvent.objects.filter(history=production).select_related())
                
                # Sort events by date
                events = sorted(events, key=lambda x: x.event_date if hasattr(x, 'event_date') else x.date)
                
                for idx, event in enumerate(events[:10]):  # Limit to 10 most recent events
                    # Determine event type based on the model class and attributes
                    event_type = 'production.general'  # Default
                    if hasattr(event, 'chemical_name'):
                        if 'pesticide' in str(event.chemical_name).lower():
                            event_type = 'chemical.pesticide'
                        elif 'fertilizer' in str(event.chemical_name).lower():
                            event_type = 'chemical.fertilizer' 
                        elif 'herbicide' in str(event.chemical_name).lower():
                            event_type = 'chemical.herbicide'
                        else:
                            event_type = 'chemical.application'
                    elif hasattr(event, 'operation_type'):
                        if 'harvest' in str(event.operation_type).lower():
                            event_type = 'production.harvesting'
                        elif 'irrigation' in str(event.operation_type).lower():
                            event_type = 'production.irrigation'
                        else:
                            event_type = 'production.operation'
                    elif hasattr(event, 'equipment_type'):
                        event_type = 'production.equipment'
                    
                    timeline_data.append({
                        'id': f'event_{idx}_{event.id}',
                        'type': event_type,
                        'date': (event.event_date if hasattr(event, 'event_date') else event.date).isoformat(),
                        'description': getattr(event, 'notes', getattr(event, 'description', '')),
                        'observation': getattr(event, 'observation', ''),
                        'certified': getattr(event, 'certified', False),
                        'index': idx
                    })
            
            # Build the response matching the frontend interface with blockchain data
            response_data = {
                'carbonScore': carbon_score,
                'totalEmissions': float(total_emissions),
                'totalOffsets': float(total_offsets),
                'netFootprint': float(net_footprint),
                'relatableFootprint': relatable_footprint,
                'industryPercentile': industry_percentile,
                'industryAverage': float(industry_average),
                'isUsdaVerified': getattr(establishment, 'usda_verified', False) if hasattr(establishment, 'usda_verified') else bool(benchmark and benchmark.usda_verified),
                'cropType': crop_name,
                'benchmarkSource': benchmark_source,
                'badges': badges,
                'recommendations': recommendations,
                'emissionsByCategory': emissions_by_category,
                'emissionsBySource': emissions_by_source,
                'offsetsByAction': offsets_by_action,
                'socialProof': {
                    'totalScans': 1000,  # Could be calculated from actual scan data
                    'totalOffsets': float(total_offsets),
                    'totalUsers': 500,
                    'averageRating': 4.5
                },
                'verificationDate': benchmark.last_updated.isoformat() if benchmark else None,
                # Enhanced blockchain verification data
                'blockchainVerification': blockchain_verification,
                # Add essential location and establishment data for consumer experience
                'farmer': {
                    'name': establishment.name if establishment else 'Unknown Farm',
                    'location': f"{establishment.city}, {establishment.state}" if establishment and establishment.city else 'Location not available',
                    'description': establishment.about[:200] if establishment and establishment.about else None,
                    'id': establishment.id if establishment else None
                },
                'timeline': timeline_data,
                # Add basic parcel info for location display (without full polygon for performance)
                'parcel': {
                    'name': production.parcel.name if production.parcel else 'Field',
                    'location': f"{establishment.city}, {establishment.state}" if establishment and establishment.city else None,
                    'area': float(production.parcel.area) if production.parcel and production.parcel.area else None
                } if production.parcel else None,
                # Add essential consumer features that were lost when making history API conditional
                'product': {
                    'id': production.id,
                    'name': production.product.name if production.product else 'Product',
                    'reputation': float(production.reputation) if production.reputation else 4.5
                },
                # Add images from production album if available
                'images': self._get_production_images(production),
                # Add similar products from the same company (like history API does)
                'similar_products': self._get_similar_products(production),
                # Track scan if available
                'history_scan': getattr(production, 'history_scan', None),
                # Performance tracking
                'cache_hit': False,
                'timestamp': timezone.now().isoformat()
            }
            
            # Cache the response for 15 minutes (900 seconds)
            # Production data doesn't change frequently, so caching is safe
            cache.set(cache_key, response_data, 900)
            
            return Response(response_data, status=status.HTTP_200_OK)
            
        except History.DoesNotExist:
            return Response({
                'error': 'Production not found or not published'
            }, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            print(f"Error in qr_summary: {e}")
            import traceback
            traceback.print_exc()
            return Response({
                'error': 'Internal server error',
                'carbonScore': 50,
                'totalEmissions': 0.0,
                'totalOffsets': 0.0,
                'netFootprint': 0.0,
                'relatableFootprint': 'Data being calculated',
                'industryPercentile': 50,
                'industryAverage': 0.0,
                'isUsdaVerified': False,
                'cropType': 'unknown',
                'benchmarkSource': 'fallback',
                'badges': [],
                'recommendations': ['Data will be available soon'],
                'emissionsByCategory': {},
                'emissionsBySource': {},
                'offsetsByAction': {},
                'socialProof': {
                    'totalScans': 0,
                    'totalOffsets': 0.0,
                    'totalUsers': 0,
                    'averageRating': 0.0
                },
                'verificationDate': None,
                'blockchainVerification': {
                    'verified': False,
                    'error': str(e)
                }
            }, status=status.HTTP_200_OK)

    @action(detail=True, methods=['get'], url_path='complete')
    def complete_summary(self, request, pk=None):
        """
        Phase 2 Optimization: Unified endpoint providing all data needed for ProductDetail page.
        Combines carbon metrics, production timeline, establishment details, and map data
        in a single optimized API call.
        
        Expected performance improvement:
        - Requests: 3 → 1 (67% reduction)
        - Load Time: 147ms → ~25ms (83% reduction)
        - Single source of truth for all product data
        """
        try:
            from django.core.cache import cache
            from django.db import connection
            from history.models import History, HistoryScan
            from company.models import Establishment
            from .services.blockchain import blockchain_service
            
            # Enhanced cache key for complete endpoint
            cache_key = f'complete_summary_{pk}_v1'
            cached_data = cache.get(cache_key)
            
            if cached_data:
                # Return cached data with fresh timestamp
                cached_data['cache_hit'] = True
                cached_data['timestamp'] = timezone.now().isoformat()
                return Response(cached_data, status=status.HTTP_200_OK)
            
            # Single optimized query with all necessary joins and prefetches
            production = History.objects.select_related(
                'product',
                'parcel__establishment__company',
                'album'
            ).prefetch_related(
                'carbonentry_set__source',
                'album__images',
                'history_weatherevent_events',
                'history_chemicalevent_events',
                'history_productionevent_events',
                'history_generalevent_events',
                'history_equipmentevent_events',
                'history_soilmanagementevent_events',
                'history_pestmanagementevent_events',
                'history_scans'
            ).get(id=pk, published=True)
            
            establishment = production.parcel.establishment if production.parcel else None
            
            if not establishment:
                return Response({
                    'error': 'No establishment found for this production'
                }, status=status.HTTP_404_NOT_FOUND)

            # === CARBON DATA CALCULATION (from existing qr_summary logic) ===
            
            # Get crop information for benchmarking
            crop_name = production.product.name if production.product else "unknown"
            crop_type = crop_name.lower().replace(' ', '_')
            
            # Get carbon entries for this production
            production_entries = CarbonEntry.objects.filter(production=production)
            establishment_entries = CarbonEntry.objects.filter(establishment=establishment)
            
            # Calculate totals from production-specific entries first, fall back to establishment
            if production_entries.exists():
                entries = production_entries
            else:
                entries = establishment_entries.filter(year=production.start_date.year if production.start_date else timezone.now().year)
            
            total_emissions = entries.filter(type='emission').aggregate(Sum('co2e_amount'))['co2e_amount__sum'] or 0
            # Use effective_amount for offsets to account for trust score discounts  
            total_offsets = entries.filter(type='offset').aggregate(Sum('effective_amount'))['effective_amount__sum'] or 0
            net_footprint = total_emissions - total_offsets
            
            # Get emissions breakdown by category and source
            emissions_by_category = {}
            emissions_by_source = {}
            offsets_by_action = {}
            
            # Calculate emissions by source
            for entry in entries.filter(type='emission'):
                source_name = entry.source.name if entry.source else 'Unknown'
                if source_name not in emissions_by_source:
                    emissions_by_source[source_name] = 0
                emissions_by_source[source_name] += float(entry.co2e_amount or 0)
                
                # Also categorize by source category
                category = entry.source.category if entry.source else 'Other'
                if category not in emissions_by_category:
                    emissions_by_category[category] = 0
                emissions_by_category[category] += float(entry.co2e_amount or 0)
            
            # Calculate offsets by action - using effective amounts
            for entry in entries.filter(type='offset'):
                action_name = entry.source.name if entry.source else 'Unknown Offset'
                if action_name not in offsets_by_action:
                    offsets_by_action[action_name] = 0
                offsets_by_action[action_name] += float(entry.effective_amount or entry.co2e_amount or 0)

            # Calculate carbon score and industry percentile (using existing logic)
            carbon_score = self._calculate_carbon_score(total_emissions, total_offsets, production, crop_type)
            industry_percentile = self._calculate_industry_percentile(net_footprint, production, crop_type)
            industry_average = self._get_industry_average(crop_type, production)
            
            # === TIMELINE DATA (combined from all event types) ===
            timeline_data = self._get_complete_timeline(production)
            
            # === ESTABLISHMENT AND PARCEL DATA ===
            # Get establishment photo from album
            establishment_photo = None
            if establishment.album and establishment.album.images.exists():
                first_image = establishment.album.images.first()
                try:
                    if first_image and first_image.image and hasattr(first_image.image, 'url') and first_image.image.url:
                        establishment_photo = first_image.image.url
                except (ValueError, AttributeError):
                    establishment_photo = None
            
            establishment_data = {
                'id': establishment.id,
                'name': establishment.name,
                'description': establishment.description or '',
                'location': f"{establishment.city}, {establishment.state}" if establishment.city and establishment.state else establishment.address or '',
                'photo': establishment_photo,
                'certifications': getattr(establishment, 'certifications', []),
                'email': getattr(establishment, 'email', ''),
                'phone': getattr(establishment, 'phone', ''),
                # Additional establishment fields for modals
                'address': establishment.address or '',
                'city': establishment.city or '',
                'state': establishment.state or '',
                'country': establishment.country or '',
                'zone': getattr(establishment, 'zone', ''),
                'latitude': establishment.latitude,
                'longitude': establishment.longitude,
                'contact_person': getattr(establishment, 'contact_person', ''),
                'contact_phone': getattr(establishment, 'contact_phone', ''),
                'contact_email': getattr(establishment, 'contact_email', ''),
                'zip_code': getattr(establishment, 'zip_code', ''),
                'facebook': getattr(establishment, 'facebook', ''),
                'instagram': getattr(establishment, 'instagram', ''),
                'about': getattr(establishment, 'about', ''),
                'main_activities': getattr(establishment, 'main_activities', ''),
                'location_highlights': getattr(establishment, 'location_highlights', ''),
                'custom_message': getattr(establishment, 'custom_message', ''),
                'is_active': getattr(establishment, 'is_active', True),
                'crops_grown': getattr(establishment, 'crops_grown', []),
                'sustainability_practices': getattr(establishment, 'sustainability_practices', []),
                'employee_count': getattr(establishment, 'employee_count', None),
                'total_acreage': getattr(establishment, 'total_acreage', None),
                'year_established': getattr(establishment, 'year_established', None),
                'establishment_type': getattr(establishment, 'establishment_type', ''),
                'farming_method': getattr(establishment, 'farming_method', ''),
                # Company information (from establishment's company)
                'company': {
                    'id': establishment.company.id if establishment.company else None,
                    'name': establishment.company.name if establishment.company else '',
                    'description': getattr(establishment.company, 'description', '') if establishment.company else '',
                    'address': getattr(establishment.company, 'address', '') if establishment.company else '',
                    'city': getattr(establishment.company, 'city', '') if establishment.company else '',
                    'state': getattr(establishment.company, 'state', '') if establishment.company else '',
                    'country': getattr(establishment.company, 'country', '') if establishment.company else '',
                    'phone': getattr(establishment.company, 'phone', '') if establishment.company else '',
                    'email': getattr(establishment.company, 'email', '') if establishment.company else '',
                    'website': getattr(establishment.company, 'website', '') if establishment.company else '',
                    'facebook': getattr(establishment.company, 'facebook', '') if establishment.company else '',
                    'instagram': getattr(establishment.company, 'instagram', '') if establishment.company else '',
                    'logo': self._get_safe_image_url(establishment.company.logo) if establishment.company and establishment.company.logo else None,
                    'fiscal_id': getattr(establishment.company, 'fiscal_id', '') if establishment.company else '',
                    'contact_email': getattr(establishment.company, 'contact_email', '') if establishment.company else '',
                } if establishment.company else None
            }
            
            # === MAP DATA (polygon and metadata) ===
            parcel_data = None
            if production.parcel:
                parcel_data = {
                    'id': production.parcel.id,
                    'name': production.parcel.name,
                    'area': float(production.parcel.area) if production.parcel.area else None,
                    'polygon': production.parcel.polygon,
                    'map_metadata': production.parcel.map_metadata,
                    # Additional parcel fields for modal
                    'description': getattr(production.parcel, 'description', ''),
                    'soil_type': getattr(production.parcel, 'soil_type', ''),
                    'crop_type': getattr(production.parcel, 'crop_type', ''),
                    'certification_type': getattr(production.parcel, 'certification_type', ''),
                    'certified': getattr(production.parcel, 'certified', False),
                    'unique_code': getattr(production.parcel, 'unique_code', ''),
                    'contact_person': getattr(production.parcel, 'contact_person', ''),
                    'contact_phone': getattr(production.parcel, 'contact_phone', ''),
                    'contact_email': getattr(production.parcel, 'contact_email', ''),
                    # Current production info
                    'current_history': {
                        'id': production.id,
                        'name': production.name or f'{production.product.name if production.product else "Production"} {production.start_date.year if production.start_date else ""}',
                        'start_date': production.start_date.isoformat() if production.start_date else None,
                        'finish_date': production.finish_date.isoformat() if production.finish_date else None,
                        'crop_type': production.product.name if production.product else None
                    } if production else None
                }
            
            # === IMAGES DATA ===
            images_data = self._get_production_images(production)
            
            # === SIMILAR PRODUCTS ===
            similar_products = self._get_similar_products(production)
            
            # === SCAN TRACKING (create scan record like history API does) ===
            x_forwarded_for = request.META.get("HTTP_X_FORWARDED_FOR")
            if x_forwarded_for:
                ip_address = x_forwarded_for.split(",")[0]
            else:
                ip_address = request.META.get("HTTP_X_REAL_IP")

            city = None
            country = None

            # Get city and country from IP using free API (no GDAL required)
            if ip_address:
                try:
                    import requests
                    # Using ipapi.co - free tier allows 1000 requests/day
                    response = requests.get(f'https://ipapi.co/{ip_address}/json/', timeout=2)
                    if response.status_code == 200:
                        data = response.json()
                        city = data.get('city')
                        country = data.get('country_name')
                except Exception as e:
                    # If geolocation fails, continue without it
                    print(f"IP geolocation failed: {e}")
                    pass

            history_scan = HistoryScan.objects.create(
                history=production,
                user=request.user if request.user.is_authenticated else None,
                ip_address=ip_address,
                city=city,
                country=country,
            )
            
            # === BLOCKCHAIN VERIFICATION ===
            blockchain_verification = self._get_blockchain_verification(production)
            
            # === SUSTAINABILITY METRICS AND RECOMMENDATIONS ===
            recommendations = self._generate_sustainability_recommendations(
                crop_name, total_emissions, total_offsets, carbon_score
            )
            
            badges = self._generate_sustainability_badges(
                carbon_score, industry_percentile, total_offsets, blockchain_verification
            )
            
            # === SOCIAL PROOF DATA ===
            social_proof = self._calculate_social_proof(production)
            
            # === UNIFIED RESPONSE DATA ===
            response_data = {
                # Essential product info
                'product': {
                    'id': production.id,
                    'name': production.product.name if production.product else 'Product',
                    'reputation': float(production.reputation) if production.reputation else 4.5
                },
                
                # Carbon metrics (complete from qr-summary)
                'carbonScore': carbon_score,
                'totalEmissions': float(total_emissions),
                'totalOffsets': float(total_offsets),
                'netFootprint': float(net_footprint),
                'relatableFootprint': self._get_relatable_footprint(net_footprint),
                'industryPercentile': industry_percentile,
                'industryAverage': industry_average,
                'isUsdaVerified': self._check_usda_verification(production),
                'cropType': crop_type,
                'benchmarkSource': f'crop_specific_{crop_type}',
                
                # Emissions breakdown
                'emissionsByCategory': emissions_by_category,
                'emissionsBySource': emissions_by_source,
                'offsetsByAction': offsets_by_action,
                
                # Production timeline (combined events)
                'timeline': timeline_data,
                'production_events': timeline_data,  # Alias for compatibility
                'events': timeline_data,  # Alias for compatibility
                
                # Establishment info (from history data)
                'farmer': establishment_data,  # Primary key for carbon API compatibility
                'establishment': establishment_data,  # Alias for history API compatibility
                
                # Map data (from history API)
                'parcel': parcel_data,
                
                # Images
                'images': images_data,
                
                # Similar products
                'similar_products': similar_products,
                'similar_histories': similar_products,  # Alias for history API compatibility
                
                # Scan tracking
                'history_scan': history_scan.id,
                
                # Sustainability features
                'recommendations': recommendations,
                'badges': badges,
                'blockchainVerification': blockchain_verification,
                'socialProof': social_proof,
                
                # Metadata
                'verificationDate': timezone.now().isoformat(),
                'cache_hit': False,
                'timestamp': timezone.now().isoformat(),
                'api_version': 'complete_v1'
            }
            
            # Cache the complete response for 15 minutes (900 seconds)
            cache.set(cache_key, response_data, 900)
            
            return Response(response_data, status=status.HTTP_200_OK)
            
        except History.DoesNotExist:
            return Response({
                'error': 'Production not found or not published'
            }, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            print(f"Error in complete_summary: {e}")
            import traceback
            traceback.print_exc()
            return Response({
                'error': 'Internal server error',
                'message': str(e)
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def _get_safe_image_url(self, image_field):
        """Safely get image URL, handling cases where image file doesn't exist"""
        try:
            if image_field and hasattr(image_field, 'url') and image_field.url:
                return image_field.url
        except (ValueError, AttributeError):
            pass
        return None

    def _get_crop_category_for_recommendations(self, crop_name: str) -> str:
        """Helper method to categorize crops for recommendations"""
        crop_lower = crop_name.lower()
        
        fruit_keywords = ['orange', 'apple', 'grape', 'lemon', 'lime', 'strawberry', 'blueberry', 'avocado']
        vegetable_keywords = ['tomato', 'lettuce', 'carrot', 'broccoli', 'spinach', 'cucumber', 'pepper', 'onion']
        grain_keywords = ['corn', 'wheat', 'rice', 'barley', 'oats']
        herb_keywords = ['basil', 'oregano', 'thyme', 'rosemary', 'mint']
        legume_keywords = ['soybean', 'bean', 'chickpea', 'lentil', 'pea']
        nut_keywords = ['almond', 'walnut', 'pecan', 'hazelnut']
        
        for keyword in fruit_keywords:
            if keyword in crop_lower:
                return 'fruits'
        for keyword in vegetable_keywords:
            if keyword in crop_lower:
                return 'vegetables'
        for keyword in grain_keywords:
            if keyword in crop_lower:
                return 'grains'
        for keyword in herb_keywords:
            if keyword in crop_lower:
                return 'herbs'
        for keyword in legume_keywords:
            if keyword in crop_lower:
                return 'legumes'
        for keyword in nut_keywords:
            if keyword in crop_lower:
                return 'nuts'
                
        return 'general'
    
    def _get_production_images(self, production):
        """Get images from production album for consumer display with intelligent fallbacks"""
        try:
            # First, try to get actual production images
            if production.album and production.album.images.exists():
                images = []
                for image in production.album.images.all()[:5]:  # Limit to 5 images for performance
                    # Build absolute URL for image with proper error handling
                    image_url = None
                    try:
                        if image.image and hasattr(image.image, 'url') and image.image.url:
                            from django.conf import settings
                            if image.image.url.startswith('http'):
                                image_url = image.image.url
                            else:
                                # Build absolute URL
                                base_url = getattr(settings, 'MEDIA_URL_BASE', 'http://localhost:8000')
                                image_url = f"{base_url.rstrip('/')}{image.image.url}"
                    except (ValueError, AttributeError):
                        # Skip images without valid files
                        continue
                    
                    images.append({
                        'id': image.id,
                        'image': image_url,
                        'name': getattr(image, 'name', '') or ''
                    })
                return images
            
            # If no production images, try parcel images
            if production.parcel and production.parcel.album and production.parcel.album.images.exists():
                images = []
                for image in production.parcel.album.images.all()[:3]:  # Limit to 3 parcel images
                    image_url = None
                    try:
                        if image.image and hasattr(image.image, 'url') and image.image.url:
                            from django.conf import settings
                            if image.image.url.startswith('http'):
                                image_url = image.image.url
                            else:
                                base_url = getattr(settings, 'MEDIA_URL_BASE', 'http://localhost:8000')
                                image_url = f"{base_url.rstrip('/')}{image.image.url}"
                    except (ValueError, AttributeError):
                        # Skip images without valid files
                        continue
                    
                    images.append({
                        'id': f"parcel_{image.id}",
                        'image': image_url,
                        'name': f"Field: {getattr(image, 'name', '') or production.parcel.name}"
                    })
                return images
            
            # If no parcel images, try establishment images
            if (production.parcel and production.parcel.establishment and 
                production.parcel.establishment.album and 
                production.parcel.establishment.album.images.exists()):
                images = []
                for image in production.parcel.establishment.album.images.all()[:2]:  # Limit to 2 establishment images
                    image_url = None
                    try:
                        if image.image and hasattr(image.image, 'url') and image.image.url:
                            from django.conf import settings
                            if image.image.url.startswith('http'):
                                image_url = image.image.url
                            else:
                                base_url = getattr(settings, 'MEDIA_URL_BASE', 'http://localhost:8000')
                                image_url = f"{base_url.rstrip('/')}{image.image.url}"
                    except (ValueError, AttributeError):
                        # Skip images without valid files
                        continue
                    
                    images.append({
                        'id': f"establishment_{image.id}",
                        'image': image_url,
                        'name': f"Farm: {getattr(image, 'name', '') or production.parcel.establishment.name}"
                    })
                return images
            
            # If no real images available, provide crop-specific placeholder images
            crop_name = production.product.name.lower() if production.product else "unknown"
            crop_type = crop_name.replace(' ', '_')
            
            # Map crop types to placeholder images
            crop_placeholders = {
                'tree_fruit': 'https://images.unsplash.com/photo-1560806887-1e4cd0b6cbd6?w=800&h=600&fit=crop&crop=center',
                'orange': 'https://images.unsplash.com/photo-1547514701-42782101795e?w=800&h=600&fit=crop&crop=center',
                'valencia_orange': 'https://images.unsplash.com/photo-1547514701-42782101795e?w=800&h=600&fit=crop&crop=center',
                'lettuce': 'https://images.unsplash.com/photo-1622206151226-18ca2c9ab4a1?w=800&h=600&fit=crop&crop=center',
                'apple': 'https://images.unsplash.com/photo-1560806887-1e4cd0b6cbd6?w=800&h=600&fit=crop&crop=center',
                'tomato': 'https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=800&h=600&fit=crop&crop=center',
                'corn': 'https://images.unsplash.com/photo-1551754655-cd27e38d2076?w=800&h=600&fit=crop&crop=center',
                'wheat': 'https://images.unsplash.com/photo-1574323347407-f5e1ad6d020b?w=800&h=600&fit=crop&crop=center',
                'carrot': 'https://images.unsplash.com/photo-1598170845058-32b9d6a5da37?w=800&h=600&fit=crop&crop=center',
                'potato': 'https://images.unsplash.com/photo-1518977676601-b53f82aba655?w=800&h=600&fit=crop&crop=center',
            }
            
            # Get specific placeholder or default to generic farm image
            placeholder_url = crop_placeholders.get(
                crop_type, 
                crop_placeholders.get(
                    crop_name,
                    'https://images.unsplash.com/photo-1500937386664-56d1dfef3854?w=800&h=600&fit=crop&crop=center'  # Generic farm
                )
            )
            
            # Return placeholder image with descriptive information
            return [{
                'id': 'placeholder_1',
                'image': placeholder_url,
                'name': f'Representative {crop_name.title()} Farm'
            }]
            
        except Exception as e:
            # Fallback to a generic agriculture image if everything fails
            return [{
                'id': 'fallback_1',
                'image': 'https://images.unsplash.com/photo-1500937386664-56d1dfef3854?w=800&h=600&fit=crop&crop=center',
                'name': 'Sustainable Agriculture'
            }]
    
    def _get_similar_products(self, production):
        """Get similar products from the same company (matching history API logic)"""
        try:
            if not production.parcel or not production.parcel.establishment:
                return []
            
            from history.models import History
            similar_histories = History.objects.filter(
                parcel__establishment__company=production.parcel.establishment.company,
                published=True,
            ).exclude(id=production.id).select_related(
                'product', 
                'parcel__establishment'
            ).order_by('-id')[:5]  # Same logic as history API
            
            similar_products = []
            for history in similar_histories:
                # Get first image if available with absolute URL
                image_url = None
                if history.album and history.album.images.exists():
                    first_image = history.album.images.first()
                    try:
                        if first_image and first_image.image and hasattr(first_image.image, 'url') and first_image.image.url:
                            # Build absolute URL for image
                            from django.conf import settings
                            if first_image.image.url.startswith('http'):
                                image_url = first_image.image.url
                            else:
                                # Build absolute URL
                                base_url = getattr(settings, 'MEDIA_URL_BASE', 'http://localhost:8000')
                                image_url = f"{base_url.rstrip('/')}{first_image.image.url}"
                    except (ValueError, AttributeError):
                        # Skip images without valid files
                        image_url = None
                
                similar_products.append({
                    'id': history.id,
                    'product': {
                        'name': history.product.name if history.product else 'Product'
                    },
                    'reputation': float(history.reputation) if history.reputation else 4.5,
                    'image': image_url
                })
            
            return similar_products
        except Exception:
            return []

    def _normalize_crop_name(self, crop_name):
        """Normalize crop name to handle plural/singular matching"""
        if not crop_name:
            return ""
        
        # Convert to lowercase and remove spaces/underscores
        normalized = crop_name.lower().replace(' ', '_').replace('-', '_')
        
        # Common plural to singular mappings for agricultural products
        plural_to_singular = {
            'strawberries': 'strawberry',
            'blueberries': 'blueberry',
            'raspberries': 'raspberry',
            'blackberries': 'blackberry',
            'cranberries': 'cranberry',
            'cherries': 'cherry',
            'grapes': 'grape',
            'apples': 'apple',
            'oranges': 'orange',
            'lemons': 'lemon',
            'limes': 'lime',
            'peaches': 'peach',
            'pears': 'pear',
            'bananas': 'banana',
            'avocados': 'avocado',
            'tomatoes': 'tomato',
            'potatoes': 'potato',
            'onions': 'onion',
            'carrots': 'carrot',
            'peppers': 'pepper',
            'cucumbers': 'cucumber',
            'lettuce': 'lettuce',
            'spinach': 'spinach',
            'broccoli': 'broccoli',
            'cauliflower': 'cauliflower',
            'beans': 'bean',
            'peas': 'pea',
            'soybeans': 'soybean',
            'corn': 'corn',
            'wheat': 'wheat',
            'rice': 'rice',
            'oats': 'oat',
            'barley': 'barley',
            'almonds': 'almond',
            'walnuts': 'walnut',
            'pecans': 'pecan',
            'pistachios': 'pistachio',
        }
        
        # Check if it's a known plural form
        if normalized in plural_to_singular:
            return plural_to_singular[normalized]
        
        # Handle generic plural endings
        if normalized.endswith('ies'):
            # berries -> berry, cherries -> cherry
            return normalized[:-3] + 'y'
        elif normalized.endswith('es') and len(normalized) > 3:
            # tomatoes -> tomato, potatoes -> potato
            return normalized[:-2]
        elif normalized.endswith('s') and len(normalized) > 2:
            # apples -> apple, grapes -> grape
            return normalized[:-1]
        
        return normalized

    def _find_crop_benchmark(self, crop_name, year, usda_verified=True):
        """Find crop benchmark with flexible matching for plural/singular forms"""
        if not crop_name:
            return None
            
        # First try exact match
        benchmark = CarbonBenchmark.objects.filter(
            crop_type=crop_name,
            year=year,
            usda_verified=usda_verified
        ).first()
        
        if benchmark:
            return benchmark
        
        # Try normalized version
        normalized_crop = self._normalize_crop_name(crop_name)
        if normalized_crop != crop_name:
            benchmark = CarbonBenchmark.objects.filter(
                crop_type=normalized_crop,
                year=year,
                usda_verified=usda_verified
            ).first()
            
            if benchmark:
                return benchmark
        
        # Try reverse matching - check if any benchmark crop names match our normalized name
        # This handles cases where benchmark has plural but product has singular
        all_benchmarks = CarbonBenchmark.objects.filter(
            year=year,
            usda_verified=usda_verified
        )
        
        for benchmark in all_benchmarks:
            if self._normalize_crop_name(benchmark.crop_type) == normalized_crop:
                return benchmark
        
        return None

    def _calculate_carbon_score(self, total_emissions, total_offsets, production, crop_type):
        """Calculate carbon score using existing logic from qr_summary"""
        try:
            # Try to get benchmark for more accurate scoring with flexible matching
            year = production.start_date.year if production.start_date else timezone.now().year
            benchmark = self._find_crop_benchmark(crop_type, year, usda_verified=True)
            
            if benchmark:
                # Use benchmark-based scoring
                production_amount = getattr(production, 'production_amount', None) or 1000
                net_footprint_per_kg = (total_emissions - total_offsets) / production_amount if production_amount > 0 else (total_emissions - total_offsets)
                
                if net_footprint_per_kg <= 0:
                    return 95  # Excellent for carbon neutral/negative
                elif net_footprint_per_kg <= benchmark.min_emissions:
                    return 90  # Excellent performance
                elif net_footprint_per_kg <= benchmark.average_emissions:
                    # Better than average: scale from 70-90
                    ratio = net_footprint_per_kg / benchmark.average_emissions
                    return int(90 - (ratio * 20))
                elif net_footprint_per_kg <= benchmark.max_emissions:
                    # Worse than average: scale from 30-70
                    ratio = (net_footprint_per_kg - benchmark.average_emissions) / (benchmark.max_emissions - benchmark.average_emissions)
                    return int(70 - (ratio * 40))
                else:
                    # Worse than max: scale from 10-30
                    ratio = min(net_footprint_per_kg / benchmark.max_emissions, 2.0)
                    return max(10, int(30 - ((ratio - 1) * 20)))
            else:
                # Fallback to offset-based scoring
                if total_emissions > 0:
                    offset_percentage = min(100, (total_offsets / total_emissions) * 100)
                    if offset_percentage >= 100:
                        return 85 + min(15, ((offset_percentage - 100) / 50) * 15)
                    else:
                        return offset_percentage * 0.85
                elif total_offsets > 0:
                    return 95  # High score for carbon negative
                else:
                    return 50  # Default score when no data
        except Exception:
            return 50

    def _calculate_industry_percentile(self, net_footprint, production, crop_type):
        """Calculate industry percentile using existing logic"""
        try:
            year = production.start_date.year if production.start_date else timezone.now().year
            benchmark = self._find_crop_benchmark(crop_type, year, usda_verified=True)
            
            if benchmark and benchmark.average_emissions > 0:
                # Convert net footprint to per-kg basis if we have production amount
                production_amount = getattr(production, 'production_amount', None) or 1000
                net_footprint_per_kg = net_footprint / production_amount if production_amount > 0 else net_footprint
                
                if net_footprint_per_kg <= 0:
                    return 95  # Very good if carbon neutral/negative
                elif net_footprint_per_kg <= benchmark.min_emissions:
                    return 95  # Top performers
                elif net_footprint_per_kg >= benchmark.max_emissions:
                    return 5   # Bottom performers
                else:
                    # Linear interpolation between min and max
                    position = (net_footprint_per_kg - benchmark.min_emissions) / (benchmark.max_emissions - benchmark.min_emissions)
                    return max(5, min(95, int(95 - (position * 90))))
            else:
                # No benchmark available - estimate based on carbon score
                carbon_score = self._calculate_carbon_score(0, 0, production, crop_type)  # Will use fallback logic
                return max(5, min(95, int(carbon_score * 0.9)))
        except Exception:
            return 50

    def _get_industry_average(self, crop_type, production):
        """Get industry average emissions for the crop type"""
        try:
            year = production.start_date.year if production.start_date else timezone.now().year
            benchmark = self._find_crop_benchmark(crop_type, year, usda_verified=True)
            
            if benchmark:
                return benchmark.average_emissions
            else:
                # Fallback to general agriculture average
                general_benchmark = CarbonBenchmark.objects.filter(
                    industry='agriculture',
                    year=year,
                    crop_type=''
                ).first()
                return general_benchmark.average_emissions if general_benchmark else 0.0
        except Exception:
            return 0.0

    def _get_complete_timeline(self, production):
        """Get complete timeline data from all event types"""
        try:
            timeline_events = []
            
            # Get all event types and combine them
            from history.models import (
                WeatherEvent, ProductionEvent, ChemicalEvent, 
                GeneralEvent, EquipmentEvent, SoilManagementEvent, PestManagementEvent
            )
            
            event_types = [
                (production.history_weatherevent_events.all(), 'weather'),
                (production.history_productionevent_events.all(), 'production'),
                (production.history_chemicalevent_events.all(), 'chemical'),
                (production.history_generalevent_events.all(), 'general'),
                (production.history_equipmentevent_events.all(), 'equipment'),
                (production.history_soilmanagementevent_events.all(), 'soil_management'),
                (production.history_pestmanagementevent_events.all(), 'pest_management'),
            ]
            
            for events, event_category in event_types:
                for event in events:
                    timeline_events.append({
                        'id': event.id,
                        'type': event_category,
                        'description': getattr(event, 'description', '') or getattr(event, 'name', ''),
                        'observation': getattr(event, 'observation', ''),
                        'date': event.date.isoformat() if event.date else None,
                        'certified': getattr(event, 'certified', True),
                        'index': getattr(event, 'index', 0),
                        'volume': getattr(event, 'volume', None),
                        'concentration': getattr(event, 'concentration', None),
                        'area': getattr(event, 'area', None),
                        'equipment': getattr(event, 'commercial_name', None) or getattr(event, 'equipment', None)
                    })
            
            # Sort by date
            timeline_events.sort(key=lambda x: x['date'] or '1900-01-01')
            
            return timeline_events
        except Exception as e:
            print(f"Error getting timeline: {e}")
            return []

    def _get_blockchain_verification(self, production):
        """Get blockchain verification status"""
        try:
            # Check if production has blockchain verification
            # This would integrate with your blockchain service
            return {
                'verified': True,  # Placeholder - implement actual verification logic
                'transaction_hash': None,
                'verification_date': timezone.now().isoformat(),
                'certifying_body': 'USDA SOE'
            }
        except Exception:
            return {
                'verified': False,
                'error': 'Verification service unavailable'
            }

    def _generate_sustainability_recommendations(self, crop_name, total_emissions, total_offsets, carbon_score):
        """Generate sustainability recommendations based on crop and performance"""
        try:
            recommendations = []
            
            # Base recommendations by crop category
            crop_category = self._get_crop_category_for_recommendations(crop_name)
            
            if crop_category == 'fruits':
                recommendations.extend([
                    'Consider implementing integrated pest management to reduce chemical inputs',
                    'Explore drip irrigation systems to optimize water usage',
                    'Look into organic certification opportunities'
                ])
            elif crop_category == 'vegetables':
                recommendations.extend([
                    'Implement crop rotation to improve soil health',
                    'Consider cover cropping during off-seasons',
                    'Explore precision agriculture techniques'
                ])
            elif crop_category == 'grains':
                recommendations.extend([
                    'Consider no-till farming practices to sequester carbon',
                    'Implement precision fertilizer application',
                    'Explore renewable energy options for processing'
                ])
            else:
                recommendations.extend([
                    'Implement sustainable farming practices',
                    'Consider renewable energy adoption',
                    'Explore carbon offset opportunities'
                ])
            
            # Performance-based recommendations
            if carbon_score < 50:
                recommendations.append('Focus on reducing emissions through energy efficiency improvements')
            elif carbon_score < 70:
                recommendations.append('Consider investing in carbon offset projects')
            else:
                recommendations.append('Share your sustainable practices with other farmers')
            
            return recommendations[:5]  # Limit to 5 recommendations
        except Exception:
            return ['Explore sustainable farming practices to improve your carbon footprint']

    def _generate_sustainability_badges(self, carbon_score, industry_percentile, total_offsets, blockchain_verification):
        """Generate sustainability badges based on performance"""
        try:
            badges = []
            
            if carbon_score >= 90:
                badges.append({
                    'id': 'carbon_champion',
                    'name': 'Carbon Champion',
                    'description': 'Exceptional carbon performance',
                    'icon': 'leaf',
                    'color': 'green'
                })
            elif carbon_score >= 70:
                badges.append({
                    'id': 'eco_friendly',
                    'name': 'Eco Friendly',
                    'description': 'Above average sustainability',
                    'icon': 'eco',
                    'color': 'blue'
                })
            
            if industry_percentile >= 80:
                badges.append({
                    'id': 'industry_leader',
                    'name': 'Industry Leader',
                    'description': 'Top 20% in industry',
                    'icon': 'star',
                    'color': 'gold'
                })
            
            if total_offsets > 0:
                badges.append({
                    'id': 'carbon_offset',
                    'name': 'Carbon Offset',
                    'description': 'Actively offsetting emissions',
                    'icon': 'balance',
                    'color': 'purple'
                })
            
            if blockchain_verification.get('verified'):
                badges.append({
                    'id': 'verified',
                    'name': 'Verified',
                    'description': 'Blockchain verified data',
                    'icon': 'verified',
                    'color': 'blue'
                })
            
            return badges
        except Exception:
            return []

    def _calculate_social_proof(self, production):
        """Calculate social proof metrics"""
        try:
            from history.models import HistoryScan
            
            # Get scan statistics
            total_scans = HistoryScan.objects.filter(history=production).count()
            
            # Get company-wide statistics
            company_scans = HistoryScan.objects.filter(
                history__parcel__establishment__company=production.parcel.establishment.company
            ).count() if production.parcel and production.parcel.establishment else 0
            
            return {
                'totalScans': total_scans,
                'totalOffsets': 0.0,  # Would be calculated from actual offset purchases
                'totalUsers': total_scans,  # Approximate unique users
                'averageRating': float(production.reputation) if production.reputation else 4.5,
                'companyScans': company_scans
            }
        except Exception:
            return {
                'totalScans': 0,
                'totalOffsets': 0.0,
                'totalUsers': 0,
                'averageRating': 4.5
            }

    def _get_relatable_footprint(self, net_footprint):
        """Convert net footprint to relatable comparison"""
        try:
            if net_footprint <= 0:
                return "Carbon neutral or negative - excellent!"
            elif net_footprint < 10:
                return f"Equivalent to {net_footprint:.1f} kg CO2 - like driving {net_footprint * 2.3:.0f} miles"
            elif net_footprint < 100:
                return f"Equivalent to {net_footprint:.0f} kg CO2 - like {net_footprint / 8.9:.1f} gallons of gasoline"
            else:
                return f"Equivalent to {net_footprint:.0f} kg CO2 - significant environmental impact"
        except Exception:
            return "Carbon footprint data being calculated"

    def _check_usda_verification(self, production):
        """Check if production has USDA verification"""
        try:
            # Check for USDA certifications or verifications
            # This would integrate with actual USDA verification system
            return True  # Placeholder - implement actual verification check
        except Exception:
            return False


class CarbonOffsetViewSet(viewsets.ViewSet):
    permission_classes = [permissions.IsAuthenticated]

    @action(detail=False, methods=['get'], url_path='certified_projects')
    def certified_projects(self, request):
        """
        Get available certified carbon offset projects for purchase.
        Returns certified projects from database with proper formatting.
        """
        from .models import CarbonOffsetProject
        
        # Get all available projects from database
        projects = CarbonOffsetProject.objects.all()
        
        # Format projects for frontend
        formatted_projects = []
        for project in projects:
            # Parse project type for verification badge
            verification_badges = {
                'Reforestation': {'color': 'green', 'text': 'VCS Verified', 'icon': 'shield'},
                'Soil Carbon': {'color': 'blue', 'text': 'CAR Verified', 'icon': 'certificate'},
                'Renewable Energy': {'color': 'yellow', 'text': 'Gold Standard', 'icon': 'star'},
                'Methane Reduction': {'color': 'purple', 'text': 'ACR Verified', 'icon': 'award'},
                'Grassland Management': {'color': 'teal', 'text': 'VCS Verified', 'icon': 'leaf'},
                'Forest Management': {'color': 'green', 'text': 'CAR Verified', 'icon': 'shield'},
            }
            
            badge = verification_badges.get(project.project_type, {
                'color': 'gray', 'text': 'Verified', 'icon': 'certificate'
            })
            
            # Parse location for country/region
            location_parts = project.location.split(', ')
            country = location_parts[-1] if location_parts else 'Unknown'
            region = location_parts[0] if len(location_parts) > 1 else 'Unknown'
            
            # Generate registry URL based on certification standard
            registry_urls = {
                'VCS (Verra)': f'https://registry.verra.org/project/{project.id}',
                'Climate Action Reserve': f'https://thereserve2.apx.com/mymodule/reg/prjView.asp?id={project.id}',
                'Gold Standard': f'https://registry.goldstandard.org/projects/{project.id}',
                'American Carbon Registry': f'https://acr2.apx.com/myModule/rpt/myrpt.asp?r=111&h={project.id}',
            }
            
            formatted_project = {
                "id": str(project.id),
                "name": project.name,
                "description": project.description,
                "project_type": project.project_type.lower().replace(' ', '_'),
                "verification_standard": project.certification_standard,
                "verification_badge": badge,
                "country": country,
                "region": region,
                "developer": f"Project Developer {project.id}",  # Placeholder since not in model
                "price_per_credit": float(project.price_per_ton),
                "available_credits": int(project.available_capacity),
                "vintage_year": 2024,  # Placeholder since not in model
                "co_benefits": ["environmental_protection", "community_development", "sustainable_development"],
                "featured": project.id % 2 == 1,  # Make every other project featured
                "trazo_verified": True,
                "registry_url": registry_urls.get(project.certification_standard, f'https://registry.example.com/project/{project.id}')
            }
            formatted_projects.append(formatted_project)
        
        return Response({
            'projects': formatted_projects,
            'total_projects': len(formatted_projects),
            'message': 'Certified projects from database'
        }, status=status.HTTP_200_OK)

    def create(self, request):
        """
        Create a carbon offset entry with verification system.
        Expected payload: {
            "production": "",  # production ID (optional)
            "establishment": "",  # establishment ID (optional, if no production specified)
            "amount": 12,      # offset amount in kg CO2e
            "source_id": "no_till",  # offset project ID
            "type": "offset",
            "year": 2025,
            "verification_level": "self_reported",  # self_reported, community_verified, certified_project
            "additionality_evidence": "",  # required for ≥100 kg CO2e
            "permanence_plan": "",  # required for ≥1000 kg CO2e
            "methodology_template": "",  # optional
            "registry_verification_id": "",  # for certified projects
            "evidence_photos": [],  # optional array of photo URLs
            "evidence_documents": []  # optional array of document URLs
        }
        """
        try:
            data = request.data
            
            # Validate required fields
            required_fields = ['amount', 'source_id', 'type', 'year']
            for field in required_fields:
                if field not in data:
                    return Response(
                        {'error': f'Missing required field: {field}'}, 
                        status=status.HTTP_400_BAD_REQUEST
                    )
            
            amount = float(data['amount'])
            source_id = data['source_id']
            year = int(data['year'])
            production_id = data.get('production')
            verification_level = data.get('verification_level', 'self_reported')
            
            # Validate amount
            if amount <= 0:
                return Response(
                    {'error': 'Amount must be greater than 0'}, 
                    status=status.HTTP_400_BAD_REQUEST
                )

            # Import verification service
            from .services.verification_service import VerificationService
            verification_service = VerificationService()

            # Check verification requirements based on amount
            if amount >= 1000 and verification_level != 'certified_project':
                return Response({
                    'error': 'High-value offsets (≥1000 kg CO₂e) require certified project verification',
                    'required_verification_level': 'certified_project',
                    'amount_threshold': 1000
                }, status=status.HTTP_400_BAD_REQUEST)

            if amount >= 100 and not data.get('additionality_evidence'):
                return Response({
                    'error': 'Medium-value offsets (≥100 kg CO₂e) require additionality evidence',
                    'required_fields': ['additionality_evidence'],
                    'amount_threshold': 100
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # Get or create offset source
            offset_source, created = CarbonSource.objects.get_or_create(
                name=source_id,
                defaults={
                    'category': 'offset',
                    'default_emission_factor': -1.0,  # Negative for offset
                    'unit': 'kg CO2e',
                    'description': f'Carbon offset project: {source_id}',
                    'usda_verified': True if source_id in ['no_till', 'cover_crop', 'reforestation'] else False
                }
            )
            
            # Determine establishment
            establishment = None
            production = None
            establishment_id = data.get('establishment')
            
            if production_id:
                try:
                    from history.models import History
                    production = History.objects.get(id=production_id)
                    establishment = production.establishment
                except History.DoesNotExist:
                    return Response(
                        {'error': 'Production not found'}, 
                        status=status.HTTP_404_NOT_FOUND
                    )
            elif establishment_id:
                # Handle establishment ID from payload
                try:
                    from company.models import Establishment
                    establishment = Establishment.objects.get(id=establishment_id)
                    
                    # Verify user has access to this establishment
                    user_companies = request.user.companies.all()
                    if establishment.company not in user_companies:
                        return Response(
                            {'error': 'Access denied to this establishment'}, 
                            status=status.HTTP_403_FORBIDDEN
                        )
                except Establishment.DoesNotExist:
                    return Response(
                        {'error': 'Establishment not found'}, 
                        status=status.HTTP_404_NOT_FOUND
                    )
            else:
                # If no production or establishment specified, try to get user's establishment
                if hasattr(request.user, 'establishment'):
                    establishment = request.user.establishment
                elif hasattr(request.user, 'company') and request.user.company:
                    # Get first establishment from user's company
                    establishment = request.user.company.establishments.first()
                else:
                    # Try to get establishment from user's companies
                    user_companies = request.user.companies.all()
                    if user_companies.exists():
                        establishment = user_companies.first().establishment_set.first()
                
                if not establishment:
                    return Response(
                        {'error': 'No establishment found for user'}, 
                        status=status.HTTP_400_BAD_REQUEST
                    )
            
            # Create carbon entry with verification fields
            carbon_entry = CarbonEntry.objects.create(
                establishment=establishment,
                production=production,
                created_by=request.user,
                type='offset',
                source=offset_source,
                amount=amount,
                year=year,
                description=f'Carbon offset from {source_id} project: {amount} kg CO2e',
                usda_verified=offset_source.usda_verified,
                usda_factors_based=True,
                verification_status='verified',
                data_source=f'User-created offset: {source_id}',
                # Verification system fields
                verification_level=verification_level,
                additionality_evidence=data.get('additionality_evidence', ''),
                permanence_plan=data.get('permanence_plan', ''),
                baseline_data=data.get('baseline_data', {}),
                methodology_template=data.get('methodology_template', ''),
                registry_verification_id=data.get('registry_verification_id', ''),
                evidence_requirements_met=self._check_evidence_requirements(data),
                documentation_complete=self._check_documentation_complete(data),
                # Evidence files
                evidence_photos=data.get('evidence_photos', []),
                evidence_documents=data.get('evidence_documents', []),
                # Required fields with default values (only valid model fields)
                attestation_count=0,
                community_attestations=[],  # Empty list for JSONB field
                trust_score=0.5,  # Will be calculated in save()
                audit_status='pending',
                additionality_verified=False
            )

            # Run verification check
            verification_result = verification_service.verify_offset_entry(carbon_entry)

            # Handle anti-gaming violations
            if verification_result.get('anti_gaming_flags'):
                # Log gaming attempt for monitoring
                CarbonAuditLog.objects.create(
                    carbon_entry=carbon_entry,
                    user=request.user,
                    action='gaming_detected',
                    details=f'Anti-gaming flags detected: {", ".join(verification_result["anti_gaming_flags"])}'
                )
                
                # If high-risk gaming detected, reject the offset
                high_risk_flags = [
                    'high_cumulative_threshold_exceeded',
                    'rapid_submission_pattern', 
                    'unrealistic_offset_ratio',
                    'exceeds_acreage_capacity'
                ]
                
                if any(flag in verification_result['anti_gaming_flags'] for flag in high_risk_flags):
                    return Response({
                        'error': 'Offset creation blocked due to anti-gaming policy violations',
                        'violations': verification_result['anti_gaming_flags'],
                        'requirements': verification_result['requirements'],
                        'message': 'Please use certified projects or upgrade verification level for large offset claims',
                        'cumulative_limit_info': {
                            'monthly_self_reported_limit': '500 kg CO2e',
                            'requires_verification_upgrade': True,
                            'certified_projects_recommended': True
                        }
                    }, status=status.HTTP_400_BAD_REQUEST)

            # Industry-standard conservative crediting with buffer pool deduction
            # Following Indigo Ag and Agoro Carbon Alliance practices (10-20% buffer)
            buffer_pool_percentage = 0.15  # 15% buffer pool
            if carbon_entry.verification_level == 'self_reported':
                buffer_pool_percentage = 0.20  # 20% buffer for self-reported
            elif carbon_entry.verification_level == 'community_verified':
                buffer_pool_percentage = 0.15  # 15% buffer for community verified
            elif carbon_entry.verification_level == 'certified_project':
                buffer_pool_percentage = 0.10  # 10% buffer for certified projects

            # Apply buffer pool deduction to effective amount
            carbon_entry.effective_amount = carbon_entry.effective_amount * (1 - buffer_pool_percentage)

            # Update audit status based on verification
            if verification_result['audit_required']:
                carbon_entry.audit_status = 'scheduled'
            elif verification_result['approved']:
                carbon_entry.audit_status = 'passed'
            else:
                carbon_entry.audit_status = 'failed'

            carbon_entry.save()
            
            # Create audit log
            CarbonAuditLog.objects.create(
                carbon_entry=carbon_entry,
                user=request.user,
                action='create',
                details=f'Created carbon offset: {amount} kg CO2e from {source_id} project'
            )
            
            return Response({
                'success': True,
                'carbon_entry_id': carbon_entry.id,
                'amount': amount,
                'source': source_id,
                'establishment_id': establishment.id if establishment else None,
                'production_id': production.id if production else None,
                # Verification system response
                'verification_result': verification_result,
                'verification_level': carbon_entry.verification_level,
                'trust_score': carbon_entry.trust_score,
                'effective_amount': carbon_entry.effective_amount,
                'audit_status': carbon_entry.audit_status,
                'verification_badge': carbon_entry.verification_badge
            }, status=status.HTTP_201_CREATED)
            
        except ValueError as e:
            return Response(
                {'error': f'Invalid data format: {str(e)}'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        except Exception as e:
            logger.error(f"Error creating carbon offset: {str(e)}")
            return Response(
                {'error': 'Failed to create carbon offset'}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    def _check_evidence_requirements(self, data):
        """Check if evidence requirements are met based on verification level and amount"""
        verification_level = data.get('verification_level', 'self_reported')
        amount = float(data.get('amount', 0))
        
        if verification_level == 'certified_project':
            return bool(data.get('registry_verification_id'))
        elif amount >= 100:
            return bool(data.get('additionality_evidence'))
        
        return True  # Basic requirements met for self-reported

    def _check_documentation_complete(self, data):
        """Check if documentation is complete for the verification level"""
        verification_level = data.get('verification_level', 'self_reported')
        amount = float(data.get('amount', 0))
        
        required_docs = []
        
        if amount >= 1000:
            required_docs.extend(['permanence_plan', 'additionality_evidence'])
        elif amount >= 100:
            required_docs.append('additionality_evidence')
            
        if verification_level == 'certified_project':
            required_docs.append('registry_verification_id')
        
        for doc in required_docs:
            if not data.get(doc):
                return False
                
        return True


class ProductionSerializer(serializers.ModelSerializer):
    class Meta:
        model = History
        fields = ['id', 'name', 'start_date', 'finish_date', 'published']


class CarbonProductionViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = History.objects.all()
    permission_classes = []
    serializer_class = ProductionSerializer


# IoT Integration and Automation Endpoints
@api_view(['POST'])
@permission_classes([IsAuthenticated])
def john_deere_webhook(request):
    """
    Webhook endpoint for John Deere IoT fuel sensor data.
    Automatically creates equipment events and calculates carbon impact.
    """
    try:
        data = request.data
        
        # Validate required fields
        required_fields = ['device_id', 'establishment_id', 'fuel_liters', 'timestamp', 'equipment_type']
        for field in required_fields:
            if field not in data:
                return Response(
                        {'error': f'Missing required field: {field}'},
                    status=status.HTTP_400_BAD_REQUEST
                )
        
        establishment_id = data['establishment_id']
        fuel_liters = float(data['fuel_liters'])
        equipment_type = data['equipment_type']
        device_id = data['device_id']
        timestamp = data['timestamp']
        
        # Verify establishment exists
        try:
            establishment = Establishment.objects.get(id=establishment_id)
        except Establishment.DoesNotExist:
            return Response(
                {'error': 'Establishment not found'}, 
                status=status.HTTP_404_NOT_FOUND
            )
        
        # Calculate carbon emissions (diesel: 2.7 kg CO2e/liter)
        co2e_emissions = fuel_liters * 2.7
        
        # Find or create a CarbonSource for IoT-generated fuel consumption events
        source_name = f'{equipment_type.title()} Fuel Consumption'
        carbon_source, created = CarbonSource.objects.get_or_create(
            name=source_name,
            defaults={
                'category': 'fuel',
                'default_emission_factor': 2.7,  # Diesel emission factor
                'unit': 'kg CO2e/L',
                'description': f'Automatically created for IoT device: {device_id}'
            }
        )
        
        # Create carbon entry automatically
        carbon_entry = CarbonEntry.objects.create(
            establishment_id=establishment_id,
            type='emission',
            source=carbon_source,  # Use CarbonSource instance instead of string
            amount=co2e_emissions,
            year=timezone.now().year,
            description=f'Auto-logged from IoT device {device_id}: {fuel_liters}L fuel consumed',
            iot_device_id=device_id,
            created_by=request.user
        )
        
        # Log the IoT data ingestion
        CarbonAuditLog.objects.create(
            carbon_entry=carbon_entry,
            user=request.user,
            action='iot_create',
            details=f'IoT device {device_id} auto-created fuel consumption event: {fuel_liters}L = {co2e_emissions:.2f} kg CO2e'
        )
        
        return Response({
            'status': 'success',
            'carbon_entry_id': carbon_entry.id,
            'co2e_calculated': co2e_emissions,
            'message': f'Successfully processed {fuel_liters}L fuel consumption from {equipment_type}'
        }, status=status.HTTP_201_CREATED)

    except ValueError as e:
        return Response(
            {'error': f'Invalid data format: {str(e)}'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
    except Exception as e:
        logger.error(f"Error processing John Deere webhook: {str(e)}")
        return Response(
            {'error': 'Failed to process IoT data'}, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def weather_station_webhook(request):
    """
    Webhook endpoint for weather station data.
    Auto-suggests events based on weather conditions.
    """
    try:
        data = request.data
        
        # Validate required fields
        required_fields = ['station_id', 'establishment_id', 'temperature', 'humidity', 'wind_speed', 'timestamp']
        for field in required_fields:
            if field not in data:
                return Response(
                        {'error': f'Missing required field: {field}'}, 
                    status=status.HTTP_400_BAD_REQUEST
                )
        
        establishment_id = data['establishment_id']
        temperature = float(data['temperature'])
        humidity = float(data['humidity'])
        wind_speed = float(data['wind_speed'])
        station_id = data['station_id']
        
        # Verify establishment exists
        try:
            establishment = Establishment.objects.get(id=establishment_id)
        except Establishment.DoesNotExist:
            return Response(
                {'error': 'Establishment not found'}, 
                status=status.HTTP_404_NOT_FOUND
            )
        
        # Generate weather-based recommendations
        recommendations = []
        
        # High temperature alert (>35°C)
        if temperature > 35:
            recommendations.append({
                'type': 'weather_alert',
                'priority': 'high',
                'message': f'High temperature alert: {temperature}°C - Consider crop protection measures',
                'suggested_actions': [
                    'Increase irrigation frequency',
                    'Apply shade cloth if available',
                    'Monitor plant stress indicators'
                ]
            })
        
        # High wind alert (>25 km/h)
        if wind_speed > 25:
            recommendations.append({
                'type': 'weather_alert',
                'priority': 'medium',
                'message': f'High wind alert: {wind_speed} km/h - Avoid chemical applications',
                'suggested_actions': [
                    'Postpone spraying operations',
                    'Secure loose equipment',
                    'Check irrigation systems for damage'
                ]
            })
        
        # Low humidity alert (<30%)
        if humidity < 30:
            recommendations.append({
                'type': 'weather_alert',
                'priority': 'medium',
                'message': f'Low humidity alert: {humidity}% - Increase irrigation',
                'suggested_actions': [
                    'Increase irrigation duration',
                    'Monitor soil moisture levels',
                    'Consider misting systems'
                ]
            })
        
        # Log weather data processing
        CarbonAuditLog.objects.create(
            user=request.user,
            action='weather_processed',
            details=f'Weather station {station_id} data processed: {temperature}°C, {humidity}% humidity, {wind_speed} km/h wind'
        )
        
        return Response({
            'status': 'success',
            'recommendations': recommendations,
            'weather_data': {
                'temperature': temperature,
                'humidity': humidity,
                'wind_speed': wind_speed
            },
            'message': f'Weather data processed successfully with {len(recommendations)} recommendations'
        }, status=status.HTTP_200_OK)
        
    except ValueError as e:
        return Response(
            {'error': f'Invalid data format: {str(e)}'}, 
            status=status.HTTP_400_BAD_REQUEST
        )
    except Exception as e:
        logger.error(f"Error processing weather station webhook: {str(e)}")
        return Response(
            {'error': 'Failed to process weather data'}, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


class IoTDeviceViewSet(viewsets.ViewSet):
    """
    ViewSet for IoT device management and monitoring.
    """
    permission_classes = [permissions.IsAuthenticated]

    def list(self, request):
        """List all IoT devices for an establishment."""
        establishment_id = request.query_params.get('establishment_id')

        if not establishment_id:
            return Response(
                {'error': 'establishment_id is required'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        try:
            devices = IoTDevice.objects.filter(establishment_id=establishment_id)
            device_data = []
            
            for device in devices:
                device_info = {
                    'id': device.id,
                    'device_id': device.device_id,
                    'device_type': device.device_type,
                    'name': device.name,
                    'manufacturer': device.manufacturer,
                    'model': device.model,
                    'status': device.status,
                    'battery_level': device.battery_level,
                    'location': {
                        'lat': float(device.latitude) if device.latitude else None,
                        'lng': float(device.longitude) if device.longitude else None
                    },
                    'installed_date': device.installed_date.isoformat(),
                    'last_seen': device.last_seen.isoformat() if device.last_seen else None,
                    'configuration': device.configuration,
                    'notes': device.notes,
                    'needs_maintenance': device.needs_maintenance,
                    'total_data_points': device.total_data_points
                }
                device_data.append(device_info)
            
            return Response({
                'devices': device_data,
                'total_count': len(device_data)
            }, status=status.HTTP_200_OK)
            
        except Exception as e:
            logger.error(f"Error listing IoT devices: {str(e)}")
            return Response(
                {'error': 'Failed to list devices', 'details': str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    def create(self, request):
        """Register a new IoT device."""
        try:
            data = request.data
            
            # Validate required fields
            required_fields = ['device_id', 'device_type', 'establishment_id', 'name']
            for field in required_fields:
                if field not in data:
                    return Response(
                        {'error': f'Missing required field: {field}'},
                        status=status.HTTP_400_BAD_REQUEST
                    )
            
            # Check if device_id already exists
            if IoTDevice.objects.filter(device_id=data['device_id']).exists():
                return Response(
                        {'error': 'Device ID already exists'},
                    status=status.HTTP_400_BAD_REQUEST
                )
        
            # Verify establishment exists
            try:
                establishment = Establishment.objects.get(id=data['establishment_id'])
            except Establishment.DoesNotExist:
                return Response(
                    {'error': 'Establishment not found'}, 
                    status=status.HTTP_404_NOT_FOUND
                )
            
            # Create the device
            device = IoTDevice.objects.create(
                device_id=data['device_id'],
                device_type=data['device_type'],
                establishment=establishment,
                name=data['name'],
                manufacturer=data.get('manufacturer', ''),
                model=data.get('model', ''),
                latitude=data.get('latitude'),
                longitude=data.get('longitude'),
                configuration=data.get('configuration', {}),
                notes=data.get('notes', ''),
                status='offline'  # Default to offline until first data received
            )
            
            # Log device registration
            CarbonAuditLog.objects.create(
                user=request.user,
                action='create',
                details=f'Registered new IoT device: {device.device_id} ({device.name})'
            )
            
            return Response({
                'id': device.id,
                'device_id': device.device_id,
                'message': f'Device {device.name} registered successfully',
                'status': 'registered'
            }, status=status.HTTP_201_CREATED)
            
        except Exception as e:
            logger.error(f"Error creating IoT device: {str(e)}")
            return Response(
                {'error': 'Failed to register device', 'details': str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    def retrieve(self, request, pk=None):
        """Get details of a specific IoT device."""
        try:
            device = IoTDevice.objects.get(id=pk)
            
            # Get recent data points
            recent_data = IoTDataPoint.objects.filter(
                device=device
            ).order_by('-timestamp')[:10]
            
            device_data = {
                'id': device.id,
                'device_id': device.device_id,
                'device_type': device.device_type,
                'name': device.name,
                'manufacturer': device.manufacturer,
                'model': device.model,
                'status': device.status,
                'battery_level': device.battery_level,
                'location': {
                    'lat': float(device.latitude) if device.latitude else None,
                    'lng': float(device.longitude) if device.longitude else None
                },
                'installed_date': device.installed_date.isoformat(),
                'last_seen': device.last_seen.isoformat() if device.last_seen else None,
                'last_maintenance': device.last_maintenance.isoformat() if device.last_maintenance else None,
                'configuration': device.configuration,
                'notes': device.notes,
                'needs_maintenance': device.needs_maintenance,
                'total_data_points': device.total_data_points,
                'recent_data': [
                    {
                        'timestamp': dp.timestamp.isoformat(),
                        'data': dp.data,
                        'quality_score': dp.quality_score,
                        'processed': dp.processed
                    } for dp in recent_data
                ]
            }
            
            return Response(device_data, status=status.HTTP_200_OK)
            
        except IoTDevice.DoesNotExist:
            return Response(
                {'error': 'Device not found'}, 
                status=status.HTTP_404_NOT_FOUND
            )
        except Exception as e:
            logger.error(f"Error retrieving IoT device: {str(e)}")
            return Response(
                {'error': 'Failed to retrieve device', 'details': str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    def update(self, request, pk=None):
        """Update IoT device configuration."""
        try:
            device = IoTDevice.objects.get(id=pk)
            data = request.data
            
            # Update allowed fields
            updatable_fields = [
                'name', 'manufacturer', 'model', 'latitude', 'longitude',
                'configuration', 'notes', 'status'
            ]
            
            updated_fields = []
            for field in updatable_fields:
                if field in data:
                    setattr(device, field, data[field])
                    updated_fields.append(field)
            
            if updated_fields:
                device.save(update_fields=updated_fields)
                
                # Log device update
                CarbonAuditLog.objects.create(
                    user=request.user,
                    action='update',
                    details=f'Updated IoT device {device.device_id}: {", ".join(updated_fields)}'
                )
            
            return Response({
                'id': device.id,
                'device_id': device.device_id,
                'message': f'Device {device.name} updated successfully',
                'updated_fields': updated_fields
            }, status=status.HTTP_200_OK)
            
        except IoTDevice.DoesNotExist:
            return Response(
                {'error': 'Device not found'}, 
                status=status.HTTP_404_NOT_FOUND
            )
        except Exception as e:
            logger.error(f"Error updating IoT device: {str(e)}")
            return Response(
                {'error': 'Failed to update device', 'details': str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    def destroy(self, request, pk=None):
        """Delete an IoT device."""
        try:
            device = IoTDevice.objects.get(id=pk)
            device_name = device.name
            device_id = device.device_id
            
            # Log device deletion before deleting
            CarbonAuditLog.objects.create(
                user=request.user,
                action='delete',
                details=f'Deleted IoT device: {device_id} ({device_name})'
            )
            
            device.delete()
            
            return Response({
                'message': f'Device {device_name} deleted successfully'
            }, status=status.HTTP_200_OK)
            
        except IoTDevice.DoesNotExist:
            return Response(
                {'error': 'Device not found'}, 
                status=status.HTTP_404_NOT_FOUND
            )
        except Exception as e:
            logger.error(f"Error deleting IoT device: {str(e)}")
            return Response(
                {'error': 'Failed to delete device', 'details': str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    @action(detail=False, methods=['get'])
    def device_status(self, request):
        """Get status of all IoT devices for an establishment."""
        establishment_id = request.query_params.get('establishment_id')
        
        if not establishment_id:
            return Response(
                {'error': 'establishment_id is required'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        try:
            # Query real IoT devices from database
            devices = IoTDevice.objects.filter(establishment_id=establishment_id)
            
            device_data = []
            for device in devices:
                # Count data points for today
                today = timezone.now().date()
                data_points_today = IoTDataPoint.objects.filter(
                    device=device,
                    timestamp__date=today
                ).count()
                
                # Determine signal strength based on last seen
                signal_strength = 'offline'
                if device.last_seen:
                    time_diff = timezone.now() - device.last_seen
                    if time_diff < timedelta(minutes=5):
                        signal_strength = 'excellent'
                    elif time_diff < timedelta(minutes=15):
                        signal_strength = 'strong'
                    elif time_diff < timedelta(hours=1):
                        signal_strength = 'weak'
                    else:
                        signal_strength = 'offline'
                
                # Build device status object
                device_info = {
                    'device_id': device.device_id,
                    'device_type': device.device_type,
                    'equipment': f"{device.manufacturer} {device.model}".strip() or device.name,
                    'status': device.status,
                    'last_update': device.last_seen.isoformat() if device.last_seen else None,
                    'battery_level': device.battery_level or 0,
                    'signal_strength': signal_strength,
                    'data_points_today': data_points_today,
                    'location': {
                        'lat': float(device.latitude) if device.latitude else None,
                        'lng': float(device.longitude) if device.longitude else None
                    },
                    'name': device.name,
                    'manufacturer': device.manufacturer,
                    'model': device.model,
                    'installed_date': device.installed_date.isoformat(),
                    'needs_maintenance': device.needs_maintenance,
                    'total_data_points': device.total_data_points,
                    'last_data_received': device.last_data_received.isoformat() if device.last_data_received else None
                }
                device_data.append(device_info)
            
            # Calculate summary statistics
            total_devices = len(device_data)
            online_devices = len([d for d in device_data if d['status'] == 'online'])
            offline_devices = len([d for d in device_data if d['status'] == 'offline'])
            maintenance_devices = len([d for d in device_data if d.get('needs_maintenance', False)])
            low_battery_devices = len([d for d in device_data if d['battery_level'] and d['battery_level'] < 20])
            
            return Response({
                'establishment_id': establishment_id,
                'devices': device_data,
                'summary': {
                    'total_devices': total_devices,
                    'online_devices': online_devices,
                    'offline_devices': offline_devices,
                    'maintenance_devices': maintenance_devices,
                    'low_battery_devices': low_battery_devices,
                    'total_data_points_today': sum(d['data_points_today'] for d in device_data)
                },
                'last_updated': timezone.now().isoformat()
            }, status=status.HTTP_200_OK)
            
        except Exception as e:
            logger.error(f"Error fetching IoT device status: {str(e)}")
            return Response(
                {'error': 'Failed to fetch device status', 'details': str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    @action(detail=False, methods=['get'])
    def device_types(self, request):
        """Get available device types for registration."""
        return Response({
            'device_types': [
                {'value': choice[0], 'label': choice[1]} 
                for choice in IoTDevice.DEVICE_TYPES
            ]
        }, status=status.HTTP_200_OK)

    @action(detail=False, methods=['post'])
    def simulate_data(self, request):
        """Simulate IoT data for testing purposes - creates data points that go through the approval workflow."""
        establishment_id = request.data.get('establishment_id')
        device_type = request.data.get('device_type', 'fuel_sensor')
        
        if not establishment_id:
            return Response(
                {'error': 'establishment_id is required'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        try:
            # Verify establishment exists
            try:
                establishment = Establishment.objects.get(id=establishment_id)
            except Establishment.DoesNotExist:
                return Response(
                    {'error': 'Establishment not found'}, 
                    status=status.HTTP_404_NOT_FOUND
                )
            
            if device_type == 'fuel_sensor':
                # Get or create the fuel sensor device
                device, created = IoTDevice.objects.get_or_create(
                    device_id='JD_TRACTOR_SIM_001',
                    establishment=establishment,
                    defaults={
                        'device_type': 'fuel_sensor',
                        'name': 'John Deere 6120M Tractor (Simulator)',
                        'manufacturer': 'John Deere',
                        'model': '6120M',
                        'status': 'online',
                        'battery_level': 85,
                        'signal_strength': 'strong',
                        'latitude': 34.0522,
                        'longitude': -118.2437,
                        'last_maintenance': timezone.now() - datetime.timedelta(days=30)
                    }
                )
                
                # Create realistic fuel consumption data
                fuel_liters = round(12.5 + (timezone.now().hour * 0.8), 2)
                engine_hours = round(timezone.now().hour * 1.2, 1)
                
                simulated_data = {
                    'fuel_liters': fuel_liters,
                    'engine_hours': engine_hours,
                    'fuel_efficiency': round(fuel_liters / max(engine_hours, 0.1), 2),
                    'equipment_type': 'tractor',
                    'operation_type': 'field_operations',
                    'area_covered': round(random.uniform(0.5, 2.0), 1),  # hectares
                    'gps_location': {
                        'lat': 34.0522 + random.uniform(-0.001, 0.001),
                        'lng': -118.2437 + random.uniform(-0.001, 0.001)
                    },
                    'timestamp': timezone.now().isoformat(),
                    'device_id': device.device_id
                }
                
                # Create IoT data point (not carbon entry directly)
                data_point = IoTDataPoint.objects.create(
                    device=device,
                    timestamp=timezone.now(),
                    data=simulated_data,
                    processed=False,  # Will be processed through approval workflow
                    quality_score=0.95,  # High quality simulated data
                    anomaly_detected=False
                )
                
                # Update device stats
                device.increment_data_points()
                
                return Response({
                    'status': 'success',
                    'message': f'Simulated fuel sensor data created: {fuel_liters}L fuel consumption',
                    'data_point_id': data_point.id,
                    'simulated_data': simulated_data,
                    'workflow': 'Data point created - check Pending Events for approval',
                    'note': 'This data will appear in Pending Events and can be approved to create carbon entries'
                }, status=status.HTTP_201_CREATED)
                
            elif device_type == 'weather_station':
                # Get or create the weather station device
                device, created = IoTDevice.objects.get_or_create(
                    device_id='WS_SIM_001',
                    establishment=establishment,
                    defaults={
                        'device_type': 'weather_station',
                        'name': 'Davis Vantage Pro2 (Simulator)',
                        'manufacturer': 'Davis Instruments',
                        'model': 'Vantage Pro2',
                        'status': 'online',
                        'battery_level': 92,
                        'signal_strength': 'excellent',
                        'latitude': 34.0525,
                        'longitude': -118.2435,
                        'last_maintenance': timezone.now() - datetime.timedelta(days=15)
                    }
                )
                
                # Create realistic weather data
                # Realistic weather patterns for California citrus region
                base_temp = 22  # Base temperature in Celsius
                hour = timezone.now().hour
                temp_variation = 8 * math.sin((hour - 6) * math.pi / 12)  # Daily temperature cycle
                temperature = round(base_temp + temp_variation + random.uniform(-2, 2), 1)
                
                # Humidity inversely related to temperature
                humidity = round(70 - (temperature - 20) * 2 + random.uniform(-10, 10), 1)
                humidity = max(20, min(95, humidity))  # Keep within realistic bounds
                
                simulated_data = {
                    'temperature': temperature,
                    'humidity': humidity,
                    'wind_speed': round(random.uniform(5, 25) if 8 <= hour <= 18 else random.uniform(2, 12), 1),
                    'pressure': round(1013 + random.uniform(-15, 15), 1),
                    'solar_radiation': round(random.uniform(0, 1200) if 6 <= hour <= 19 else 0, 1),
                    'rainfall': round(random.uniform(0, 2) if random.random() < 0.1 else 0, 1),  # 10% chance of rain
                    'uv_index': round(random.uniform(0, 11) if 8 <= hour <= 17 else 0, 1),
                    'timestamp': timezone.now().isoformat(),
                    'station_id': device.device_id
                }
                
                # Create IoT data point
                data_point = IoTDataPoint.objects.create(
                    device=device,
                    timestamp=timezone.now(),
                    data=simulated_data,
                    processed=False,
                    quality_score=0.98,  # Very high quality weather data
                    anomaly_detected=False
                )
                
                # Update device stats
                device.increment_data_points()
                
                return Response({
                    'status': 'success',
                    'message': f'Simulated weather station data created: {temperature}°C, {humidity}% humidity',
                    'data_point_id': data_point.id,
                    'simulated_data': simulated_data,
                    'workflow': 'Weather data created - may trigger automation rules',
                    'note': 'Weather data typically triggers recommendations rather than direct carbon entries'
                }, status=status.HTTP_201_CREATED)
            
            else:
                return Response({
                    'error': f'Unsupported device type: {device_type}',
                    'supported_types': ['fuel_sensor', 'weather_station']
                }, status=status.HTTP_400_BAD_REQUEST)
                
        except Exception as e:
            logger.error(f"Error simulating IoT data: {str(e)}")
            return Response({
                'error': 'Failed to simulate IoT data',
                'details': str(e)
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class AutomationRuleViewSet(viewsets.ViewSet):
    """
    ViewSet for managing automation rules that generate events from IoT data.
    """
    permission_classes = [permissions.IsAuthenticated]

    def list(self, request):
        """List automation rules for an establishment."""
        establishment_id = request.query_params.get('establishment_id')
        
        if not establishment_id:
            return Response(
                {'error': 'establishment_id is required'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        try:
            rules = AutomationRule.objects.filter(establishment_id=establishment_id)
            
            rule_data = []
            for rule in rules:
                rule_info = {
                    'id': rule.id,
                    'name': rule.name,
                    'device_type': rule.device_type,
                    'trigger_type': rule.trigger_type,
                    'trigger_config': rule.trigger_config,
                    'action_type': rule.action_type,
                    'action_config': rule.action_config,
                    'is_active': rule.is_active,
                    'last_triggered': rule.last_triggered.isoformat() if rule.last_triggered else None,
                    'trigger_count': rule.trigger_count,
                    'description': rule.description,
                    'created_at': rule.created_at.isoformat()
                }
                rule_data.append(rule_info)
        
            return Response({
                'rules': rule_data,
                'total_count': len(rule_data)
            }, status=status.HTTP_200_OK)
            
        except Exception as e:
            logger.error(f"Error listing automation rules: {str(e)}")
            return Response(
                {'error': 'Failed to list automation rules', 'details': str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    def create(self, request):
        """Create a new automation rule."""
        try:
            data = request.data
            
            # Validate required fields
            required_fields = ['name', 'establishment_id', 'trigger_type', 'trigger_config', 'action_type', 'action_config']
            for field in required_fields:
                if field not in data:
                    return Response(
                        {'error': f'Missing required field: {field}'},
                        status=status.HTTP_400_BAD_REQUEST
                    )

            # Verify establishment exists
            try:
                establishment = Establishment.objects.get(id=data['establishment_id'])
            except Establishment.DoesNotExist:
                return Response(
                    {'error': 'Establishment not found'}, 
                    status=status.HTTP_404_NOT_FOUND
                )
            
            # Create the automation rule
            rule = AutomationRule.objects.create(
                name=data['name'],
                establishment=establishment,
                device_type=data.get('device_type', ''),
                trigger_type=data['trigger_type'],
                trigger_config=data['trigger_config'],
                action_type=data['action_type'],
                action_config=data['action_config'],
                description=data.get('description', ''),
                created_by=request.user,
                is_active=data.get('is_active', True)
            )
            
            # Log rule creation
            CarbonAuditLog.objects.create(
                user=request.user,
                action='create',
                details=f'Created automation rule: {rule.name}'
            )
            
            return Response({
                'id': rule.id,
                'name': rule.name,
                'message': f'Automation rule {rule.name} created successfully'
            }, status=status.HTTP_201_CREATED)
            
        except Exception as e:
            logger.error(f"Error creating automation rule: {str(e)}")
            return Response(
                {'error': 'Failed to create automation rule', 'details': str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    @action(detail=False, methods=['get'])
    def pending_events(self, request):
        """Get pending events that need user approval before creation."""
        establishment_id = request.query_params.get('establishment_id')
        auto_process = request.query_params.get('auto_process', 'true').lower() == 'true'
        
        if not establishment_id:
            return Response(
                {'error': 'establishment_id is required'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        try:
            # Get establishment for automation level checking
            establishment = Establishment.objects.get(id=establishment_id)
            automation_service = AutomationLevelService()
            
            # Get unprocessed IoT data points that could generate events
            unprocessed_data = IoTDataPoint.objects.filter(
                device__establishment_id=establishment_id,
                processed=False,
                timestamp__gte=timezone.now() - timedelta(hours=24)  # Last 24 hours
            ).order_by('-timestamp')[:20]
            
            pending_events = []
            auto_processed_count = 0
            
            for data_point in unprocessed_data:
                device = data_point.device
                
                # Generate event suggestions based on device type and data
                if device.device_type == 'fuel_sensor' and 'fuel_liters' in data_point.data:
                    fuel_liters = data_point.data['fuel_liters']
                    co2e_emissions = fuel_liters * 2.7  # Diesel emission factor
                    
                    # Calculate confidence score based on data quality and patterns
                    confidence = self._calculate_fuel_confidence(data_point, fuel_liters)
                    
                    event_data = {
                        'id': f'fuel_{data_point.id}',
                        'data_point_id': data_point.id,
                        'device_id': device.device_id,
                        'device_name': device.name,
                        'event_type': 'fuel_consumption',
                        'suggested_carbon_entry': {
                            'type': 'emission',
                            'source': f'{device.name} Fuel Consumption',
                            'amount': co2e_emissions,
                            'description': f'Fuel consumption: {fuel_liters}L from {device.name}',
                            'raw_data': data_point.data
                        },
                        'timestamp': data_point.timestamp.isoformat(),
                        'confidence': confidence,
                        'auto_approve_recommended': confidence > 0.9
                    }
                    
                    # Plan-Based Smart Auto-Approval Logic
                    should_auto_approve = automation_service.should_auto_approve_event(data_point, confidence)
                    
                    if auto_process and should_auto_approve:
                        # Auto-approve based on subscription plan automation level
                        try:
                            self._auto_approve_event(data_point, event_data['suggested_carbon_entry'], request.user)
                            auto_processed_count += 1
                            continue  # Don't add to pending list
                        except Exception as e:
                            logger.error(f"Error auto-approving event: {str(e)}")
                            # Fall through to manual approval
                    
                    # Add to pending events for manual approval
                    pending_events.append(event_data)
                
                elif device.device_type == 'soil_moisture' and 'soil_moisture_percent' in data_point.data:
                    moisture = data_point.data['soil_moisture_percent']
                    
                    if moisture < 30:  # Low moisture threshold
                        confidence = self._calculate_moisture_confidence(data_point, moisture)
                        
                        event_data = {
                            'id': f'irrigation_{data_point.id}',
                            'data_point_id': data_point.id,
                            'device_id': device.device_id,
                            'device_name': device.name,
                            'event_type': 'irrigation_needed',
                            'suggested_action': {
                                'type': 'irrigation',
                                'priority': 'high' if moisture < 20 else 'medium',
                                'description': f'Low soil moisture detected: {moisture}% - Irrigation recommended',
                                'estimated_water_needed': '50-100L per hectare'
                            },
                            'timestamp': data_point.timestamp.isoformat(),
                            'confidence': confidence,
                            'auto_approve_recommended': False  # Always require approval for irrigation
                        }
                        
                        pending_events.append(event_data)
                
                elif device.device_type == 'weather_station':
                    # Weather data typically generates recommendations, not carbon entries
                    weather_data = data_point.data
                    recommendations = self._generate_weather_recommendations(weather_data)
                    
                    if recommendations:
                        confidence = 0.85  # Weather recommendations have high confidence
                        
                        event_data = {
                            'id': f'weather_{data_point.id}',
                            'data_point_id': data_point.id,
                            'device_id': device.device_id,
                            'device_name': device.name,
                            'event_type': 'weather_alert',
                            'suggested_action': recommendations[0],  # Take first recommendation
                            'timestamp': data_point.timestamp.isoformat(),
                            'confidence': confidence,
                            'auto_approve_recommended': False  # Weather alerts need human review
                        }
                        
                        pending_events.append(event_data)
            
            # Get automation statistics for the establishment
            automation_stats = automation_service.get_automation_stats_for_establishment(establishment)
            
            return Response({
                'establishment_id': establishment_id,
                'pending_events': pending_events,
                'total_count': len(pending_events),
                'auto_processed_count': auto_processed_count,
                'automation_info': {
                    'target_automation_level': automation_stats['target_automation_level'],
                    'actual_automation_rate': automation_stats['actual_automation_rate'],
                    'carbon_tracking_mode': automation_stats['carbon_tracking_mode'],
                    'compliance_status': automation_stats['compliance_status']
                },
                'workflow_info': {
                    'auto_approval_threshold': 0.9,
                    'manual_approval_threshold': 0.7,
                    'review_threshold': 0.5
                },
                'last_updated': timezone.now().isoformat()
            }, status=status.HTTP_200_OK)
            
        except Exception as e:
            logger.error(f"Error fetching pending events: {str(e)}")
            return Response(
                {'error': 'Failed to fetch pending events', 'details': str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    def _calculate_fuel_confidence(self, data_point, fuel_liters):
        """Calculate confidence score for fuel consumption events."""
        confidence = 0.5  # Base confidence
        
        # Data quality factors
        if data_point.quality_score > 0.9:
            confidence += 0.2
        elif data_point.quality_score > 0.7:
            confidence += 0.1
        
        # Realistic fuel consumption (5-50L per session)
        if 5 <= fuel_liters <= 50:
            confidence += 0.2
        elif fuel_liters > 50:
            confidence -= 0.1  # High consumption needs review
        
        # Device status
        if data_point.device.status == 'online':
            confidence += 0.1
        
        # Time consistency (working hours)
        hour = data_point.timestamp.hour
        if 6 <= hour <= 18:  # Normal working hours
            confidence += 0.1
        
        return min(1.0, confidence)
    
    def _calculate_moisture_confidence(self, data_point, moisture):
        """Calculate confidence score for soil moisture events."""
        confidence = 0.6  # Base confidence for soil data
        
        # Data quality
        if data_point.quality_score > 0.9:
            confidence += 0.15
        
        # Realistic moisture levels
        if 10 <= moisture <= 60:
            confidence += 0.1
        
        # Critical levels get higher confidence
        if moisture < 20:
            confidence += 0.1
        
        return min(1.0, confidence)
    
    def _generate_weather_recommendations(self, weather_data):
        """Generate weather-based recommendations."""
        recommendations = []
        
        temperature = weather_data.get('temperature', 0)
        wind_speed = weather_data.get('wind_speed', 0)
        humidity = weather_data.get('humidity', 50)
        
        # High temperature alert
        if temperature > 35:
            recommendations.append({
                'type': 'weather_alert',
                'priority': 'high',
                'description': f'High temperature alert: {temperature}°C - Consider crop protection measures',
                'suggested_actions': [
                    'Increase irrigation frequency',
                    'Apply shade cloth if available',
                    'Monitor plant stress indicators'
                ]
            })
        
        # High wind alert
        if wind_speed > 25:
            recommendations.append({
                'type': 'weather_alert',
                'priority': 'medium',
                'description': f'High wind alert: {wind_speed} km/h - Avoid chemical applications',
                'suggested_actions': [
                    'Postpone spraying operations',
                    'Secure loose equipment',
                    'Check irrigation systems for damage'
                ]
            })
        
        # Low humidity alert
        if humidity < 30:
            recommendations.append({
                'type': 'weather_alert',
                'priority': 'medium',
                'description': f'Low humidity alert: {humidity}% - Increase irrigation',
                'suggested_actions': [
                    'Increase irrigation duration',
                    'Monitor soil moisture levels',
                    'Consider misting systems'
                ]
            })
        
        return recommendations
    
    def _auto_approve_event(self, data_point, event_data, user):
        """Automatically approve and create carbon entry for high-confidence events."""
        # Find or create a CarbonSource
        source_name = event_data.get('source', 'IoT Device Data')
        carbon_source, created = CarbonSource.objects.get_or_create(
            name=source_name,
            defaults={
                'category': 'equipment',
                'default_emission_factor': 2.7,
                'unit': 'kg CO2e/L',
                'description': f'Auto-created for IoT device: {data_point.device.device_id}'
            }
        )
        
        # Create the carbon entry
        carbon_entry = CarbonEntry.objects.create(
            establishment=data_point.device.establishment,
            type=event_data['type'],
            source=carbon_source,
            amount=event_data['amount'],
            year=timezone.now().year,
            description=event_data['description'],
            iot_device_id=data_point.device.device_id,
            created_by=user
        )
        
        # Mark data point as processed
        data_point.processed = True
        data_point.processed_at = timezone.now()
        data_point.carbon_entry = carbon_entry
        data_point.save()
        
        # Update device stats
        data_point.device.increment_data_points()
        
        # Log the auto-approval
        CarbonAuditLog.objects.create(
            carbon_entry=carbon_entry,
            user=user,
            action='iot_auto_approve',
            details=f'Auto-approved IoT event from {data_point.device.device_id}: {event_data["amount"]:.2f} kg CO2e (confidence: high)'
        )
        
        return carbon_entry

    @action(detail=False, methods=['post'])
    def approve_event(self, request):
        """Approve a pending event and create the carbon entry."""
        try:
            data = request.data
            data_point_id = data.get('data_point_id')
            event_data = data.get('event_data')
            
            if not data_point_id or not event_data:
                return Response(
                    {'error': 'data_point_id and event_data are required'},
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            # Get the data point
            try:
                data_point = IoTDataPoint.objects.get(id=data_point_id)
            except IoTDataPoint.DoesNotExist:
                return Response(
                    {'error': 'Data point not found'}, 
                    status=status.HTTP_404_NOT_FOUND
                )
            
            # Use the same auto-approval logic for manual approvals
            carbon_entry = self._auto_approve_event(data_point, event_data, request.user)
            
            # Update audit log to reflect manual approval
            CarbonAuditLog.objects.filter(
                carbon_entry=carbon_entry,
                action='iot_auto_approve'
            ).update(
                action='iot_manual_approve',
                details=f'Manually approved IoT event from {data_point.device.device_id}: {event_data["amount"]:.2f} kg CO2e'
            )
        
            return Response({
                'carbon_entry_id': carbon_entry.id,
                'message': 'Event approved and carbon entry created successfully',
                'co2e_amount': carbon_entry.amount
            }, status=status.HTTP_201_CREATED)
            
        except Exception as e:
            logger.error(f"Error approving event: {str(e)}")
            return Response(
                {'error': 'Failed to approve event', 'details': str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    @action(detail=False, methods=['post'])
    def reject_event(self, request):
        """Reject a pending event and mark data point as processed without creating entry."""
        try:
            data_point_id = request.data.get('data_point_id')
            reason = request.data.get('reason', 'User rejected')
            
            if not data_point_id:
                return Response(
                    {'error': 'data_point_id is required'},
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            # Get the data point
            try:
                data_point = IoTDataPoint.objects.get(id=data_point_id)
            except IoTDataPoint.DoesNotExist:
                return Response(
                    {'error': 'Data point not found'}, 
                    status=status.HTTP_404_NOT_FOUND
                )
            
            # Mark as processed without creating carbon entry
            data_point.processed = True
            data_point.processed_at = timezone.now()
            data_point.save()
            
            # Log the rejection
            CarbonAuditLog.objects.create(
                user=request.user,
                action='iot_reject',
                details=f'Rejected IoT event from {data_point.device.device_id}: {reason}'
            )
            
            return Response({
                'message': 'Event rejected successfully',
                'reason': reason
            }, status=status.HTTP_200_OK)
            
        except Exception as e:
            logger.error(f"Error rejecting event: {str(e)}")
            return Response(
                {'error': 'Failed to reject event', 'details': str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    @action(detail=False, methods=['get'])
    def automation_stats(self, request):
        """Get automation statistics for an establishment"""
        establishment_id = request.query_params.get('establishment_id')
        days = int(request.query_params.get('days', 30))
        
        if not establishment_id:
            return Response(
                {'error': 'establishment_id is required'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        try:
            establishment = Establishment.objects.get(id=establishment_id)
            automation_service = AutomationLevelService()
            
            stats = automation_service.get_automation_stats_for_establishment(establishment, days)
            
            return Response(stats, status=status.HTTP_200_OK)
            
        except Establishment.DoesNotExist:
            return Response(
                {'error': 'Establishment not found'}, 
                status=status.HTTP_404_NOT_FOUND
            )
        except Exception as e:
            logger.error(f"Error getting automation stats: {str(e)}")
            return Response(
                {'error': 'Failed to get automation statistics', 'details': str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


# Placeholder ViewSets for missing ones referenced in URLs


# John Deere API Integration Views

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def john_deere_auth_start(request):
    """
    Start John Deere OAuth authentication flow.
    
    Returns authorization URL for user to complete OAuth consent.
    """
    try:
        from carbon.services.john_deere_api import get_john_deere_api, is_john_deere_configured
        
        if not is_john_deere_configured():
            return Response({
                'error': 'John Deere API not configured',
                'message': 'Please configure JOHN_DEERE_CLIENT_ID and JOHN_DEERE_CLIENT_SECRET'
            }, status=status.HTTP_503_SERVICE_UNAVAILABLE)
        
        # Generate state parameter for CSRF protection
        state = f"{request.user.id}_{timezone.now().timestamp()}"
        
        api = get_john_deere_api()
        auth_url = api.get_authorization_url(state=state)
        
        # Store state in session for validation
        request.session['john_deere_oauth_state'] = state
        
        return Response({
            'authorization_url': auth_url,
            'state': state,
            'message': 'Redirect user to authorization_url to complete OAuth flow'
        })
        
    except Exception as e:
        logger.error(f"Failed to start John Deere OAuth: {e}")
        return Response({
            'error': 'OAuth initialization failed',
            'message': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def john_deere_auth_callback(request):
    """
    Handle John Deere OAuth callback and exchange code for token.
    
    Expected query parameters:
    - code: Authorization code from John Deere
    - state: State parameter for CSRF protection
    """
    try:
        from carbon.services.john_deere_api import get_john_deere_api
        
        # Get parameters from callback
        authorization_code = request.GET.get('code')
        state = request.GET.get('state')
        error = request.GET.get('error')
        
        if error:
            return Response({
                'error': 'OAuth authorization failed',
                'message': f'John Deere returned error: {error}'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        if not authorization_code:
            return Response({
                'error': 'Missing authorization code',
                'message': 'No authorization code received from John Deere'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # Validate state parameter
        expected_state = request.session.get('john_deere_oauth_state')
        if not state or state != expected_state:
            return Response({
                'error': 'Invalid state parameter',
                'message': 'CSRF protection failed - invalid state'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # Exchange code for token
        api = get_john_deere_api()
        token_data = api.exchange_code_for_token(authorization_code)
        
        # Clean up session
        if 'john_deere_oauth_state' in request.session:
            del request.session['john_deere_oauth_state']
        
        return Response({
            'success': True,
            'message': 'John Deere authentication successful',
            'token_expires_in': token_data.get('expires_in'),
            'next_step': 'Call /carbon/john-deere/sync-devices/ to sync your equipment'
        })
        
    except Exception as e:
        logger.error(f"Failed to complete John Deere OAuth: {e}")
        return Response({
            'error': 'OAuth completion failed',
            'message': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def john_deere_sync_devices(request):
    """
    Sync John Deere machines with IoT devices.
    
    This endpoint fetches machines from John Deere API and creates/updates
    corresponding IoT device records.
    """
    try:
        from carbon.services.john_deere_api import get_john_deere_api
        from carbon.models import IoTDevice
        
        establishment_id = request.data.get('establishment_id')
        if not establishment_id:
            return Response({
                'error': 'establishment_id is required'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        try:
            establishment = Establishment.objects.get(id=establishment_id)
        except Establishment.DoesNotExist:
            return Response({
                'error': 'Establishment not found'
            }, status=status.HTTP_404_NOT_FOUND)
        
        api = get_john_deere_api()
        
        # Get organizations (farms) from John Deere
        organizations = api.get_organizations()
        if not organizations:
            return Response({
                'error': 'No John Deere organizations found',
                'message': 'Make sure your John Deere account has access to farm data'
            }, status=status.HTTP_404_NOT_FOUND)
        
        synced_devices = []
        errors = []
        
        # Sync machines from all organizations
        for org in organizations:
            org_id = org.get('id')
            machines = api.get_machines(org_id)
            
            for machine in machines:
                try:
                    machine_id = machine.get('id')
                    machine_name = machine.get('name', f"Machine {machine_id}")
                    machine_model = machine.get('model', '')
                    
                    # Create or update IoT device
                    device, created = IoTDevice.objects.get_or_create(
                        john_deere_machine_id=machine_id,
                        establishment=establishment,
                        defaults={
                            'device_id': f"jd_{machine_id}",
                            'device_type': 'fuel_sensor',  # Default type for John Deere equipment
                            'name': machine_name,
                            'manufacturer': 'John Deere',
                            'model': machine_model,
                            'api_connection_status': 'pending'
                        }
                    )
                    
                    # Sync machine status with device
                    sync_success = api.sync_machine_with_iot_device(machine_id, device)
                    
                    synced_devices.append({
                        'device_id': device.device_id,
                        'machine_id': machine_id,
                        'name': machine_name,
                        'created': created,
                        'sync_success': sync_success,
                        'status': device.status
                    })
                    
                except Exception as e:
                    errors.append({
                        'machine_id': machine.get('id'),
                        'error': str(e)
                    })
        
        return Response({
            'success': True,
            'message': f'Synced {len(synced_devices)} devices',
            'synced_devices': synced_devices,
            'errors': errors if errors else None,
            'organizations_found': len(organizations)
        })
        
    except Exception as e:
        logger.error(f"Failed to sync John Deere devices: {e}")
        return Response({
            'error': 'Device sync failed',
            'message': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def weather_current_conditions(request):
    """
    Get current weather conditions for an establishment.
    
    Query Parameters:
    - establishment_id: ID of the establishment
    - lat: Latitude (optional, overrides establishment location)
    - lng: Longitude (optional, overrides establishment location)
    """
    try:
        establishment_id = request.GET.get('establishment_id')
        lat = request.GET.get('lat')
        lng = request.GET.get('lng')
        
        if not establishment_id and not (lat and lng):
            return Response({
                'error': 'Either establishment_id or lat/lng coordinates required'
            }, status=400)
        
        # Get coordinates from establishment if not provided
        if not (lat and lng):
            try:
                establishment = Establishment.objects.get(id=establishment_id)
                lat = establishment.latitude
                lng = establishment.longitude
                
                if not (lat and lng):
                    return Response({
                        'error': 'Establishment does not have location coordinates'
                    }, status=400)
            except Establishment.DoesNotExist:
                return Response({
                    'error': 'Establishment not found'
                }, status=404)
        
        # Get weather data
        weather_service = get_weather_service()
        weather_data = weather_service.get_current_conditions(float(lat), float(lng))
        
        return Response({
            'status': 'success',
            'establishment_id': establishment_id,
            'location': {'lat': float(lat), 'lng': float(lng)},
            'weather': weather_data,
            'timestamp': timezone.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Weather conditions error: {e}")
        return Response({
            'error': f'Failed to get weather conditions: {str(e)}'
        }, status=500)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def weather_alerts(request):
    """
    Get active weather alerts for an establishment.
    
    Query Parameters:
    - establishment_id: ID of the establishment
    - lat: Latitude (optional, overrides establishment location)
    - lng: Longitude (optional, overrides establishment location)
    """
    try:
        establishment_id = request.GET.get('establishment_id')
        lat = request.GET.get('lat')
        lng = request.GET.get('lng')
        
        if not establishment_id and not (lat and lng):
            return Response({
                'error': 'Either establishment_id or lat/lng coordinates required'
            }, status=400)
        
        # Get coordinates from establishment if not provided
        if not (lat and lng):
            try:
                establishment = Establishment.objects.get(id=establishment_id)
                lat = establishment.latitude
                lng = establishment.longitude
                
                if not (lat and lng):
                    return Response({
                        'error': 'Establishment does not have location coordinates'
                    }, status=400)
            except Establishment.DoesNotExist:
                return Response({
                    'error': 'Establishment not found'
                }, status=404)
        
        # Get weather alerts
        alerts = check_weather_alerts(float(lat), float(lng))
        
        return Response({
            'status': 'success',
            'establishment_id': establishment_id,
            'location': {'lat': float(lat), 'lng': float(lng)},
            'alerts': alerts,
            'alert_count': len(alerts),
            'timestamp': timezone.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Weather alerts error: {e}")
        return Response({
            'error': f'Failed to get weather alerts: {str(e)}'
        }, status=500)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def weather_recommendations(request):
    """
    Get agricultural recommendations based on current weather conditions.
    
    Query Parameters:
    - establishment_id: ID of the establishment
    - lat: Latitude (optional, overrides establishment location)
    - lng: Longitude (optional, overrides establishment location)
    - establishment_type: Type of agricultural operation (optional)
    """
    try:
        establishment_id = request.GET.get('establishment_id')
        lat = request.GET.get('lat')
        lng = request.GET.get('lng')
        establishment_type = request.GET.get('establishment_type')
        
        if not establishment_id and not (lat and lng):
            return Response({
                'error': 'Either establishment_id or lat/lng coordinates required'
            }, status=400)
        
        # Get coordinates and type from establishment if not provided
        if not (lat and lng) or not establishment_type:
            try:
                establishment = Establishment.objects.get(id=establishment_id)
                if not (lat and lng):
                    lat = establishment.latitude
                    lng = establishment.longitude
                
                if not establishment_type:
                    establishment_type = getattr(establishment, 'establishment_type', 'general')
                
                if not (lat and lng):
                    return Response({
                        'error': 'Establishment does not have location coordinates'
                    }, status=400)
            except Establishment.DoesNotExist:
                return Response({
                    'error': 'Establishment not found'
                }, status=404)
        
        # Get agricultural recommendations
        recommendations = get_agricultural_recommendations(
            float(lat), 
            float(lng), 
            establishment_type
        )
        
        # Categorize recommendations by priority
        critical_recommendations = [r for r in recommendations if r.get('priority') == 'critical']
        high_recommendations = [r for r in recommendations if r.get('priority') == 'high']
        medium_recommendations = [r for r in recommendations if r.get('priority') == 'medium']
        low_recommendations = [r for r in recommendations if r.get('priority') == 'low']
        
        return Response({
            'status': 'success',
            'establishment_id': establishment_id,
            'location': {'lat': float(lat), 'lng': float(lng)},
            'establishment_type': establishment_type,
            'recommendations': {
                'critical': critical_recommendations,
                'high': high_recommendations,
                'medium': medium_recommendations,
                'low': low_recommendations,
                'total_count': len(recommendations)
            },
            'summary': {
                'critical_count': len(critical_recommendations),
                'high_count': len(high_recommendations),
                'medium_count': len(medium_recommendations),
                'low_count': len(low_recommendations),
                'requires_immediate_action': len(critical_recommendations) + len(high_recommendations) > 0
            },
            'timestamp': timezone.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Weather recommendations error: {e}")
        return Response({
            'error': f'Failed to get weather recommendations: {str(e)}'
        }, status=500)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def weather_create_alert_event(request):
    """
    Create an IoT event based on weather conditions and recommendations.
    
    This endpoint allows automatic creation of weather-based events
    that can trigger carbon calculations and recommendations.
    """
    try:
        data = request.data
        establishment_id = data.get('establishment_id')
        weather_data = data.get('weather_data')
        recommendations = data.get('recommendations', [])
        
        if not establishment_id:
            return Response({
                'error': 'establishment_id is required'
            }, status=400)
        
        if not weather_data:
            return Response({
                'error': 'weather_data is required'
            }, status=400)
        
        try:
            establishment = Establishment.objects.get(id=establishment_id)
        except Establishment.DoesNotExist:
            return Response({
                'error': 'Establishment not found'
            }, status=404)
        
        # Create weather alert event
        event_data = {
            'establishment_id': establishment_id,
            'event_type': 'weather_alert',
            'description': f"Weather alert: {weather_data.get('description', 'Weather conditions require attention')}",
            'metadata': {
                'weather_conditions': weather_data,
                'recommendations': recommendations,
                'alert_type': 'automated_weather_monitoring',
                'source': 'weather_api'
            },
            'confidence': 0.85,  # High confidence for weather data
            'requires_approval': len([r for r in recommendations if r.get('priority') in ['critical', 'high']]) > 0
        }
        
        # Create IoT data point for weather event
        device, created = IoTDevice.objects.get_or_create(
            establishment=establishment,
            name=f"Weather Station - {establishment.name}",
            defaults={
                'device_type': 'weather_station',
                'status': 'online',
                'battery_level': 100,
                'last_seen': timezone.now()
            }
        )
        
        data_point = IoTDataPoint.objects.create(
            device=device,
            data_type='weather_alert',
            value=json.dumps(weather_data),
            quality_score=0.9,  # High quality for official weather data
            metadata=event_data['metadata'],
            confidence=event_data['confidence']
        )
        
        # Process through unified IoT workflow
        if event_data['confidence'] > 0.9 and not event_data['requires_approval']:
            # Auto-approve weather events with high confidence
            # Note: Weather events typically don't create carbon entries directly
            # but may trigger recommendations for carbon-reducing actions
            logger.info(f"Auto-approved weather event for establishment {establishment_id}")
            
        return Response({
            'status': 'success',
            'message': 'Weather alert event created successfully',
            'data_point_id': data_point.id,
            'device_id': device.id,
            'requires_approval': event_data['requires_approval'],
            'confidence': event_data['confidence'],
            'recommendations_count': len(recommendations)
        }, status=201)
        
    except Exception as e:
        logger.error(f"Weather alert event creation error: {e}")
        return Response({
            'error': f'Failed to create weather alert event: {str(e)}'
        }, status=500)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def weather_forecast(request):
    """
    Get weather forecast for an establishment.
    
    Query Parameters:
    - establishment_id: ID of the establishment
    - lat: Latitude (optional, overrides establishment location)
    - lng: Longitude (optional, overrides establishment location)
    - days: Number of days to forecast (default: 7, max: 14)
    """
    try:
        establishment_id = request.GET.get('establishment_id')
        lat = request.GET.get('lat')
        lng = request.GET.get('lng')
        days = int(request.GET.get('days', 7))
        
        # Limit forecast days
        days = min(days, 14)
        
        if not establishment_id and not (lat and lng):
            return Response({
                'error': 'Either establishment_id or lat/lng coordinates required'
            }, status=400)
        
        # Get coordinates from establishment if not provided
        if not (lat and lng):
            try:
                establishment = Establishment.objects.get(id=establishment_id)
                lat = establishment.latitude
                lng = establishment.longitude
                
                if not (lat and lng):
                    return Response({
                        'error': 'Establishment does not have location coordinates'
                    }, status=400)
            except Establishment.DoesNotExist:
                return Response({
                    'error': 'Establishment not found'
                }, status=404)
        
        # Get weather forecast
        weather_service = get_weather_service()
        forecast_data = weather_service.get_forecast(float(lat), float(lng), days)
        
        return Response({
            'status': 'success',
            'establishment_id': establishment_id,
            'location': {'lat': float(lat), 'lng': float(lng)},
            'forecast': forecast_data,
            'forecast_days': days,
            'timestamp': timezone.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Weather forecast error: {e}")
        return Response({
            'error': f'Failed to get weather forecast: {str(e)}'
        }, status=500)


class BlockchainVerificationViewSet(viewsets.ViewSet):
    """
    ViewSet for blockchain-based carbon verification and credit management.
    """
    permission_classes = [permissions.IsAuthenticated]

    @action(detail=False, methods=['post'], url_path='verify-production')
    def verify_production(self, request):
        """
        Create blockchain verification record for a production's carbon data.
        """
        try:
            production_id = request.data.get('production_id')
            producer_id = request.data.get('producer_id')
            crop_type = request.data.get('crop_type', 'general')
            
            if not production_id:
                return Response({
                    'error': 'production_id is required'
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # Get carbon data for the production
            try:
                production = History.objects.get(id=production_id)
            except History.DoesNotExist:
                return Response({
                    'error': 'Production not found'
                }, status=status.HTTP_404_NOT_FOUND)
            
            # Get carbon summary data
            public_view = PublicProductionViewSet()
            carbon_data = public_view._calculate_carbon_summary(production_id)
            
            # Add additional data needed for blockchain
            carbon_data.update({
                'production_id': production_id,
                'producer_id': producer_id or production.establishment.id,
                'crop_type': crop_type,
                'timestamp': int(timezone.now().timestamp())
            })
            
            # Create blockchain record
            blockchain_result = blockchain_service.create_carbon_record(production_id, carbon_data)
            
            if blockchain_result.get('blockchain_verified'):
                return Response({
                    'status': 'success',
                    'message': 'Production verified on blockchain',
                    'verification_data': blockchain_result,
                    'carbon_data': carbon_data
                }, status=status.HTTP_201_CREATED)
            else:
                return Response({
                    'status': 'partial_success',
                    'message': 'Verification completed in mock mode',
                    'verification_data': blockchain_result,
                    'carbon_data': carbon_data
                }, status=status.HTTP_200_OK)
                
        except Exception as e:
            logger.error(f"Blockchain verification error: {e}")
            return Response({
                'error': f'Failed to verify production: {str(e)}'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @action(detail=False, methods=['get'], url_path='verify-record/(?P<production_id>[^/.]+)')
    def verify_record(self, request, production_id=None):
        """
        Verify existing blockchain record for a production.
        """
        try:
            if not production_id:
                return Response({
                    'error': 'production_id is required'
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # Verify record on blockchain
            verification_result = blockchain_service.verify_carbon_record(int(production_id))
            
            return Response({
                'status': 'success',
                'production_id': production_id,
                'verification': verification_result
            })
            
        except Exception as e:
            logger.error(f"Record verification error: {e}")
            return Response({
                'error': f'Failed to verify record: {str(e)}'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @action(detail=False, methods=['get'], url_path='compliance-check/(?P<production_id>[^/.]+)')
    def compliance_check(self, request, production_id=None):
        """
        Check USDA compliance status for a production.
        """
        try:
            if not production_id:
                return Response({
                    'error': 'production_id is required'
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # Check compliance on blockchain
            compliance_result = blockchain_service.check_compliance(int(production_id))
            
            return Response({
                'status': 'success',
                'production_id': production_id,
                'compliance': compliance_result
            })
            
        except Exception as e:
            logger.error(f"Compliance check error: {e}")
            return Response({
                'error': f'Failed to check compliance: {str(e)}'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @action(detail=False, methods=['post'], url_path='issue-credits')
    def issue_credits(self, request):
        """
        Issue carbon credits for verified sustainable practices.
        """
        try:
            production_id = request.data.get('production_id')
            credits_amount = request.data.get('credits_amount')
            
            if not production_id or not credits_amount:
                return Response({
                    'error': 'production_id and credits_amount are required'
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # Issue credits on blockchain
            credits_result = blockchain_service.issue_carbon_credits(
                int(production_id), 
                float(credits_amount)
            )
            
            return Response({
                'status': 'success',
                'message': 'Carbon credits issued successfully',
                'credits': credits_result
            })
            
        except Exception as e:
            logger.error(f"Credits issuance error: {e}")
            return Response({
                'error': f'Failed to issue credits: {str(e)}'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @action(detail=False, methods=['get'], url_path='summary/(?P<production_id>[^/.]+)')
    def blockchain_summary(self, request, production_id=None):
        """
        Get comprehensive carbon summary with blockchain verification.
        """
        try:
            if not production_id:
                return Response({
                    'error': 'production_id is required'
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # Get comprehensive summary with blockchain data
            summary = blockchain_service.get_carbon_summary_with_blockchain(int(production_id))
            
            return Response({
                'status': 'success',
                'production_id': production_id,
                'summary': summary
            })
            
        except Exception as e:
            logger.error(f"Blockchain summary error: {e}")
            return Response({
                'error': f'Failed to get blockchain summary: {str(e)}'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @action(detail=False, methods=['post'], url_path='batch-process')
    def batch_process(self, request):
        """
        Process multiple productions for blockchain verification.
        """
        try:
            production_ids = request.data.get('production_ids', [])
            
            if not production_ids or not isinstance(production_ids, list):
                return Response({
                    'error': 'production_ids list is required'
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # Process batch
            batch_result = blockchain_service.batch_process_carbon_entries(production_ids)
            
            return Response({
                'status': 'success',
                'message': 'Batch processing completed',
                'results': batch_result
            })
            
        except Exception as e:
            logger.error(f"Batch processing error: {e}")
            return Response({
                'error': f'Failed to process batch: {str(e)}'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_production_carbon_economics(request, production_id):
    """
    Get cached carbon economics without triggering USDA API calls
    
    Returns carbon credit potential, efficiency tips, and premium pricing eligibility
    using cached carbon data to avoid performance issues.
    """
    try:
        # Verify user has access to this production
        production = History.objects.get(
            id=production_id,
            parcel__establishment__company__owner=request.user
        )
        
        # Use cached carbon data from CarbonEntry instead of real-time calculations
        from carbon.models import CarbonEntry
        from django.db.models import Sum
        
        carbon_entries = CarbonEntry.objects.filter(production=production)
        
        if not carbon_entries.exists():
            return Response({
                'success': True,
                'production_id': production_id,
                'data': {
                    'carbon_credit_potential': {'credits_available': 0, 'estimated_value': 0, 'market_rate': 25.0},
                    'efficiency_tips': ['Add events to calculate carbon impact'],
                    'premium_eligibility': {'eligible': False, 'premium_percentage': '0%'},
                    'next_actions': ['Create agricultural events to track carbon footprint']
                },
                'cache_used': True,
                'timestamp': timezone.now().isoformat()
            })
        
        # Calculate economics from cached data
        total_emissions = carbon_entries.aggregate(
            total=Sum('co2e_amount')
        )['total'] or 0
        
        total_offsets = carbon_entries.filter(
            co2e_amount__lt=0
        ).aggregate(
            total=Sum('co2e_amount')
        )['total'] or 0
        
        # Simple economics calculation without USDA API calls
        economics_data = {
            'carbon_credit_potential': {
                'credits_available': abs(total_offsets) * 0.8,  # 80% of offsets eligible
                'estimated_value': abs(total_offsets) * 25.0,   # $25/ton
                'market_rate': 25.0
            },
            'efficiency_tips': [
                'Optimize nitrogen application timing',
                'Consider cover crops for soil health',
                'Evaluate precision agriculture tools'
            ],
            'premium_eligibility': {
                'eligible': total_emissions < 1000,  # Simple threshold
                'premium_percentage': '10-15%' if total_emissions < 1000 else '5-10%'
            },
            'next_actions': [
                'Review carbon calculation accuracy',
                'Consider additional offset opportunities'
            ]
        }
        
        return Response({
            'success': True,
            'production_id': production_id,
            'production_name': production.name,
            'data': economics_data,
            'cache_used': True,
            'timestamp': timezone.now().isoformat()
        })
        
    except History.DoesNotExist:
        return Response({
            'success': False,
            'error': 'Production not found or access denied'
        }, status=404)
    except Exception as e:
        logger.error(f"Error getting cached carbon economics: {e}")
        return Response({
            'success': False,
            'error': str(e)
        }, status=500)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_establishment_carbon_summary(request, establishment_id):
    """
    Get carbon cost summary for entire establishment
    
    Provides overview of carbon credit potential across all productions
    in the establishment.
    """
    try:
        # Verify user has access to this establishment
        from company.models import Establishment
        establishment = Establishment.objects.get(
            id=establishment_id,
            company__owner=request.user
        )
        
        insights_service = CarbonCostInsights()
        summary_data = insights_service.get_establishment_carbon_summary(establishment_id)
        
        return Response({
            'success': True,
            'establishment_id': establishment_id,
            'data': summary_data
        })
        
    except Establishment.DoesNotExist:
        return Response({
            'success': False,
            'error': 'Establishment not found or access denied'
        }, status=404)
    except Exception as e:
        return Response({
            'success': False,
            'error': str(e)
        }, status=500)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_carbon_credit_potential(request, production_id):
    """
    Get simple carbon credit potential for a production
    
    Lightweight endpoint for just carbon credit calculations
    without the full economics data.
    """
    try:
        production = History.objects.get(
            id=production_id,
            parcel__establishment__company__owner=request.user
        )
        
        insights_service = CarbonCostInsights()
        credit_data = insights_service.calculate_carbon_credit_potential(production)
        
        return Response({
            'success': True,
            'production_id': production_id,
            'carbon_credits': credit_data
        })
        
    except History.DoesNotExist:
        return Response({
            'success': False,
            'error': 'Production not found or access denied'
        }, status=404)
    except Exception as e:
        return Response({
            'success': False,
            'error': str(e)
        }, status=500)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_crop_templates(request):
    """Get available production templates from database"""
    try:
        # Get crop type filter if provided
        crop_type_id = request.GET.get('crop_type')
        
        queryset = ProductionTemplate.objects.filter(is_active=True)
        
        if crop_type_id:
            queryset = queryset.filter(crop_type_id=crop_type_id)
        
        # Transform data for frontend consumption
        crop_templates = []
        for template in queryset:
            events_count = template.event_templates.count()
            
            template_data = {
                'id': template.crop_type.slug,  # Keep backward compatibility
                'template_id': template.id,     # New field for actual template ID
                'name': template.name,
                'crop_type': template.crop_type.category.lower().replace(' ', '_'),
                'crop_type_name': template.crop_type.name,
                'description': template.description,
                'events_count': events_count,
                'carbon_potential': float(template.projected_emissions_reduction) if template.projected_emissions_reduction else 0,
                'avg_revenue': 1200.0,  # Default estimated cost per acre
                'setup_time_minutes': 8,  # Estimated time savings
                'usage_count': template.usage_count,
                'carbon_benchmark': {
                    'emissions_range': f"0-1200 USD/acre",
                    'industry_average': 1200.0,
                    'best_practice': 960.0
                },
                'events_preview': [
                    {
                        'name': event.name,
                        'type': event.event_type,
                        'timing': event.timing,
                        'carbon_impact': float(event.carbon_impact) if event.carbon_impact else 0
                    }
                    for event in template.event_templates.all()[:3]  # First 3 events
                ],
                'sustainability_practices': [],  # Will be populated from template data
                'roi_projection': {
                    'carbon_credits_value': float(template.projected_emissions_reduction) * 15 if template.projected_emissions_reduction else 0,
                    'premium_pricing': template.premium_pricing_potential,
                    'cost_savings': '15-25%'
                },
                'system_type': template.farming_approach,
                'management_intensity': template.complexity_level,
                'is_verified': template.usda_reviewed,
                'source': template.compliance_notes
            }
            crop_templates.append(template_data)
        
        # Sort by popularity and carbon potential
        crop_templates.sort(key=lambda x: (x['usage_count'], x['carbon_potential']), reverse=True)
        
        return Response({
            'templates': crop_templates,
            'total_count': len(crop_templates),
            'categories': list(set(t['crop_type'] for t in crop_templates)),
            'metadata': {
                'generated_at': timezone.now().isoformat(),
                'version': '2.0',
                'source': 'USDA-verified database templates'
            }
        }, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"Error loading production templates: {str(e)}")
        return Response({
            'error': 'Failed to load production templates',
            'detail': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_crop_template_detail(request, template_id):
    """Get detailed information for a specific production template"""
    try:
        # Try to find template by crop type slug first (backward compatibility)
        template = None
        try:
            crop_type = CropType.objects.get(slug=template_id)
            template = ProductionTemplate.objects.filter(
                crop_type=crop_type, 
                is_active=True
            ).first()
        except CropType.DoesNotExist:
            # Try to find by template ID directly
            try:
                template = ProductionTemplate.objects.get(id=template_id, is_active=True)
            except (ProductionTemplate.DoesNotExist, ValueError):
                pass
        
        if not template:
            return Response({
                'error': f'Template {template_id} not found'
            }, status=status.HTTP_404_NOT_FOUND)
        
        # Get all events for this template
        events = template.event_templates.all().order_by('order_sequence')
        
        events_data = []
        for event in events:
            event_info = {
                'id': event.id,
                'name': event.name,
                'event_type': event.event_type,
                'description': event.description,
                'timing': event.timing,
                'order_sequence': event.order_sequence,
                'carbon_impact': float(event.carbon_impact) if event.carbon_impact else 0,
                'cost_estimate': float(event.cost_estimate) if event.cost_estimate else 0,
                'labor_hours': float(event.labor_hours) if event.labor_hours else 0,
                'usda_practice_code': event.usda_practice_code,
                'is_required': event.is_required,
                'typical_amounts': event.typical_amounts,
                'efficiency_tips': event.efficiency_tips or ''
            }
            events_data.append(event_info)
        
        # Get related carbon sources (if any)
        carbon_sources = []
        
        # Get USDA benchmark if available
        benchmark_data = None
        try:
            benchmark = CarbonBenchmark.objects.filter(crop_type=template.crop_type.name).first()
            if benchmark:
                benchmark_data = {
                    'crop_type': benchmark.crop_type,
                    'region': benchmark.region,
                    'average_emissions': benchmark.average_emissions,
                    'min_emissions': benchmark.min_emissions,
                    'max_emissions': benchmark.max_emissions,
                    'usda_verified': benchmark.usda_verified
                }
        except:
            pass
        
        detailed_template = {
            'id': template_id,
            'template_id': template.id,
            'name': template.name,
            'description': template.description,
            'crop_type': template.crop_type.category.lower().replace(' ', '_'),
            'crop_type_name': template.crop_type.name,
            'system_type': template.farming_approach,
            'management_intensity': template.complexity_level,
            'irrigation_system': 'drip',  # Default
            'fertility_program': 'balanced',  # Default
            'pest_management': 'integrated',  # Default
            'events': events_data,
            'carbon_sources': carbon_sources,
            'benchmark': benchmark_data,
            'carbon_credit_potential': float(template.projected_emissions_reduction) if template.projected_emissions_reduction else 0,
            'estimated_revenue': 1200.0,  # Default estimated cost per acre
            'sustainability_opportunities': [],  # Will be populated from template data
            'efficiency_tips': [event['efficiency_tips'] for event in events_data if event['efficiency_tips']],
            'premium_pricing_potential': '10-25%',
            'typical_costs': 1200.0,  # Default estimated cost per acre
            'target_yield': {'estimate': '400-600 boxes/acre'},  # Default
            'labor_hours_per_acre': 25.0,  # Default
            'sustainability_score': 75,  # Default
            'source': template.compliance_notes,
            'is_verified': template.usda_reviewed,
            'roi_analysis': {
                'setup_time_saved': '37 minutes',
                'carbon_credits_annual': float(template.projected_emissions_reduction) if template.projected_emissions_reduction else 0,
                'premium_pricing': '10-25%',
                'efficiency_savings': '15-25%'
            }
        }
        
        return Response(detailed_template, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"Error loading template detail {template_id}: {str(e)}")
        return Response({
            'error': 'Failed to load template details',
            'detail': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['POST'])
def calculate_event_impact(request):
    """
    Calculate carbon impact for a specific event.
    Enhanced with regional USDA factors and benchmark comparisons.
    """
    try:
        event_id = request.data.get('event_id')
        event_type = request.data.get('event_type', 'chemical')  # Default to chemical
        
        if not event_id:
            return Response(
                {'error': 'event_id is required'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Get the appropriate event based on type
        event = None
        if event_type == 'chemical':
            event = get_object_or_404(ChemicalEvent, id=event_id)
        elif event_type == 'production':
            event = get_object_or_404(ProductionEvent, id=event_id)
        elif event_type == 'weather':
            event = get_object_or_404(WeatherEvent, id=event_id)
        elif event_type == 'equipment':
            event = get_object_or_404(EquipmentEvent, id=event_id)
        elif event_type == 'soil':
            event = get_object_or_404(SoilManagementEvent, id=event_id)
        elif event_type == 'pest':
            event = get_object_or_404(PestManagementEvent, id=event_id)
        elif event_type == 'general':
            event = get_object_or_404(GeneralEvent, id=event_id)
        else:
            return Response(
                {'error': f'Unsupported event type: {event_type}'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        calculator = EventCarbonCalculator()
        
        # Calculate carbon impact based on event type
        if isinstance(event, ChemicalEvent):
            result = calculator.calculate_chemical_event_impact(event)
        elif isinstance(event, ProductionEvent):
            result = calculator.calculate_production_event_impact(event)
        elif isinstance(event, WeatherEvent):
            result = calculator.calculate_weather_event_impact(event)
        elif isinstance(event, EquipmentEvent):
            result = calculator.calculate_equipment_event_impact(event)
        elif isinstance(event, SoilManagementEvent):
            result = calculator.calculate_soil_management_event_impact(event)
        elif isinstance(event, PestManagementEvent):
            result = calculator.calculate_pest_management_event_impact(event)
        elif isinstance(event, GeneralEvent):
            result = calculator.calculate_business_event_impact(event)
        else:
            return Response(
                {'error': f'Unsupported event instance: {type(event)}'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Add event metadata
        result.update({
            'event_id': event.id,
            'event_type': event_type,
            'timestamp': event.date.isoformat() if event.date else None,
        })
        
        return Response(result, status=status.HTTP_200_OK)
        
    except (ChemicalEvent.DoesNotExist, ProductionEvent.DoesNotExist, 
            WeatherEvent.DoesNotExist, EquipmentEvent.DoesNotExist,
            SoilManagementEvent.DoesNotExist, PestManagementEvent.DoesNotExist,
            GeneralEvent.DoesNotExist):
        return Response(
            {'error': 'Event not found'}, 
            status=status.HTTP_404_NOT_FOUND
        )
    except Exception as e:
        logger.error(f"Error calculating event impact: {str(e)}")
        return Response(
            {'error': 'Internal server error'}, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['GET'])
def get_usda_credibility_info(request, establishment_id):
    """
    Get USDA credibility information for consumer-facing displays.
    Shows how the establishment's carbon data uses USDA factors.
    """
    try:
        establishment = get_object_or_404(Establishment, id=establishment_id)
        enhanced_usda = EnhancedUSDAFactors()
        
        # Get credibility data
        credibility_data = enhanced_usda.get_usda_credibility_data(establishment)
        
        # Add establishment context
        credibility_data.update({
            'establishment_name': establishment.name,
            'establishment_location': f"{getattr(establishment, 'city', 'Unknown')}, {getattr(establishment, 'state', 'Unknown')}",
            'regional_optimization': credibility_data.get('regional_specificity', False)
        })
        
        return Response(credibility_data, status=status.HTTP_200_OK)
        
    except Establishment.DoesNotExist:
        return Response(
            {'error': 'Establishment not found'}, 
            status=status.HTTP_404_NOT_FOUND
        )
    except Exception as e:
        logger.error(f"Error getting USDA credibility info: {str(e)}")
        return Response(
            {'error': 'Internal server error'}, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['GET'])
def get_regional_benchmark(request, establishment_id):
    """
    Get regional benchmark comparison for an establishment.
    Compares establishment performance to USDA regional averages.
    """
    try:
        establishment = get_object_or_404(Establishment, id=establishment_id)
        enhanced_usda = EnhancedUSDAFactors()
        
        # Get establishment's recent carbon performance (simplified)
        # In a real implementation, this would aggregate recent events
        farm_carbon_intensity = float(request.GET.get('carbon_intensity', 1.0))
        crop_type = request.GET.get('crop_type', 'tree_fruit')
        
        # Extract state from establishment location
        location = getattr(establishment, 'location', '')
        state = 'CA'  # Default to California
        
        if location:
            location_upper = location.upper()
            # Common state mappings
            state_mappings = {
                'CALIFORNIA': 'CA', 'CA': 'CA',
                'IOWA': 'IA', 'IA': 'IA', 
                'ILLINOIS': 'IL', 'IL': 'IL',
                'FLORIDA': 'FL', 'FL': 'FL',
                'TEXAS': 'TX', 'TX': 'TX',
                'NEBRASKA': 'NE', 'NE': 'NE',
                'KANSAS': 'KS', 'KS': 'KS'
            }
            
            # Check for state names or codes in the location string
            for state_name, state_code in state_mappings.items():
                if state_name in location_upper:
                    state = state_code
                    break
            
            # Check for common California cities/regions if no state found
            if state == 'CA':  # Still default
                ca_indicators = ['FRESNO', 'SACRAMENTO', 'BAKERSFIELD', 'MODESTO', 'STOCKTON', 
                                'SALINAS', 'SANTA', 'SAN', 'LOS ANGELES', 'RIVERSIDE', 'CENTRAL VALLEY']
                if any(indicator in location_upper for indicator in ca_indicators):
                    state = 'CA'
        
        # Get benchmark comparison
        benchmark = enhanced_usda.get_usda_benchmark_comparison(
            farm_carbon_intensity, crop_type, state
        )
        
        # Add context
        benchmark.update({
            'establishment_name': establishment.name,
            'crop_type': crop_type,
            'state': state,
            'location': location,
            'carbon_intensity': farm_carbon_intensity
        })
        
        return Response(benchmark, status=status.HTTP_200_OK)
        
    except Establishment.DoesNotExist:
        return Response(
            {'error': 'Establishment not found'}, 
            status=status.HTTP_404_NOT_FOUND
        )
    except Exception as e:
        logger.error(f"Error getting regional benchmark: {str(e)}")
        return Response(
            {'error': 'Internal server error'}, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )

@api_view(['GET'])
def get_usda_methodology_content(request):
    """
    Get educational content about USDA methodology.
    Supports different user levels: beginner, intermediate, advanced
    """
    try:
        user_level = request.GET.get('level', 'beginner')
        
        education_service = EducationalContentService()
        content = education_service.get_usda_methodology_content(user_level)
        
        return Response(content, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"Error getting USDA methodology content: {str(e)}")
        return Response(
            {'error': 'Unable to load educational content'}, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['GET'])
def get_regional_farming_practices(request, state, crop_type):
    """
    Get regional farming practice information for educational purposes.
    Shows how local farmers achieve carbon efficiency.
    """
    try:
        education_service = EducationalContentService()
        practices = education_service.get_regional_farming_practices(state.upper(), crop_type.lower())
        
        return Response(practices, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"Error getting regional practices: {str(e)}")
        return Response(
            {'error': 'Unable to load regional practice information'}, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['GET'])
def get_carbon_impact_examples(request, carbon_value):
    """
    Get relatable examples for carbon impact values.
    Helps consumers understand what carbon numbers mean in everyday terms.
    """
    try:
        carbon_float = float(carbon_value)
        
        education_service = EducationalContentService()
        examples = education_service.get_carbon_impact_examples(carbon_float)
        
        return Response({
            'carbon_value': carbon_float,
            'examples': examples,
            'category': 'low' if carbon_float < 0.5 else 'medium' if carbon_float < 2.0 else 'high'
        }, status=status.HTTP_200_OK)
        
    except ValueError:
        return Response(
            {'error': 'Invalid carbon value provided'}, 
            status=status.HTTP_400_BAD_REQUEST
        )
    except Exception as e:
        logger.error(f"Error getting carbon examples: {str(e)}")
        return Response(
            {'error': 'Unable to load carbon impact examples'}, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['GET'])
def get_trust_comparison_data(request):
    """
    Get data for trust comparison widget.
    Shows difference between generic estimates and USDA-based calculations.
    """
    try:
        education_service = EducationalContentService()
        comparison_data = education_service.get_trust_comparison_data()
        
        return Response(comparison_data, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"Error getting trust comparison data: {str(e)}")
        return Response(
            {'error': 'Unable to load trust comparison data'}, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['GET'])
def get_education_content(request, topic):
    """
    Generic educational content endpoint that handles different topics.
    Supports topics: carbon-scoring, regional-benchmarks, trust-indicators, 
    farming-practices, carbon-examples, verification-process, sustainability-metrics
    """
    try:
        user_level = request.GET.get('level', 'beginner')
        context = request.GET.get('context')
        source = request.GET.get('source')
        
        # Parse context if provided
        context_data = {}
        if context:
            try:
                import json
                context_data = json.loads(context)
            except json.JSONDecodeError:
                pass
        
        education_service = EducationalContentService()
        
        # Route to appropriate content based on topic
        if topic == 'usda-methodology':
            content = education_service.get_usda_methodology_content(user_level)
        elif topic == 'carbon-scoring':
            content = education_service.get_carbon_scoring_content(user_level, context_data)
        elif topic == 'regional-benchmarks':
            content = education_service.get_regional_benchmarks_content(user_level, context_data)
        elif topic == 'trust-indicators':
            content = education_service.get_trust_indicators_content(user_level, context_data)
        elif topic == 'farming-practices':
            content = education_service.get_farming_practices_content(user_level, context_data)
        elif topic == 'carbon-examples':
            content = education_service.get_carbon_examples_content(user_level, context_data)
        elif topic == 'verification-process':
            content = education_service.get_verification_process_content(user_level, context_data)
        elif topic == 'sustainability-metrics':
            content = education_service.get_sustainability_metrics_content(user_level, context_data)
        else:
            return Response(
                {'error': f'Unknown educational topic: {topic}'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        return Response(content, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"Error getting educational content for topic {topic}: {str(e)}")
        return Response(
            {'error': 'Unable to load educational content'}, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )

# NEW USDA INTEGRATION ENDPOINTS

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def validate_usda_compliance(request):
    """NEW ENDPOINT: Validate calculation against USDA standards"""
    try:
        data = request.data
        
        # Extract required parameters
        crop_type = data.get('crop_type')
        state = data.get('state')
        co2e = data.get('co2e', 0)
        area_hectares = data.get('area_hectares', 1)
        
        if not crop_type or not state:
            return Response(
                {'error': 'crop_type and state are required parameters'},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Initialize enhanced USDA service
        enhanced_usda = EnhancedUSDAFactors()
        
        # Prepare calculation data for validation
        calculation_data = {
            'crop_type': crop_type,
            'state': state,
            'co2e': float(co2e),
            'area_hectares': float(area_hectares),
            'usda_factors_based': data.get('usda_factors_based', True),
            'method': data.get('method', 'standard')
        }
        
        # Validate against USDA standards
        validation_result = enhanced_usda.validate_against_usda_standards(calculation_data)
        
        # Return validation result
        return Response({
            'status': 'success',
            'validation_result': validation_result.to_dict(),
            'timestamp': timezone.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"USDA compliance validation error: {e}")
        return Response(
            {'error': f'Validation failed: {str(e)}'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_regional_emission_factors(request, state):
    """NEW ENDPOINT: Get regional emission factors for a state"""
    try:
        crop_type = request.query_params.get('crop_type', 'corn')
        county = request.query_params.get('county')
        
        # Initialize enhanced USDA service
        enhanced_usda = EnhancedUSDAFactors()
        
        # Get real-time emission factors
        emission_factors = enhanced_usda.get_real_time_emission_factors(crop_type, state)
        
        # Get regional factors for comparison
        regional_factors = enhanced_usda.get_regional_factors(crop_type, state, county)
        
        # Get metadata
        metadata = enhanced_usda.get_enhanced_calculation_metadata(crop_type, state)
        
        return Response({
            'state': state,
            'crop_type': crop_type,
            'county': county,
            'emission_factors': emission_factors,
            'regional_factors': regional_factors,
            'metadata': metadata,
            'timestamp': timezone.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Error getting regional emission factors: {e}")
        return Response(
            {'error': f'Failed to get emission factors: {str(e)}'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_usda_benchmark_comparison(request):
    """NEW ENDPOINT: Get USDA benchmark comparison for farm performance"""
    try:
        farm_carbon_intensity = float(request.query_params.get('carbon_intensity', 0))
        crop_type = request.query_params.get('crop_type', 'corn')
        state = request.query_params.get('state', 'CA')
        
        if farm_carbon_intensity <= 0:
            return Response(
                {'error': 'carbon_intensity parameter is required and must be greater than 0'},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Add caching to prevent repeated USDA API calls
        cache_key = f'usda_benchmark_{crop_type}_{state}_{int(farm_carbon_intensity*1000)}_v2'
        cached_result = cache.get(cache_key)
        
        if cached_result:
            logger.info(f"✅ Returning cached USDA benchmark for {crop_type} in {state}")
            cached_result['cache_hit'] = True
            cached_result['timestamp'] = timezone.now().isoformat()
            return Response(cached_result)
        
        logger.info(f"🔄 Fetching fresh USDA benchmark for {crop_type} in {state}")
        
        # Initialize enhanced USDA service
        enhanced_usda = EnhancedUSDAFactors()
        
        # Get benchmark comparison
        benchmark_comparison = enhanced_usda.get_usda_benchmark_comparison(
            farm_carbon_intensity, crop_type, state
        )
        
        result = {
            'farm_carbon_intensity': farm_carbon_intensity,
            'crop_type': crop_type,
            'state': state,
            'benchmark_comparison': benchmark_comparison,
            'timestamp': timezone.now().isoformat(),
            'cache_hit': False
        }
        
        # Cache for 20 minutes
        cache.set(cache_key, result, 1200)
        logger.info(f"✅ Cached USDA benchmark for {crop_type} in {state} for 20 minutes")
        
        return Response(result)
        
    except ValueError:
        return Response(
            {'error': 'carbon_intensity must be a valid number'},
            status=status.HTTP_400_BAD_REQUEST
        )
    except Exception as e:
        logger.error(f"Error getting USDA benchmark comparison: {e}")
        return Response(
            {'error': f'Failed to get benchmark comparison: {str(e)}'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def process_voice_event(request):
    """NEW ENDPOINT: Enhanced voice event processing with confidence-based auto-approval"""
    try:
        voice_data = request.data
        
        # Validate required fields
        required_fields = ['transcript', 'crop_type']
        for field in required_fields:
            if field not in voice_data:
                return Response(
                    {'error': f'{field} is required'},
                    status=status.HTTP_400_BAD_REQUEST
                )
        
        # Enhanced natural language processing would go here
        # For now, simulate confidence-based processing
        transcript = voice_data['transcript']
        crop_type = voice_data['crop_type']
        language = voice_data.get('language', 'en-US')
        
        # Simulate parsing with confidence score
        confidence = 0.85  # This would come from actual NLP processing
        
        parsed_event = {
            'event_type': 'fertilization',  # This would be detected from transcript
            'amount': '50 kg',  # This would be extracted from transcript
            'area': '2 hectares',  # This would be extracted from transcript
            'confidence': confidence,
            'transcript': transcript,
            'language': language,
            'crop_type': crop_type
        }
        
        # Auto-create if high confidence
        if confidence > 0.85:
            # Here you would create the actual event
            return Response({
                'status': 'auto_created',
                'event_data': parsed_event,
                'confidence': confidence,
                'message': 'Event created automatically due to high confidence'
            })
        
        return Response({
            'status': 'confirmation_required',
            'parsed_data': parsed_event,
            'confidence': confidence,
            'message': 'Manual confirmation required due to lower confidence'
        })
        
    except Exception as e:
        logger.error(f"Error processing voice event: {e}")
        return Response(
            {'error': f'Voice processing failed: {str(e)}'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def process_voice_event_ai(request):
    """
    Process voice input using AI for enhanced accuracy and natural language understanding.
    This endpoint uses OpenAI GPT for intelligent voice processing.
    """
    try:
        transcript = request.data.get('transcript', '')
        crop_type = request.data.get('crop_type', '')
        language = request.data.get('language', 'en-US')
        
        if not transcript or not crop_type:
            return Response(
                {'error': 'transcript and crop_type are required'},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Import here to avoid circular imports
        from .services.ai_voice_processor import process_voice_input_with_ai
        
        # Process with AI
        result = process_voice_input_with_ai(transcript, crop_type, language)
        
        return Response(result, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"Error in AI voice processing: {e}")
        return Response(
            {'error': 'Failed to process voice input with AI', 'details': str(e)},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_ai_event_suggestions(request):
    """
    Generate AI-powered smart event suggestions based on crop type, season, location, and context.
    Uses OpenAI GPT to provide intelligent, context-aware agricultural recommendations.
    """
    try:
        crop_type = request.GET.get('crop_type', '')
        location = request.GET.get('location', '')
        season = request.GET.get('season', '')
        recent_events_str = request.GET.get('recent_events', '[]')
        farm_context_str = request.GET.get('farm_context', '{}')
        
        if not crop_type:
            return Response(
                {'error': 'crop_type parameter is required'},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Parse JSON parameters
        try:
            recent_events = json.loads(recent_events_str) if recent_events_str else []
            farm_context = json.loads(farm_context_str) if farm_context_str else {}
        except json.JSONDecodeError:
            recent_events = []
            farm_context = {}
        
        # Import here to avoid circular imports
        from .services.ai_voice_processor import generate_ai_event_suggestions
        import asyncio
        
        # Generate AI suggestions (handle async function)
        if asyncio.iscoroutinefunction(generate_ai_event_suggestions):
            # Run async function in sync context
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                result = loop.run_until_complete(
                    generate_ai_event_suggestions(
                        crop_type=crop_type,
                        location=location or None,
                        season=season or None,
                        recent_events=recent_events,
                        farm_context=farm_context
                    )
                )
            finally:
                loop.close()
        else:
            # Sync function
            result = generate_ai_event_suggestions(
                crop_type=crop_type,
                location=location or None,
                season=season or None,
                recent_events=recent_events,
                farm_context=farm_context
            )
        
        return Response(result, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"Error generating AI event suggestions: {e}")
        return Response(
            {
                'error': 'Failed to generate AI event suggestions',
                'details': str(e),
                'fallback_available': True
            },
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_usda_compliance_history(request, production_id):
    """NEW ENDPOINT: Get USDA compliance history for a production"""
    try:
        from .models import USDAComplianceRecord
        
        # Get production
        try:
            production = History.objects.get(id=production_id)
        except History.DoesNotExist:
            return Response(
                {'error': 'Production not found'},
                status=status.HTTP_404_NOT_FOUND
            )
        
        # Check permissions
        if production.establishment.company != request.user.company:
            return Response(
                {'error': 'Permission denied'},
                status=status.HTTP_403_FORBIDDEN
            )
        
        # Get compliance records
        compliance_records = USDAComplianceRecord.objects.filter(
            production=production
        ).order_by('-validated_at')
        
        # Serialize compliance data
        compliance_data = []
        for record in compliance_records:
            compliance_data.append({
                'id': record.id,
                'compliance_status': record.compliance_status,
                'confidence_score': record.confidence_score,
                'confidence_level': record.confidence_level,
                'validation_method': record.validation_method,
                'validation_details': record.validation_details,
                'recommendations': record.recommendations,
                'usda_api_used': record.usda_api_used,
                'crop_type': record.crop_type,
                'state': record.state,
                'regional_factors_used': record.regional_factors_used,
                'validated_at': record.validated_at.isoformat(),
                'is_usda_verified': record.is_usda_verified,
                'needs_review': record.needs_review
            })
        
        # Calculate summary statistics
        total_records = len(compliance_data)
        compliant_records = len([r for r in compliance_data if r['compliance_status'] == 'compliant'])
        avg_confidence = sum(r['confidence_score'] for r in compliance_data) / total_records if total_records > 0 else 0
        
        return Response({
            'production_id': production_id,
            'production_name': production.name,
            'compliance_records': compliance_data,
            'summary': {
                'total_records': total_records,
                'compliant_records': compliant_records,
                'compliance_rate': (compliant_records / total_records * 100) if total_records > 0 else 0,
                'average_confidence': round(avg_confidence, 3),
                'usda_verified_count': len([r for r in compliance_data if r['is_usda_verified']])
            }
        })
        
    except Exception as e:
        logger.error(f"Error getting USDA compliance history: {e}")
        return Response(
            {'error': f'Failed to get compliance history: {str(e)}'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def batch_verify_productions(request):
    """NEW ENDPOINT: Batch verify multiple productions with gas optimization"""
    try:
        from .services.production_blockchain import production_blockchain_service
        
        production_ids = request.data.get('production_ids', [])
        if not production_ids:
            return Response({
                'error': 'production_ids required'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        if len(production_ids) > 100:  # Reasonable limit
            return Response({
                'error': 'Maximum 100 productions per batch'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # Perform batch verification
        result = production_blockchain_service.batch_verify_productions(production_ids)
        
        return Response({
            'status': 'completed',
            'successful_verifications': result.successful_verifications,
            'failed_verifications': result.failed_verifications,
            'total_gas_used': result.total_gas_used,
            'total_cost_usd': result.total_cost_usd,
            'transaction_hashes': result.transaction_hashes,
            'processing_time': result.processing_time,
            'success_rate': len(result.successful_verifications) / len(production_ids) * 100 if production_ids else 0
        })
        
    except Exception as e:
        logger.error(f"Batch verification failed: {e}")
        return Response({
            'error': 'Batch verification failed',
            'details': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_gas_optimization_analysis(request):
    """NEW ENDPOINT: Get gas optimization analysis for planned operations"""
    try:
        from .services.production_blockchain import production_blockchain_service
        
        operation_type = request.GET.get('operation_type', 'verify')
        batch_size = int(request.GET.get('batch_size', 10))
        
        if operation_type not in ['verify', 'mint', 'retire']:
            return Response({
                'error': 'Invalid operation_type. Must be verify, mint, or retire'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        if batch_size < 1 or batch_size > 100:
            return Response({
                'error': 'batch_size must be between 1 and 100'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # Get gas optimization analysis
        analysis = production_blockchain_service.get_gas_optimization_analysis(operation_type, batch_size)
        
        return Response({
            'operation_type': operation_type,
            'requested_batch_size': batch_size,
            'estimated_gas': analysis.estimated_gas,
            'optimized_gas_price': analysis.optimized_gas_price,
            'estimated_cost_usd': analysis.estimated_cost_usd,
            'recommended_batch_size': analysis.recommended_batch_size,
            'network_congestion': analysis.network_congestion,
            'cost_per_item': analysis.estimated_cost_usd / batch_size if batch_size > 0 else 0
        })
        
    except Exception as e:
        logger.error(f"Gas optimization analysis failed: {e}")
        return Response({
            'error': 'Gas optimization analysis failed',
            'details': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def mint_carbon_credits_batch(request):
    """NEW ENDPOINT: Batch mint carbon credit NFTs"""
    try:
        from .services.production_blockchain import production_blockchain_service
        
        credit_data_list = request.data.get('credits', [])
        if not credit_data_list:
            return Response({
                'error': 'credits array required'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        if len(credit_data_list) > 50:  # Smart contract limit
            return Response({
                'error': 'Maximum 50 credits per batch'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # Validate credit data structure
        required_fields = ['farmer_address', 'production_id', 'co2e_amount']
        for i, credit_data in enumerate(credit_data_list):
            for field in required_fields:
                if field not in credit_data:
                    return Response({
                        'error': f'Missing {field} in credit {i}'
                    }, status=status.HTTP_400_BAD_REQUEST)
        
        # Perform batch minting
        result = production_blockchain_service.mint_carbon_credits_batch(credit_data_list)
        
        return Response({
            'status': 'completed',
            'successful_mints': result.successful_verifications,
            'failed_mints': result.failed_verifications,
            'total_gas_used': result.total_gas_used,
            'total_cost_usd': result.total_cost_usd,
            'transaction_hashes': result.transaction_hashes,
            'processing_time': result.processing_time,
            'success_rate': len(result.successful_verifications) / len(credit_data_list) * 100 if credit_data_list else 0
        })
        
    except Exception as e:
        logger.error(f"Batch minting failed: {e}")
        return Response({
            'error': 'Batch minting failed',
            'details': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_blockchain_service_stats(request):
    """NEW ENDPOINT: Get blockchain service performance statistics"""
    try:
        from .services.production_blockchain import production_blockchain_service
        
        stats = production_blockchain_service.get_service_stats()
        
        return Response({
            'service_stats': stats,
            'network_info': {
                'name': stats['network'],
                'is_mainnet': stats['is_mainnet'],
                'mock_mode': stats['mock_mode']
            },
            'performance': {
                'transaction_count': stats['transaction_count'],
                'total_gas_used': stats['total_gas_used'],
                'failed_transactions': stats['failed_transactions'],
                'success_rate': stats['success_rate']
            },
            'contracts': stats['contracts_loaded']
        })
        
    except Exception as e:
        logger.error(f"Failed to get service stats: {e}")
        return Response({
            'error': 'Failed to get service stats',
            'details': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def deploy_carbon_credit_contract(request):
    """NEW ENDPOINT: Deploy carbon credit contract (admin only)"""
    if not request.user.is_staff:
        return Response({
            'error': 'Admin access required'
        }, status=status.HTTP_403_FORBIDDEN)
    
    try:
        from .services.production_blockchain import production_blockchain_service
        
        contract_address = production_blockchain_service.deploy_carbon_credit_contract()
        
        if contract_address:
            return Response({
                'status': 'deployed',
                'contract_address': contract_address,
                'network': production_blockchain_service.network_name,
                'explorer_url': f"{production_blockchain_service.explorer_url}/address/{contract_address}"
            })
        else:
            return Response({
                'error': 'Contract deployment failed'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
    except Exception as e:
        logger.error(f"Contract deployment failed: {e}")
        return Response({
            'error': 'Contract deployment failed',
            'details': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

# Add this new endpoint at the end of the file before the last closing

@api_view(['GET'])
@permission_classes([IsAuthenticated])  
def get_real_usda_factors(request):
    """NEW ENDPOINT: Get real-time USDA emission factors using actual government APIs"""
    try:
        crop_type = request.query_params.get('crop_type', 'corn')
        state = request.query_params.get('state', 'IA')
        
        # Add aggressive caching to prevent repeated USDA API calls
        cache_key = f'usda_factors_{crop_type}_{state}_v2'
        cached_result = cache.get(cache_key)
        
        if cached_result:
            logger.info(f"✅ Returning cached USDA factors for {crop_type} in {state}")
            cached_result['cache_hit'] = True
            cached_result['timestamp'] = timezone.now().isoformat()
            return Response(cached_result)
        
        logger.info(f"🔄 Fetching fresh USDA factors for {crop_type} in {state}")
        
        # Import real USDA integration
        from .services.real_usda_integration import get_real_usda_carbon_data, RealUSDAAPIClient
        from .services.enhanced_usda_factors import EnhancedUSDAFactors
        
        # Get real-time factors using enhanced service
        enhanced_usda = EnhancedUSDAFactors()
        real_factors = enhanced_usda.get_real_time_emission_factors(crop_type, state)
        
        # Get real USDA client for additional data
        usda_client = RealUSDAAPIClient()
        
        # Get real benchmark data
        benchmark_yield = usda_client.get_benchmark_yield(crop_type, state)
        
        # Test farm practices for demonstration
        demo_practices = {
            'inputs': {
                'nitrogen_kg': 150,
                'phosphorus_kg': 50, 
                'diesel_liters': 80
            },
            'area_hectares': 100,
            'yield_per_hectare': 9000
        }
        
        # Get complete carbon calculation with real data
        carbon_calculation = get_real_usda_carbon_data(crop_type, state, demo_practices)
        
        # Get credibility data
        try:
            credibility_data = enhanced_usda.get_usda_credibility_data(None)
        except Exception as e:
            logger.warning(f"Could not get credibility data: {e}")
            credibility_data = {
                'usda_based': True,
                'confidence_level': 'high',
                'credibility_score': 85
            }
        
        result = {
            'success': True,
            'crop_type': crop_type,
            'state': state,
            'api_status': {
                'nass_configured': bool(usda_client.nass_api_key),
                'ers_configured': bool(usda_client.ers_api_key),
                'data_source': 'Real USDA APIs'
            },
            'emission_factors': real_factors,
            'benchmark_data': {
                'regional_yield': benchmark_yield,
                'unit': 'bushels/acre' if benchmark_yield else None,
                'kg_per_hectare': round(benchmark_yield * 62.8) if benchmark_yield else None
            },
            'carbon_calculation': carbon_calculation,
            'usda_credibility': credibility_data,
            'api_attribution': getattr(settings, 'USDA_API_ATTRIBUTION', ''),
            'timestamp': timezone.now().isoformat(),
            'real_data': True,
            'cache_hit': False
        }
        
        # Cache for 30 minutes to prevent repeated API calls
        cache.set(cache_key, result, 1800)
        logger.info(f"✅ Cached USDA factors for {crop_type} in {state} for 30 minutes")
        
        return Response(result)
        
    except Exception as e:
        logger.error(f"Error getting real USDA factors: {e}")
        return Response({
            'success': False,
            'error': f'Failed to get USDA factors: {str(e)}',
            'timestamp': timezone.now().isoformat(),
            'cache_hit': False
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])  
@permission_classes([IsAuthenticated])
def test_usda_apis(request):
    """NEW ENDPOINT: Test all USDA API connections and return status"""
    try:
        from .services.real_usda_integration import RealUSDAAPIClient
        
        usda_client = RealUSDAAPIClient()
        
        # Test NASS API
        nass_test = None
        nass_error = None
        try:
            nass_data = usda_client.get_nass_crop_data('corn', 'IA', 2023)
            nass_test = {
                'status': 'success' if nass_data else 'no_data',
                'records_found': len(nass_data.get('data', [])) if nass_data else 0,
                'sample_data': nass_data.get('data', [{}])[0] if nass_data and nass_data.get('data') else None
            }
        except Exception as e:
            nass_error = str(e)
            nass_test = {'status': 'error', 'error': nass_error}
        
        # Test benchmark calculation
        benchmark_test = None
        try:
            benchmark = usda_client.get_benchmark_yield('corn', 'IA')
            benchmark_test = {
                'status': 'success' if benchmark else 'no_data',
                'value': benchmark,
                'unit': 'bushels/acre'
            }
        except Exception as e:
            benchmark_test = {'status': 'error', 'error': str(e)}
        
        # Test carbon calculation
        carbon_test = None
        try:
            farm_practices = {
                'inputs': {'nitrogen_kg': 150, 'diesel_liters': 80},
                'area_hectares': 100, 
                'yield_per_hectare': 9000
            }
            carbon_result = usda_client.calculate_carbon_intensity('corn', 'IA', farm_practices)
            carbon_test = {
                'status': 'success' if not carbon_result.get('error') else 'error',
                'carbon_intensity': carbon_result.get('carbon_intensity', 0),
                'confidence_level': carbon_result.get('confidence_level', 'unknown')
            }
        except Exception as e:
            carbon_test = {'status': 'error', 'error': str(e)}
        
        return Response({
            'api_keys_configured': {
                'nass': bool(usda_client.nass_api_key),
                'ers': bool(usda_client.ers_api_key)
            },
            'tests': {
                'nass_data_fetch': nass_test,
                'benchmark_calculation': benchmark_test, 
                'carbon_calculation': carbon_test
            },
            'overall_status': 'operational' if all([
                nass_test and nass_test.get('status') == 'success',
                benchmark_test and benchmark_test.get('status') == 'success',
                carbon_test and carbon_test.get('status') == 'success'
            ]) else 'partial',
            'timestamp': timezone.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Error testing USDA APIs: {e}")
        return Response({
            'error': f'API test failed: {str(e)}',
            'timestamp': timezone.now().isoformat()
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_nutritional_carbon_analysis(request):
    """NEW ENDPOINT: Get nutritional analysis and carbon efficiency for crops using FoodData Central API"""
    try:
        crop_type = request.query_params.get('crop_type', 'corn')
        
        from .services.real_usda_integration import RealUSDAAPIClient
        
        usda_client = RealUSDAAPIClient()
        
        # Get nutritional data from FoodData Central
        nutritional_data = usda_client.get_nutritional_carbon_factors(crop_type)
        
        if not nutritional_data:
            return Response({
                'success': False,
                'error': 'No nutritional data found for this crop',
                'crop_type': crop_type
            }, status=status.HTTP_404_NOT_FOUND)
        
        return Response({
            'success': True,
            'crop_type': crop_type,
            'nutritional_analysis': nutritional_data,
            'api_source': 'USDA FoodData Central',
            'timestamp': timezone.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Error getting nutritional carbon analysis: {e}")
        return Response({
            'success': False,
            'error': f'Failed to get nutritional analysis: {str(e)}',
            'timestamp': timezone.now().isoformat()
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_complete_usda_analysis(request):
    """NEW ENDPOINT: Get complete analysis using all three USDA APIs together"""
    try:
        crop_type = request.query_params.get('crop_type', 'corn')
        state = request.query_params.get('state', 'IA')
        
        # Get user's establishment data if available
        area_hectares = float(request.query_params.get('area_hectares', 100))
        yield_per_hectare = float(request.query_params.get('yield_per_hectare', 9000))
        nitrogen_kg = float(request.query_params.get('nitrogen_kg', 150))
        phosphorus_kg = float(request.query_params.get('phosphorus_kg', 50))
        diesel_liters = float(request.query_params.get('diesel_liters', 80))
        
        farm_practices = {
            'area_hectares': area_hectares,
            'yield_per_hectare': yield_per_hectare,
            'inputs': {
                'nitrogen_kg': nitrogen_kg,
                'phosphorus_kg': phosphorus_kg,
                'diesel_liters': diesel_liters
            }
        }
        
        from .services.real_usda_integration import get_real_usda_carbon_data
        
        # Get complete analysis with all APIs
        complete_result = get_real_usda_carbon_data(crop_type, state, farm_practices)
        
        return Response({
            'success': True,
            'analysis': complete_result,
            'input_parameters': {
                'crop_type': crop_type,
                'state': state,
                'farm_practices': farm_practices
            },
            'timestamp': timezone.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Error getting complete USDA analysis: {e}")
        return Response({
            'success': False,
            'error': f'Failed to get complete analysis: {str(e)}',
            'timestamp': timezone.now().isoformat()
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def test_fooddata_central_api(request):
    """NEW ENDPOINT: Test FoodData Central API specifically"""
    try:
        crop_type = request.query_params.get('crop_type', 'corn')
        
        from .services.real_usda_integration import RealUSDAAPIClient
        
        usda_client = RealUSDAAPIClient()
        
        # Test FoodData Central API configuration
        api_configured = bool(usda_client.fooddata_api_key)
        
        if not api_configured:
            return Response({
                'api_configured': False,
                'error': 'FoodData Central API key not configured'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # Test food composition data fetch
        food_data = usda_client.get_food_composition_data(crop_type)
        
        # Test nutritional analysis
        nutritional_analysis = usda_client.get_nutritional_carbon_factors(crop_type)
        
        test_results = {
            'api_configured': api_configured,
            'api_endpoint': usda_client.fooddata_base_url,
            'test_crop': crop_type,
            'food_search_test': {
                'status': 'success' if food_data and 'foods' in food_data else 'failed',
                'foods_found': len(food_data.get('foods', [])) if food_data else 0,
                'sample_food': food_data.get('foods', [{}])[0] if food_data and food_data.get('foods') else None
            },
            'nutritional_analysis_test': {
                'status': 'success' if nutritional_analysis else 'failed',
                'has_nutrients': bool(nutritional_analysis.get('nutritional_data')) if nutritional_analysis else False,
                'has_efficiency': bool(nutritional_analysis.get('carbon_efficiency')) if nutritional_analysis else False,
                'efficiency_rating': nutritional_analysis.get('carbon_efficiency', {}).get('efficiency_rating') if nutritional_analysis else None
            },
            'timestamp': timezone.now().isoformat()
        }
        
        overall_status = (
            test_results['food_search_test']['status'] == 'success' and 
            test_results['nutritional_analysis_test']['status'] == 'success'
        )
        
        return Response({
            'overall_status': 'operational' if overall_status else 'failed',
            'test_results': test_results
        })
        
    except Exception as e:
        logger.error(f"Error testing FoodData Central API: {e}")
        return Response({
            'overall_status': 'error',
            'error': f'API test failed: {str(e)}',
            'timestamp': timezone.now().isoformat()
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def verify_registry_credentials(request):
    """
    Verify carbon offset registry credentials against third-party APIs
    
    POST /carbon/verify-registry-credentials/
    {
        "registry_verification_id": "VCS-1001",
        "registry_type": "vcs",  // vcs, gold_standard, car, acr
        "carbon_entry_id": 123  // optional, to update existing entry
    }
    """
    try:
        from .services.registry_integration import RegistryIntegrationService
        from .models import CarbonEntry
        
        data = request.data
        registry_id = data.get('registry_verification_id')
        registry_type = data.get('registry_type', 'vcs').lower()
        carbon_entry_id = data.get('carbon_entry_id')
        
        if not registry_id:
            return Response({
                'error': 'registry_verification_id is required'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # Initialize registry service
        registry_service = RegistryIntegrationService()
        
        # Validate credentials
        validation_result = registry_service.validate_project_credentials(registry_id, registry_type)
        
        if validation_result['verified']:
            # Get project URL
            project_url = registry_service.get_registry_project_url(registry_id, registry_type)
            
            # Update carbon entry if provided
            if carbon_entry_id:
                try:
                    carbon_entry = CarbonEntry.objects.get(id=carbon_entry_id, created_by=request.user)
                    carbon_entry.registry_verification_id = registry_id
                    carbon_entry.third_party_verification_url = project_url
                    carbon_entry.verification_level = 'certified_project'
                    carbon_entry.trust_score = 1.0
                    carbon_entry.effective_amount = carbon_entry.amount * carbon_entry.trust_score
                    # carbon_entry.verification_date = timezone.now()  # Field does not exist
                    carbon_entry.save()
                    
                    # Log the verification update
                    CarbonAuditLog.objects.create(
                        carbon_entry=carbon_entry,
                        user=request.user,
                        action='registry_verified',
                        details=f'Registry verification completed: {registry_type.upper()} {registry_id}'
                    )
                    
                except CarbonEntry.DoesNotExist:
                    return Response({
                        'error': 'Carbon entry not found or access denied'
                    }, status=status.HTTP_404_NOT_FOUND)
            
            return Response({
                'verified': True,
                'registry': registry_type.upper(),
                'registry_verification_id': registry_id,
                'project_url': project_url,
                'verification_details': validation_result,
                'carbon_entry_updated': bool(carbon_entry_id),
                'message': f'Registry verification successful for {registry_type.upper()} project {registry_id}'
            }, status=status.HTTP_200_OK)
        
        else:
            return Response({
                'verified': False,
                'registry': registry_type.upper(),
                'registry_verification_id': registry_id,
                'error': validation_result.get('error', 'Verification failed'),
                'supported_registries': ['VCS', 'Gold Standard', 'CAR', 'ACR'],
                'message': f'Registry verification failed for {registry_type.upper()} project {registry_id}'
            }, status=status.HTTP_400_BAD_REQUEST)
            
    except Exception as e:
        logger.error(f"Registry verification error: {e}")
        return Response({
            'error': 'Registry verification service unavailable',
            'details': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_verification_status(request, carbon_entry_id):
    """
    Get comprehensive verification status for a carbon entry
    
    GET /carbon/entries/{id}/verification-status/
    """
    try:
        from .services.verification_service import VerificationService
        
        # Get carbon entry
        carbon_entry = CarbonEntry.objects.get(id=carbon_entry_id, created_by=request.user)
        
        # Run verification check
        verification_service = VerificationService()
        verification_result = verification_service.verify_offset_entry(carbon_entry)
        
        # Get audit logs
        audit_logs = CarbonAuditLog.objects.filter(
            carbon_entry=carbon_entry
        ).order_by('-created_at')[:10]
        
        # Format audit logs
        formatted_logs = []
        for log in audit_logs:
            formatted_logs.append({
                'id': log.id,
                'action': log.action,
                'details': log.details,
                'created_at': log.created_at.isoformat(),
                'user': log.user.email if log.user else None
            })
        
        return Response({
            'carbon_entry_id': carbon_entry.id,
            'verification_status': {
                'verification_level': carbon_entry.verification_level,
                'trust_score': carbon_entry.trust_score,
                'effective_amount': carbon_entry.effective_amount,
                'audit_status': carbon_entry.audit_status,
                'registry_verification_id': carbon_entry.registry_verification_id,
                'third_party_verification_url': carbon_entry.third_party_verification_url
            },
            'verification_result': verification_result,
            'audit_trail': formatted_logs,
            'verification_badge': carbon_entry.verification_badge,
            'evidence_summary': {
                'photos_count': len(carbon_entry.evidence_photos or []),
                'documents_count': len(carbon_entry.evidence_documents or []),
                'gps_coordinates': bool(getattr(carbon_entry, "gps_coordinates", False)),
                'community_attestations': carbon_entry.attestation_count
            }
        }, status=status.HTTP_200_OK)
        
    except CarbonEntry.DoesNotExist:
        return Response({
            'error': 'Carbon entry not found or access denied'
        }, status=status.HTTP_404_NOT_FOUND)
    except Exception as e:
        logger.error(f"Verification status error: {e}")
        return Response({
            'error': 'Failed to get verification status',
            'details': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def bulk_verify_entries(request):
    """
    Bulk verify multiple carbon entries
    
    POST /carbon/bulk-verify/
    {
        "carbon_entry_ids": [1, 2, 3],
        "verification_action": "schedule_audit" | "verify_registry" | "validate_evidence"
    }
    """
    try:
        from .services.verification_service import VerificationService
        from .services.audit_scheduler import AuditScheduler
        
        data = request.data
        entry_ids = data.get('carbon_entry_ids', [])
        verification_action = data.get('verification_action', 'schedule_audit')
        
        if not entry_ids:
            return Response({
                'error': 'carbon_entry_ids is required'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # Get carbon entries
        carbon_entries = CarbonEntry.objects.filter(
            id__in=entry_ids,
            created_by=request.user
        )
        
        if carbon_entries.count() != len(entry_ids):
            return Response({
                'error': 'Some carbon entries not found or access denied'
            }, status=status.HTTP_404_NOT_FOUND)
        
        # Initialize services
        verification_service = VerificationService()
        audit_scheduler = AuditScheduler()
        
        results = []
        
        for entry in carbon_entries:
            try:
                if verification_action == 'schedule_audit':
                    # Schedule audit
                    audit_result = audit_scheduler.schedule_audit(entry)
                    results.append({
                        'carbon_entry_id': entry.id,
                        'success': True,
                        'action': 'audit_scheduled',
                        'audit_date': audit_result.get('audit_date'),
                        'message': f'Audit scheduled for entry {entry.id}'
                    })
                    
                elif verification_action == 'verify_registry':
                    # Verify registry credentials
                    if entry.registry_verification_id:
                        verification_result = verification_service.verify_offset_entry(entry)
                        registry_verified = verification_result.get('registry_validation', {}).get('verified', False)
                        
                        results.append({
                            'carbon_entry_id': entry.id,
                            'success': registry_verified,
                            'action': 'registry_verified',
                            'registry_result': verification_result.get('registry_validation', {}),
                            'message': f'Registry verification {"successful" if registry_verified else "failed"} for entry {entry.id}'
                        })
                    else:
                        results.append({
                            'carbon_entry_id': entry.id,
                            'success': False,
                            'action': 'registry_verification_skipped',
                            'message': f'No registry verification ID for entry {entry.id}'
                        })
                        
                elif verification_action == 'validate_evidence':
                    # Validate evidence requirements
                    verification_result = verification_service.verify_offset_entry(entry)
                    evidence_complete = verification_result.get('evidence_complete', False)
                    
                    results.append({
                        'carbon_entry_id': entry.id,
                        'success': evidence_complete,
                        'action': 'evidence_validated',
                        'evidence_result': {
                            'complete': evidence_complete,
                            'requirements': verification_result.get('requirements', [])
                        },
                        'message': f'Evidence validation {"passed" if evidence_complete else "failed"} for entry {entry.id}'
                    })
                    
                else:
                    results.append({
                        'carbon_entry_id': entry.id,
                        'success': False,
                        'action': 'unknown_action',
                        'message': f'Unknown verification action: {verification_action}'
                    })
                    
            except Exception as e:
                logger.error(f"Bulk verification error for entry {entry.id}: {e}")
                results.append({
                    'carbon_entry_id': entry.id,
                    'success': False,
                    'action': verification_action,
                    'error': str(e),
                    'message': f'Verification failed for entry {entry.id}'
                })
        
        # Summary statistics
        successful_count = sum(1 for r in results if r['success'])
        failed_count = len(results) - successful_count
        
        return Response({
            'bulk_verification_summary': {
                'total_entries': len(results),
                'successful': successful_count,
                'failed': failed_count,
                'verification_action': verification_action
            },
            'results': results,
            'message': f'Bulk verification completed: {successful_count} successful, {failed_count} failed'
        }, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"Bulk verification error: {e}")
        return Response({
            'error': 'Bulk verification failed',
            'details': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_methodology_templates(request):
    """
    Get available methodology templates for carbon offset calculation
    
    GET /carbon/methodology-templates/
    """
    try:
        from .services.registry_integration import RegistryIntegrationService
        
        registry_service = RegistryIntegrationService()
        
        # Get all available methodology templates
        methodology_types = [
            'no_till', 'cover_crop', 'reforestation', 'composting', 
            'renewable_energy', 'methane_capture'
        ]
        
        templates = {}
        for methodology_type in methodology_types:
            template = registry_service.get_methodology_template(methodology_type)
            if template:
                templates[methodology_type] = template
        
        return Response({
            'methodology_templates': templates,
            'supported_methodologies': list(templates.keys()),
            'registry_standards': {
                'VCS': 'Verified Carbon Standard',
                'Gold Standard': 'Gold Standard Foundation',
                'CAR': 'Climate Action Reserve',
                'ACR': 'American Carbon Registry'
            },
            'message': f'Retrieved {len(templates)} methodology templates'
        }, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"Methodology templates error: {e}")
        return Response({
            'error': 'Failed to get methodology templates',
            'details': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
