# Generated by Django 4.1.4 on 2025-06-21 02:17

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('company', '0009_add_missing_company_fields'),
        ('history', '0013_add_crop_type_to_history'),
        ('carbon', '0016_add_production_template_model'),
    ]

    operations = [
        migrations.CreateModel(
            name='USDAComplianceRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compliance_status', models.CharField(choices=[('compliant', 'USDA Compliant'), ('non_compliant', 'Non-Compliant'), ('under_review', 'Under Review'), ('pending_validation', 'Pending Validation'), ('validation_error', 'Validation Error')], default='pending_validation', max_length=20)),
                ('confidence_score', models.FloatField(help_text='Confidence score from 0.0 to 1.0', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('confidence_level', models.CharField(choices=[('high', 'High (>90%)'), ('medium', 'Medium (70-90%)'), ('low', 'Low (<70%)')], max_length=10)),
                ('validation_method', models.CharField(default='api_validation', help_text='Method used for validation', max_length=50)),
                ('validation_details', models.JSONField(default=dict, help_text='Detailed validation results')),
                ('recommendations', models.JSONField(default=list, help_text='USDA compliance recommendations')),
                ('usda_api_used', models.BooleanField(default=False, help_text='Whether USDA API was used for validation')),
                ('api_response_code', models.IntegerField(blank=True, help_text='API response status code', null=True)),
                ('api_response_data', models.JSONField(default=dict, help_text='Full API response data')),
                ('crop_type', models.CharField(help_text='Crop type used in validation', max_length=100)),
                ('state', models.CharField(help_text='State code for regional factors', max_length=2)),
                ('regional_factors_used', models.BooleanField(default=False, help_text='Whether regional emission factors were used')),
                ('validated_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, help_text='Additional validation notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('carbon_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usda_compliance_records', to='carbon.carbonentry')),
                ('establishment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='company.establishment')),
                ('production', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='history.history')),
                ('validated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'carbon_usda_compliance_record',
                'ordering': ['-validated_at'],
            },
        ),
        migrations.CreateModel(
            name='USDACalculationAudit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('chemical_event', 'Chemical Event'), ('production_event', 'Production Event'), ('equipment_event', 'Equipment Event'), ('soil_management', 'Soil Management'), ('weather_event', 'Weather Event'), ('pest_management', 'Pest Management'), ('business_event', 'Business Event')], max_length=20)),
                ('event_id', models.IntegerField(help_text='ID of the original event')),
                ('input_data', models.JSONField(help_text='Original event data used in calculation')),
                ('regional_factors_used', models.JSONField(default=dict, help_text='Regional emission factors used')),
                ('calculation_method', models.CharField(help_text='Calculation method used', max_length=100)),
                ('usda_factors_applied', models.BooleanField(default=False)),
                ('regional_adjustments_applied', models.BooleanField(default=False)),
                ('api_data_used', models.BooleanField(default=False)),
                ('calculated_co2e', models.FloatField(help_text='Calculated CO2e amount')),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('benchmark_comparison', models.JSONField(default=dict, help_text='Benchmark comparison results')),
                ('calculation_time_ms', models.IntegerField(help_text='Time taken for calculation in milliseconds')),
                ('processor_version', models.CharField(default='1.0', help_text='Version of calculation engine used', max_length=50)),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('calculated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('carbon_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usda_audit_logs', to='carbon.carbonentry')),
            ],
            options={
                'db_table': 'carbon_usda_calculation_audit',
                'ordering': ['-calculated_at'],
            },
        ),
        migrations.CreateModel(
            name='RegionalEmissionFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(help_text='State code (e.g., CA, TX)', max_length=2)),
                ('county', models.CharField(blank=True, help_text='County name (optional)', max_length=100)),
                ('region', models.CharField(blank=True, help_text='Custom region identifier', max_length=100)),
                ('crop_type', models.CharField(help_text='Crop type this factor applies to', max_length=100)),
                ('factor_type', models.CharField(choices=[('nitrogen', 'Nitrogen Fertilizer'), ('phosphorus', 'Phosphorus Fertilizer'), ('potassium', 'Potassium Fertilizer'), ('diesel', 'Diesel Fuel'), ('gasoline', 'Gasoline Fuel'), ('natural_gas', 'Natural Gas'), ('electricity', 'Electricity'), ('lime', 'Agricultural Lime'), ('custom', 'Custom Factor')], max_length=20)),
                ('factor_name', models.CharField(help_text='Human-readable factor name', max_length=100)),
                ('emission_factor', models.FloatField(help_text='Emission factor value (kg CO2e per unit)')),
                ('unit', models.CharField(help_text='Unit of measurement (e.g., kg N, liter, kWh)', max_length=50)),
                ('adjustment_factor', models.FloatField(default=1.0, help_text='Regional adjustment multiplier')),
                ('data_source', models.CharField(choices=[('usda_api', 'USDA API'), ('usda_manual', 'USDA Manual Entry'), ('regional_study', 'Regional Study'), ('industry_average', 'Industry Average'), ('estimated', 'Estimated Value')], default='estimated', max_length=20)),
                ('source_reference', models.CharField(blank=True, help_text='Reference to data source', max_length=500)),
                ('confidence_level', models.FloatField(default=0.8, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('usda_verified', models.BooleanField(default=False, help_text='Verified by USDA data source')),
                ('usda_api_id', models.CharField(blank=True, help_text='USDA API identifier if applicable', max_length=100)),
                ('valid_from', models.DateField(help_text='Date from which this factor is valid')),
                ('valid_until', models.DateField(blank=True, help_text='Date until which this factor is valid', null=True)),
                ('usage_count', models.IntegerField(default=0, help_text='Number of times this factor has been used')),
                ('last_used', models.DateTimeField(blank=True, help_text='Last time this factor was used', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this factor')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'carbon_regional_emission_factor',
                'ordering': ['state', 'crop_type', 'factor_type'],
            },
        ),
        migrations.AddIndex(
            model_name='usdacompliancerecord',
            index=models.Index(fields=['compliance_status'], name='carbon_usda_complia_e2b7e0_idx'),
        ),
        migrations.AddIndex(
            model_name='usdacompliancerecord',
            index=models.Index(fields=['confidence_level'], name='carbon_usda_confide_891938_idx'),
        ),
        migrations.AddIndex(
            model_name='usdacompliancerecord',
            index=models.Index(fields=['crop_type', 'state'], name='carbon_usda_crop_ty_423bf3_idx'),
        ),
        migrations.AddIndex(
            model_name='usdacompliancerecord',
            index=models.Index(fields=['validated_at'], name='carbon_usda_validat_8c8609_idx'),
        ),
        migrations.AddIndex(
            model_name='usdacalculationaudit',
            index=models.Index(fields=['event_type', 'event_id'], name='carbon_usda_event_t_4125ab_idx'),
        ),
        migrations.AddIndex(
            model_name='usdacalculationaudit',
            index=models.Index(fields=['calculated_at'], name='carbon_usda_calcula_32ffac_idx'),
        ),
        migrations.AddIndex(
            model_name='usdacalculationaudit',
            index=models.Index(fields=['usda_factors_applied'], name='carbon_usda_usda_fa_0f0800_idx'),
        ),
        migrations.AddIndex(
            model_name='usdacalculationaudit',
            index=models.Index(fields=['confidence_score'], name='carbon_usda_confide_4b2c7a_idx'),
        ),
        migrations.AddIndex(
            model_name='regionalemissionfactor',
            index=models.Index(fields=['state', 'crop_type'], name='carbon_regi_state_252129_idx'),
        ),
        migrations.AddIndex(
            model_name='regionalemissionfactor',
            index=models.Index(fields=['factor_type'], name='carbon_regi_factor__076205_idx'),
        ),
        migrations.AddIndex(
            model_name='regionalemissionfactor',
            index=models.Index(fields=['usda_verified'], name='carbon_regi_usda_ve_badc80_idx'),
        ),
        migrations.AddIndex(
            model_name='regionalemissionfactor',
            index=models.Index(fields=['valid_from', 'valid_until'], name='carbon_regi_valid_f_5fe249_idx'),
        ),
        migrations.AddIndex(
            model_name='regionalemissionfactor',
            index=models.Index(fields=['data_source'], name='carbon_regi_data_so_69c46b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='regionalemissionfactor',
            unique_together={('state', 'crop_type', 'factor_type', 'valid_from')},
        ),
    ]
