# Generated by Django 4.1.4 on 2025-05-25 19:31

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("company", "0006_establishment_about_establishment_custom_message_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("carbon", "0009_carbonreport_document"),
    ]

    operations = [
        migrations.CreateModel(
            name="IoTDevice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "device_id",
                    models.CharField(
                        help_text="Unique device identifier",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "device_type",
                    models.CharField(
                        choices=[
                            ("fuel_sensor", "Fuel Consumption Sensor"),
                            ("weather_station", "Weather Station"),
                            ("soil_moisture", "Soil Moisture Sensor"),
                            ("irrigation", "Irrigation Controller"),
                            ("equipment_monitor", "Equipment Monitor"),
                            ("gps_tracker", "GPS Tracker"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Human-readable device name", max_length=200
                    ),
                ),
                ("manufacturer", models.CharField(blank=True, max_length=100)),
                ("model", models.CharField(blank=True, max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("online", "Online"),
                            ("offline", "Offline"),
                            ("maintenance", "Under Maintenance"),
                            ("error", "Error State"),
                        ],
                        default="offline",
                        max_length=20,
                    ),
                ),
                ("last_seen", models.DateTimeField(blank=True, null=True)),
                (
                    "battery_level",
                    models.IntegerField(
                        blank=True, help_text="Battery percentage (0-100)", null=True
                    ),
                ),
                (
                    "signal_strength",
                    models.CharField(
                        blank=True, help_text="Signal strength indicator", max_length=20
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=8, max_digits=10, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=8, max_digits=11, null=True
                    ),
                ),
                (
                    "configuration",
                    models.JSONField(
                        default=dict, help_text="Device-specific configuration"
                    ),
                ),
                ("installed_date", models.DateTimeField(auto_now_add=True)),
                ("last_maintenance", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                ("total_data_points", models.IntegerField(default=0)),
                ("last_data_received", models.DateTimeField(blank=True, null=True)),
                (
                    "establishment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="iot_devices",
                        to="company.establishment",
                    ),
                ),
            ],
            options={
                "db_table": "carbon_iot_device",
                "ordering": ["establishment", "device_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="IoTDataPoint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField()),
                ("data", models.JSONField(help_text="Raw sensor data")),
                (
                    "processed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this data has been processed into carbon entries",
                    ),
                ),
                (
                    "quality_score",
                    models.FloatField(
                        default=1.0, help_text="Data quality score (0.0-1.0)"
                    ),
                ),
                ("anomaly_detected", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "carbon_entry",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="carbon.carbonentry",
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_points",
                        to="carbon.iotdevice",
                    ),
                ),
            ],
            options={
                "db_table": "carbon_iot_data_point",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="AutomationRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "device_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("fuel_sensor", "Fuel Consumption Sensor"),
                            ("weather_station", "Weather Station"),
                            ("soil_moisture", "Soil Moisture Sensor"),
                            ("irrigation", "Irrigation Controller"),
                            ("equipment_monitor", "Equipment Monitor"),
                            ("gps_tracker", "GPS Tracker"),
                        ],
                        help_text="Apply to specific device type",
                        max_length=20,
                    ),
                ),
                (
                    "trigger_type",
                    models.CharField(
                        choices=[
                            ("threshold", "Threshold Trigger"),
                            ("pattern", "Pattern Recognition"),
                            ("schedule", "Scheduled Trigger"),
                            ("weather", "Weather Condition"),
                            ("combination", "Multiple Conditions"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "trigger_config",
                    models.JSONField(
                        help_text="Trigger configuration (thresholds, patterns, etc.)"
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("create_event", "Create Carbon Event"),
                            ("send_alert", "Send Alert"),
                            ("update_status", "Update Status"),
                            ("trigger_webhook", "Trigger Webhook"),
                            ("generate_report", "Generate Report"),
                        ],
                        max_length=20,
                    ),
                ),
                ("action_config", models.JSONField(help_text="Action configuration")),
                ("is_active", models.BooleanField(default=True)),
                ("last_triggered", models.DateTimeField(blank=True, null=True)),
                ("trigger_count", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("description", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "establishment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="automation_rules",
                        to="company.establishment",
                    ),
                ),
            ],
            options={
                "db_table": "carbon_automation_rule",
                "ordering": ["establishment", "name"],
            },
        ),
        migrations.AddIndex(
            model_name="iotdatapoint",
            index=models.Index(
                fields=["device", "-timestamp"], name="carbon_iot__device__a147a8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="iotdatapoint",
            index=models.Index(
                fields=["processed", "-timestamp"],
                name="carbon_iot__process_b820c6_idx",
            ),
        ),
    ]
