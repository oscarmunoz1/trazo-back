#!/usr/bin/env python3
"""
Trazo Blockchain Setup Script

This script helps set up the blockchain feature for carbon verification.
It guides you through the process of configuring environment variables
and deploying the smart contract to Polygon Amoy Testnet.
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def print_header():
    print("=" * 60)
    print("🌱 TRAZO BLOCKCHAIN SETUP")
    print("Carbon Verification on Polygon Amoy Testnet")
    print("=" * 60)
    print()

def check_requirements():
    """Check if required tools are installed"""
    print("📋 Checking requirements...")
    
    # Check Node.js
    try:
        result = subprocess.run(['node', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"✅ Node.js: {result.stdout.strip()}")
        else:
            print("❌ Node.js not found. Please install Node.js 18+")
            return False
    except FileNotFoundError:
        print("❌ Node.js not found. Please install Node.js 18+")
        return False
    
    print()
    return True

def setup_environment():
    """Guide user through environment setup"""
    print("🔧 Environment Setup")
    print()
    
    # Check if .env exists
    env_file = Path("contracts/.env")
    env_vars = {}
    
    if env_file.exists():
        print("📄 Found existing .env file")
        with open(env_file, 'r') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    env_vars[key] = value
    else:
        print("📄 Creating new .env file")
    
    # Required environment variables
    required_vars = {
        'POLYGON_RPC_URL': 'https://rpc-amoy.polygon.technology/',
        'BLOCKCHAIN_PRIVATE_KEY': '',
        'POLYGONSCAN_API_KEY': ''
    }
    
    print("\n🔑 Environment Variables Setup:")
    print("Please provide the following information:")
    print()
    
    for var, default in required_vars.items():
        current_value = env_vars.get(var, default)
        
        if var == 'BLOCKCHAIN_PRIVATE_KEY':
            if not current_value:
                print(f"🔐 {var}:")
                print("   This is your wallet's private key (64 characters)")
                print("   ⚠️  KEEP THIS SECRET! Never share or commit to git")
                print("   You can generate one at: https://vanity-eth.tk/")
                new_value = input(f"   Enter private key (current: {'SET' if current_value else 'NOT SET'}): ").strip()
            else:
                print(f"🔐 {var}: SET ✅")
                new_value = current_value
        elif var == 'POLYGONSCAN_API_KEY':
            if not current_value:
                print(f"🔍 {var}:")
                print("   Get free API key at: https://polygonscan.com/apis")
                print("   This is optional but recommended for contract verification")
                new_value = input(f"   Enter API key (optional): ").strip()
            else:
                print(f"🔍 {var}: SET ✅")
                new_value = current_value
        else:
            print(f"🌐 {var}: {current_value}")
            new_value = current_value
        
        env_vars[var] = new_value or default
    
    # Write .env file
    env_file.parent.mkdir(exist_ok=True)
    with open(env_file, 'w') as f:
        f.write("# Trazo Blockchain Configuration\n")
        f.write("# Generated by setup_blockchain.py\n\n")
        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")
    
    print(f"\n✅ Environment file saved to: {env_file}")
    return env_vars

def install_dependencies():
    """Install npm dependencies"""
    print("\n📦 Installing dependencies...")
    
    contracts_dir = Path("contracts")
    if not contracts_dir.exists():
        print("❌ contracts directory not found")
        return False
    
    try:
        result = subprocess.run(
            ['npm', 'install'], 
            cwd=contracts_dir, 
            capture_output=True, 
            text=True
        )
        
        if result.returncode == 0:
            print("✅ Dependencies installed successfully")
            return True
        else:
            print(f"❌ Failed to install dependencies: {result.stderr}")
            return False
    except Exception as e:
        print(f"❌ Error installing dependencies: {e}")
        return False

def print_next_steps():
    """Print next steps for the user"""
    print("\n🎉 SETUP READY!")
    print("=" * 60)
    print()
    print("📋 Next Steps:")
    print()
    print("1. 💰 Get test MATIC tokens:")
    print("   Visit: https://faucet.polygon.technology/")
    print("   Select 'Polygon Amoy' and enter your wallet address")
    print()
    print("2. 🚀 Deploy the smart contract:")
    print("   cd contracts")
    print("   npm run deploy:amoy")
    print()
    print("3. 🔧 Update your Django .env file with the contract address")
    print()
    print("4. 🔄 Restart your Django server:")
    print("   python manage.py runserver")
    print()
    print("5. 🧪 Test the blockchain feature:")
    print("   - Scan a QR code to see blockchain verification")
    print("   - Check the API endpoints at /api/carbon/blockchain/")
    print()
    print("=" * 60)

def main():
    print_header()
    
    # Check requirements
    if not check_requirements():
        sys.exit(1)
    
    # Setup environment
    env_vars = setup_environment()
    
    # Install dependencies
    if not install_dependencies():
        sys.exit(1)
    
    # Print next steps
    print_next_steps()

if __name__ == "__main__":
    main() 