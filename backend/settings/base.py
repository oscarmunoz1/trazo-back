"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from dotenv import load_dotenv
from decouple import config
from celery.schedules import crontab
from pathlib import Path
from datetime import timedelta
from celery.schedules import crontab

BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

BASE_TRAZO_URL = config("BASE_TRAZO_URL", default="http://localhost:3000/")

BASE_APP_URL = config("BASE_APP_URL", default="http://app.localhost:3000/")
BASE_CONSUMER_URL = config("BASE_CONSUMER_URL", default="http://consumer.localhost:3000/")
CSRF_TRUSTED_ORIGINS = config("CSRF_TRUSTED_ORIGINS", default="http://localhost:3000").split(",")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = config("ALLOWED_HOSTS", default="localhost,127.0.0.1").split(",")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "rest_framework",
    "rest_framework_simplejwt",
    "whitenoise.runserver_nostatic",
    "corsheaders",
    "users",
    "company",
    "product",
    "history",
    "reviews",
    "common",
    "subscriptions",
    "carbon",
    "support",
    "education",
    # django-allauth apps
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",     # for Google OAuth 2.0
    "allauth.socialaccount.providers.facebook",   # for Facebook OAuth 2.0
    "allauth.socialaccount.providers.apple",      # for Apple Sign In
    # Celery and Redis
    "django_celery_beat",
    "django_redis",
    # Security
    "django_ratelimit",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "backend.security_middleware.SecurityLoggingMiddleware",
    "backend.security_middleware.CSRFSecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "carbon.middleware.security_middleware.CarbonSecurityMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'subscriptions.middleware.SubscriptionMiddleware',
    'subscriptions.middleware.UsageTrackingMiddleware',
]

ROOT_URLCONF = "backend.urls"

AUTH_USER_MODEL = "users.User"

# Rate Limiting Configuration
RATELIMIT_ENABLE = True
RATELIMIT_USE_CACHE = 'default'
RATELIMIT_VIEW = 'django_ratelimit.exceptions.Ratelimited'

# Security settings for rate limiting
DJANGO_RATELIMIT_RATELIMITED_RESPONSE = 'Too many requests'

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ("users.auth.CustomAuthentication",),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle"
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "100/hour",
        "user": "1000/hour",
        "login": "5/minute",
        "carbon_calculation": "200/hour",
        "api_sensitive": "50/hour"
    },
}

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # `allauth` needs this from django
                "django.template.context_processors.request",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"

GEOIP_PATH = os.path.join(Path(__file__).resolve().parent.parent.parent, "geoip_data")

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config("DATABASE_NAME", default="postgres"),
        "USER": config("DATABASE_USER", default="postgres"),
        "PASSWORD": config("DATABASE_PASSWORD", default="postgres"),
        "HOST": config("DATABASE_HOST", default="db"),
        "PORT": config("DATABASE_PORT", default=5432),
    }
}

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Celery Configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Additional Celery Settings
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25 minutes
CELERY_TASK_ACKS_LATE = True
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_REJECT_ON_WORKER_LOST = True
CELERY_TASK_DEFAULT_QUEUE = 'default'
CELERY_TASK_QUEUES = {
    'default': {
        'exchange': 'default',
        'routing_key': 'default',
    },
    'carbon': {
        'exchange': 'carbon',
        'routing_key': 'carbon',
    },
}

# Celery Beat Schedule
CELERY_BEAT_SCHEDULE = {
    'generate-nightly-reports': {
        'task': 'carbon.tasks.generate_nightly_reports',
        'schedule': crontab(hour=0, minute=0),  # Run at midnight
        'options': {'queue': 'carbon'},
    },
    'award-sustainability-badges': {
        'task': 'carbon.tasks.award_sustainability_badges',
        'schedule': crontab(hour=1, minute=0),  # Run at 1 AM
        'options': {'queue': 'carbon'},
    },
    'cleanup-old-audit-logs': {
        'task': 'carbon.tasks.cleanup_old_audit_logs',
        'schedule': crontab(hour=2, minute=0),  # Run at 2 AM
        'options': {'queue': 'carbon'},
    },
    'update-industry-benchmarks': {
        'task': 'carbon.tasks.update_industry_benchmarks',
        'schedule': crontab(hour=3, minute=0),  # Run at 3 AM
        'options': {'queue': 'carbon'},
    },
}

# Redis Cache Configuration
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://localhost:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PARSER_CLASS": "redis.connection.HiredisParser",
            "CONNECTION_POOL_CLASS": "redis.BlockingConnectionPool",
            "CONNECTION_POOL_CLASS_KWARGS": {
                "max_connections": 50,
                "timeout": 20,
            },
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
            "IGNORE_EXCEPTIONS": True,
        },
        "KEY_PREFIX": "trazo",
    }
}

# CoolFarmTool API configuration for carbon calculations
COOLFARMTOOL_API_KEY = config('COOLFARMTOOL_API_KEY', default='')
COOLFARMTOOL_BASE_URL = config('COOLFARMTOOL_BASE_URL', default='https://api.coolfarmtool.org')

# CoolFarmTool API Configuration
COOLFARM_API_KEY = os.environ.get('COOLFARM_API_KEY', '')
COOLFARM_API_URL = os.environ.get('COOLFARM_API_URL', 'https://api.coolfarmtool.org/v1')

# OpenAI API Configuration for Voice Processing
OPENAI_API_KEY = config('OPENAI_API_KEY', default='')
OPENAI_MODEL = config('OPENAI_MODEL', default='gpt-3.5-turbo')
OPENAI_MAX_TOKENS = config('OPENAI_MAX_TOKENS', default=500, cast=int)
OPENAI_TEMPERATURE = config('OPENAI_TEMPERATURE', default=0.3, cast=float)

# ICR (International Carbon Registry) API Configuration
ICR_SANDBOX_URL = config('ICR_SANDBOX_URL', default='https://sandbox-api.carbonregistry.com')
ICR_PRODUCTION_URL = config('ICR_PRODUCTION_URL', default='https://api.carbonregistry.com')
ICR_API_KEY = config('ICR_API_KEY', default='')
USE_ICR_SANDBOX = config('USE_ICR_SANDBOX', default=True, cast=bool)

# Legacy Registry URLs (for documentation - these APIs don't exist publicly)
VCS_REGISTRY_URL = config('VCS_REGISTRY_URL', default='https://registry.verra.org/api/v1')
VCS_API_KEY = config('VCS_API_KEY', default='')
GOLD_STANDARD_API_URL = config('GOLD_STANDARD_API_URL', default='https://api.goldstandard.org/v1')
GOLD_STANDARD_API_KEY = config('GOLD_STANDARD_API_KEY', default='')

EMAIL_HOST = config("EMAIL_HOST", default="smtp.sendgrid.net")
EMAIL_HOST_USER = "apikey"
EMAIL_HOST_PASSWORD = config("SENDGRID_API_KEY", default=None)
EMAIL_PORT = 587
EMAIL_USE_TLS = True

BASE_URL = config("BASE_URL", default="http://localhost:8000/")

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# S3 Configuration 
AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID', default=None)
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY', default=None)
AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME', default=None)
AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME', default='us-east-1')
AWS_S3_VERIFY = True
AWS_S3_ADDRESSING_STYLE = "virtual"
AWS_QUERYSTRING_AUTH = False
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}

# Use S3 for media files
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

LOGGING = {
    # Version del logging
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[%(asctime)s] %(levelname)s | %(name)s | "
            "%(module)s | %(funcName)s | %(lineno)d | %(message)s",
            "datefmt": "%d/%b/%Y %H:%M:%S",
        },
    },
    "filters": {
        "require_debug_false": {"()": "django.utils.log.RequireDebugFalse"},
    },
    # Se definen dos handlers para develop: Console y File.
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "null": {
            "class": "logging.NullHandler",
        },
        "security_file": {
            "level": "WARNING",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "logs", "security.log"),
            "maxBytes": 1024*1024*10,  # 10MB
            "backupCount": 5,
            "formatter": "verbose",
        },
    },
    # Se redefinen dos loggers para satisfacer los requisitos
    "loggers": {
        "backend": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "django.db.backends": {
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": False,
        },
        "security": {
            "handlers": ["console", "security_file"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.security.DisallowedHost": {
            "handlers": ["null"],
            "propagate": False,
        },
        "": {
            "handlers": [
                "console",
            ],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# The absolute path to the directory where collectstatic will collect static files for deployment.
STATIC_ROOT = BASE_DIR.parent / "static"

# The URL to use when referring to static files (where they will be served from)
STATIC_URL = "/static/"

# Simplified static file serving.
# https://pypi.org/project/whitenoise/
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# CORS settings
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://app.localhost:3000", 
    "http://consumer.localhost:3000",
    "http://127.0.0.1:3000",
]
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Allow all origins in development
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# django-allauth settings

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

SITE_ID = 1
LOGIN_REDIRECT_URL = "/"


# Additional configuration settings
SOCIALACCOUNT_QUERY_EMAIL = True
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = True

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    }
}

JWT_EXPIRATION_DELTA = timedelta(seconds=20)

# Cookie security settings - adjust based on environment
SESSION_COOKIE_SECURE = not DEBUG  # Only secure in production
CSRF_COOKIE_SECURE = not DEBUG     # Only secure in production
CSRF_COOKIE_HTTPONLY = False       # Allow JavaScript access to CSRF token
CSRF_COOKIE_SAMESITE = 'Lax'       # Less restrictive for development
CSRF_COOKIE_DOMAIN = None          # No domain restriction in development
CSRF_TRUSTED_ORIGINS = config("CSRF_TRUSTED_ORIGINS", default="http://localhost:3000,http://app.localhost:3000").split(",")

# Session configuration
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_NAME = 'sessionid'

FILE_UPLOAD_MAX_MEMORY_SIZE = (
    1024 * 1024 * 10
)  # Set to desired size in bytes (10MB in this case)


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=20),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
    # custom
    "AUTH_COOKIE": "access",  # Cookie name. Enables cookies if value is set.
    "AUTH_COOKIE_DOMAIN": None,  # A string like "example.com", or None for standard domain cookie.
    "AUTH_COOKIE_SECURE": not DEBUG,  # Whether the auth cookies should be secure (https:// only).
    "AUTH_COOKIE_HTTP_ONLY": True,  # Http only cookie flag.It's not fetch by javascript.
    "AUTH_COOKIE_PATH": "/",  # The path of the auth cookie.
    "AUTH_COOKIE_SAMESITE": "Lax" if DEBUG else "None",  # Whether to set the flag restricting cookie leaks on cross-site requests. This can be 'Lax', 'Strict', or None to disable the flag.
}

# Stripe Settings
STRIPE_PUBLIC_KEY = config("STRIPE_PUBLIC_KEY", default="")
STRIPE_SECRET_KEY = config("STRIPE_SECRET_KEY", default="")
STRIPE_WEBHOOK_SECRET = config("STRIPE_WEBHOOK_SECRET", default="")
FRONTEND_URL = config("FRONTEND_URL", default="http://app.localhost:3000")

# Blockchain Configuration - Environment Specific Polygon Networks
ENVIRONMENT = config("ENVIRONMENT", default="development")

# Polygon Network Configuration
if ENVIRONMENT == "production":
    # Production: Polygon Mainnet
    POLYGON_RPC_URL = config("POLYGON_RPC_URL", default="https://polygon-rpc.com/")
    POLYGON_CHAIN_ID = 137
    POLYGON_EXPLORER_URL = "https://polygonscan.com"
    BLOCKCHAIN_NETWORK_NAME = "polygon_mainnet"
else:
    # Development/Staging: Polygon Amoy Testnet
    POLYGON_RPC_URL = config("POLYGON_RPC_URL", default="https://rpc-amoy.polygon.technology/")
    POLYGON_CHAIN_ID = 80002
    POLYGON_EXPLORER_URL = "https://amoy.polygonscan.com"
    BLOCKCHAIN_NETWORK_NAME = "polygon_amoy"

# Blockchain Contract Configuration
CARBON_CONTRACT_ADDRESS = config("CARBON_CONTRACT_ADDRESS", default="")
CARBON_CREDIT_CONTRACT_ADDRESS = config("CARBON_CREDIT_CONTRACT_ADDRESS", default="")  # NEW
BLOCKCHAIN_PRIVATE_KEY = config("BLOCKCHAIN_PRIVATE_KEY", default="")

# Production Blockchain Settings (NEW)
BLOCKCHAIN_NETWORK_NAME = config("BLOCKCHAIN_NETWORK_NAME", default="polygon_amoy")
POLYGON_EXPLORER_URL = config("POLYGON_EXPLORER_URL", default="https://amoy.polygonscan.com")

# Gas Optimization Settings (NEW)
BLOCKCHAIN_MAX_GAS_PRICE = config("BLOCKCHAIN_MAX_GAS_PRICE", default=100000000000, cast=int)  # 100 gwei max
BLOCKCHAIN_BATCH_SIZE_LIMIT = config("BLOCKCHAIN_BATCH_SIZE_LIMIT", default=50, cast=int)
BLOCKCHAIN_TIMEOUT_SECONDS = config("BLOCKCHAIN_TIMEOUT_SECONDS", default=180, cast=int)

# Blockchain Feature Settings
BLOCKCHAIN_ENABLED = config("BLOCKCHAIN_ENABLED", default=True, cast=bool)
AUTO_VERIFY_CARBON_RECORDS = config("AUTO_VERIFY_CARBON_RECORDS", default=True, cast=bool)
USDA_VERIFICATION_ENABLED = config("USDA_VERIFICATION_ENABLED", default=True, cast=bool)

# Carbon Transparency Mission Alignment
CARBON_TRANSPARENCY_FOCUS = True  # Core mission: agricultural carbon transparency
FARM_MANAGEMENT_FEATURES_DISABLED = True  # Stay focused on carbon, not farm optimization

# Celery Beat Schedule for Blockchain Tasks
CELERY_BEAT_SCHEDULE = {
    'batch-submit-monthly-summaries': {
        'task': 'carbon.tasks.batch_submit_monthly_summaries',
        'schedule': crontab(hour=2, minute=0, day_of_month=1),  # 2:00 AM UTC on 1st of each month
    },
}


# Social Authentication Settings
GOOGLE_CLIENT_ID = config("GOOGLE_CLIENT_ID", default="")
GOOGLE_CLIENT_SECRET = config("GOOGLE_CLIENT_SECRET", default="")

FACEBOOK_APP_ID = config("FACEBOOK_APP_ID", default="")
FACEBOOK_APP_SECRET = config("FACEBOOK_APP_SECRET", default="")

APPLE_CLIENT_ID = config("APPLE_CLIENT_ID", default="")
APPLE_TEAM_ID = config("APPLE_TEAM_ID", default="")
APPLE_KEY_ID = config("APPLE_KEY_ID", default="")
APPLE_PRIVATE_KEY = config("APPLE_PRIVATE_KEY", default="")

# Enhanced Security Configuration
BLOCKCHAIN_MULTISIG_ENABLED = config("BLOCKCHAIN_MULTISIG_ENABLED", default=False, cast=bool)
BLOCKCHAIN_REQUIRED_SIGNATURES = config("BLOCKCHAIN_REQUIRED_SIGNATURES", default=2, cast=int)
BLOCKCHAIN_SIGNERS = config("BLOCKCHAIN_SIGNERS", default="").split(",") if config("BLOCKCHAIN_SIGNERS", default="") else []

# AWS Security Configuration
AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID", default="")
AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY", default="")
AWS_REGION = config("AWS_REGION", default="us-east-1")
AWS_KMS_KEY_ID = config("AWS_KMS_KEY_ID", default="")
AWS_SECRETS_MANAGER_REGION = config("AWS_SECRETS_MANAGER_REGION", default="us-east-1")

# Key Management Configuration
KEY_ROTATION_DAYS = config("KEY_ROTATION_DAYS", default=30, cast=int)
SECURE_KEY_STORAGE_ENABLED = config("SECURE_KEY_STORAGE_ENABLED", default=False, cast=bool)

# Registry Integration Configuration
ICR_API_KEY = config("ICR_API_KEY", default="")
ICR_API_URL = config("ICR_API_URL", default="https://api.internationalcarbonregistry.org/v1/")
REGISTRY_VERIFICATION_TIMEOUT = config("REGISTRY_VERIFICATION_TIMEOUT", default=30, cast=int)

# USDA API Configuration
USDA_API_KEY = config("USDA_API_KEY", default="")
USDA_FDC_API_KEY = config("USDA_FDC_API_KEY", default="")
USDA_NASS_API_KEY = config("USDA_NASS_API_KEY", default="")

# Carbon Security Configuration
CARBON_SECURITY_ENABLED = config("CARBON_SECURITY_ENABLED", default=True, cast=bool)
CARBON_AUDIT_ENABLED = config("CARBON_AUDIT_ENABLED", default=True, cast=bool)
TRUST_SCORE_THRESHOLD = config("TRUST_SCORE_THRESHOLD", default=0.7, cast=float)

# Photo Evidence Configuration
PHOTO_EVIDENCE_MAX_SIZE = config("PHOTO_EVIDENCE_MAX_SIZE", default=10*1024*1024, cast=int)  # 10MB
PHOTO_EVIDENCE_ALLOWED_TYPES = config("PHOTO_EVIDENCE_ALLOWED_TYPES", default="image/jpeg,image/png,image/webp").split(",")
PHOTO_EVIDENCE_COMPRESSION_QUALITY = config("PHOTO_EVIDENCE_COMPRESSION_QUALITY", default=85, cast=int)
